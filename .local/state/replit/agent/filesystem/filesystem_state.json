{"file_contents":{"Readme.md":{"content":"# RepoRadar\n\n## Overview\n\nRepoRadar is a full-stack web application that provides AI-powered analysis of GitHub repositories. The platform helps users discover, analyze, and compare repositories based on key metrics including originality, completeness, marketability, monetization potential, and usefulness. Built with a modern React frontend and Express.js backend, it leverages Google's Gemini 2.5 Pro AI model to provide comprehensive repository insights.\n\n## Recent Changes (January 2025)\n\n### Features 12-15 Completed (January 16, 2025)\n- **Feature 12: API Access & Developer Tools**\n  - Built comprehensive Developer API page with API key management\n  - Implemented RESTful API endpoints for programmatic access\n  - Created webhook configuration system\n  - Added detailed API documentation with code examples\n  - Enabled rate limiting based on subscription tiers\n\n- **Feature 13: Advanced Analytics Dashboard**  \n  - Created sophisticated analytics visualization with multiple chart types\n  - Implemented time series analysis and trend predictions\n  - Added language distribution and performance metrics\n  - Built AI-powered insights generation\n  - Created activity heatmaps and correlation analysis\n  - Added export functionality for analytics data\n\n- **Feature 14: Integration Hub**\n  - Developed comprehensive integration platform supporting 8+ services\n  - Built connectors for GitHub, GitLab, Slack, Discord, Jira, and CI/CD tools\n  - Implemented secure OAuth and webhook-based integrations\n  - Created categorized integration management interface\n  - Added real-time integration activity monitoring\n\n- **Feature 15: AI-Powered Code Review**\n  - Built AI code review system with comprehensive analysis\n  - Implemented security vulnerability detection\n  - Added code quality metrics and complexity analysis  \n  - Created issue categorization with severity levels\n  - Built suggestions for improvements and best practices\n  - Added support for both repository and snippet analysis\n\n## Recent Changes (January 2025)\n- Fixed routing issue where analyzing repositories redirected to home page\n- Implemented \"Find Similar\" functionality with AI-powered similarity matching\n- Added direct repository ID passing to avoid re-analysis of existing repos\n- Made all analysis features available to both authenticated and non-authenticated users\n- Enhanced error handling and debugging for better user experience\n- Added comprehensive documentation section with 6 detailed sections (Overview, Analysis Metrics, Features Guide, API Reference, FAQ, Changelog)\n- Implemented AI Assistant with unique holographic interface design\n- Created floating AI help button with animated holographic popup\n- Integrated AI assistant trained on documentation for context-aware help\n- Added Docs navigation to header for easy access\n- Built comprehensive monetization system with tiered subscription plans\n- Implemented Stripe payment integration for Pro ($19/month) and Enterprise ($99/month) plans\n- Added user subscription management with database schema updates\n- Created pricing page with feature comparison and upgrade flows\n- Built checkout system with Stripe Elements integration\n- Added payment success page with subscription confirmation\n- **Completed Intelligent User Profiles for Pro/Enterprise users:**\n  - Added database schema with 7 new tables (bookmarks, tags, collections, etc.)\n  - Implemented comprehensive profile management with tabbed interface\n  - Built AI-powered repository recommendations using Gemini 2.5 Pro\n  - Created bookmarks system for quick repository access\n  - Added custom tags for repository categorization\n  - Implemented collections for organizing related repositories\n  - Built preferences system for personalized experience\n  - Added activity tracking for better recommendations\n  - Protected all profile features with subscription tier checks\n- **Enhanced Analysis Display (January 2025):**\n  - Added detailed explanations for all metrics with reasoning\n  - Implemented WHY explanations for scores with supporting evidence\n  - Added impact analysis for weaknesses and recommendations\n  - Created expected outcomes for all recommendations\n  - Built backwards-compatible enhanced analytics display\n  - **Fixed all TypeScript compilation errors in PDF export functionality**\n- **Implemented Advanced Search Functionality:**\n  - Added comprehensive filtering system with language, stars, date range filters\n  - Created advanced sorting options (best match, stars, forks, updated, created)\n  - Implemented license filtering and topic-based search\n  - Added toggles for archived/forked repositories and open issues\n  - Built collapsible filter panel with intuitive UI\n  - Created star range slider with min/max controls\n- **Created Batch Analysis Feature:**\n  - Built batch processing for analyzing multiple repositories simultaneously\n  - Added CSV and PDF export functionality for batch results\n  - Implemented progress tracking with real-time status updates\n  - Created queue management with add/remove capabilities\n  - Added tier-based limitations (3 repos for free users, unlimited for Pro)\n  - Built comprehensive statistics dashboard for batch operations\n- **Updated Comprehensive Documentation (January 2025):**\n  - Enhanced overview section with new advanced search and batch analysis features\n  - Added detailed features guide sections for advanced search and batch analysis\n  - Updated API reference with new endpoints for batch operations and enhanced search\n  - Created version 2.3.0 changelog entry documenting all recent improvements\n  - Integrated navigation links for batch analysis in header\n- **Completed Feature 7: Export Functionality (January 2025):**\n  - Created comprehensive export utilities supporting PDF and CSV formats\n  - Implemented export for individual analysis results with full metrics\n  - Added batch export capability for multiple analysis results\n  - Fixed all TypeScript compilation errors related to scoreExplanations\n  - Updated batch analysis page to use new centralized export utilities\n  - Added export buttons to analysis results component with proper error handling\n- **Implemented Interactive Onboarding Tour (Feature 8 - January 2025):**\n  - Added 5-step guided tour covering essential features\n  - Auto-starts for new users with localStorage tracking\n  - Restart option available in profile preferences\n  - Smart targeting with fallback for missing elements\n- **Added Micro-interactions (Feature 9 - January 2025):**\n  - Button scaling and ripple effects on all interactive elements\n  - Input focus animations with subtle shadow effects\n  - Pulse animation on notification badges\n  - Card lift effects with fade-in transitions\n  - Created skeleton loader components for loading states\n  - Added various animations: bounce, shake, spin, slide-in\n- **Improved Navigation UX (January 2025):**\n  - Replaced flat navigation with organized dropdown menus\n  - Grouped related features under \"Discover\", \"Workspace\", and \"Resources\"\n  - Added descriptive icons and explanations for each menu item\n  - Enhanced mobile responsiveness with collapsible navigation\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development patterns\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Radix UI components with shadcn/ui design system for consistent, accessible interfaces\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules for modern JavaScript features\n- **API Design**: RESTful API endpoints with structured error handling\n- **Session Management**: Express sessions with PostgreSQL storage for persistent user state\n- **File Structure**: Monorepo structure with shared schema between client and server\n\n### Authentication System\n- **Provider**: Replit OIDC (OpenID Connect) for seamless authentication\n- **Strategy**: Passport.js with OpenID Connect strategy\n- **Session Storage**: PostgreSQL-backed sessions with configurable TTL\n- **Security**: HTTP-only cookies, CSRF protection, and secure session handling\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Neon serverless deployment\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Centralized schema definitions in shared directory\n- **Migration Strategy**: Drizzle Kit for database schema migrations\n- **Connection Pooling**: Neon serverless connection pooling for optimal performance\n\n### AI Integration\n- **AI Provider**: Google Gemini 2.5 Pro for repository analysis\n- **Analysis Metrics**: Five-factor scoring system (originality, completeness, marketability, monetization, usefulness)\n- **Response Format**: Structured JSON responses with comprehensive insights\n- **Rate Limiting**: Built-in request management for API efficiency\n\n### External Service Integrations\n- **GitHub API**: Repository data fetching, search functionality, and language analysis\n- **Authentication**: Optional GitHub token for increased API rate limits\n- **Data Enrichment**: Real-time repository statistics and metadata retrieval\n\n### Development Workflow\n- **Development Server**: Concurrent client and server development with Vite HMR\n- **Type Safety**: Shared TypeScript definitions between frontend and backend\n- **Code Quality**: ESLint and TypeScript strict mode for code consistency\n- **Asset Management**: Vite-based asset optimization and bundling\n\n### Deployment Architecture\n- **Build Process**: Separate client (Vite) and server (esbuild) build pipelines\n- **Production Server**: Node.js with compiled TypeScript for optimal performance\n- **Static Assets**: Client build served from Express with proper caching headers\n- **Environment Configuration**: Environment-based configuration for different deployment stages\n\n## External Dependencies\n\n### Core AI Services\n- **Google Gemini API**: Repository analysis and AI-powered insights generation\n- **GitHub API v3**: Repository search, metadata retrieval, and language statistics\n\n### Database Services\n- **Neon PostgreSQL**: Serverless PostgreSQL database with connection pooling\n- **Drizzle ORM**: Type-safe database operations and schema management\n\n### Authentication Services\n- **Replit OIDC**: OpenID Connect authentication provider for user management\n\n### UI and Design Libraries\n- **Radix UI**: Headless, accessible UI component library\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Lucide React**: Consistent icon library for UI elements\n\n### Development and Build Tools\n- **Vite**: Frontend build tool with HMR and optimization\n- **esbuild**: Fast TypeScript/JavaScript bundler for server builds\n- **TanStack Query**: Server state management and caching solution\n\n### Session and Security\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n- **Passport.js**: Authentication middleware with OIDC strategy support","size_bytes":11270},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nRepoRadar is a full-stack web application that provides AI-powered analysis of GitHub repositories. The platform helps users discover, analyze, and compare repositories based on key metrics including originality, completeness, marketability, monetization potential, and usefulness. Built with modern web technologies, it leverages Google's Gemini 2.5 Pro AI for comprehensive repository insights and includes features like advanced analytics, code review, integrations, and developer tools.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing with support for both authenticated and public routes\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives with Tailwind CSS styling\n- **State Management**: React Query for server state management and caching\n- **Styling**: Tailwind CSS with custom CSS variables for theming, supporting both light and dark modes\n- **Icons**: Font Awesome and Lucide React icons\n- **Charts**: Recharts for data visualization including radar charts, bar charts, and line charts\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: Replit OIDC authentication with session management\n- **File Upload**: Static file serving for assets\n- **API Design**: RESTful API with structured error handling and logging middleware\n\n## AI Integration\n- **Primary AI**: Google Gemini 2.5 Pro for repository analysis and AI assistant functionality\n- **Analysis Engine**: Comprehensive repository evaluation across 5 key metrics with detailed scoring explanations\n- **AI Assistant**: Context-aware help system with holographic UI design\n- **Code Review**: AI-powered code analysis with security vulnerability detection\n\n## Data Storage\n- **Primary Database**: PostgreSQL with connection pooling via Neon serverless\n- **ORM**: Drizzle with automatic migrations and type-safe queries\n- **Session Storage**: PostgreSQL-backed session store with configurable TTL\n- **Schema**: Comprehensive database schema supporting users, repositories, analyses, collections, teams, and more\n\n## Authentication & Authorization\n- **Provider**: Replit OIDC with OpenID Connect\n- **Session Management**: Express sessions with secure HTTP-only cookies\n- **Access Control**: Route-level authentication middleware with graceful fallback for public features\n- **User Management**: Profile management with subscription tiers and API key generation\n\n## External Dependencies\n\n- **GitHub API**: Repository data fetching and search functionality\n- **Google Gemini AI**: Advanced AI analysis and natural language processing\n- **Stripe**: Payment processing for Pro and Enterprise subscriptions with webhook handling\n- **PayPal**: Alternative payment processing option\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Replit Auth**: OIDC authentication provider with session management\n- **Chart Libraries**: Recharts for data visualization and analytics dashboards\n- **Email Services**: Integration capabilities for notifications and webhooks","size_bytes":3339},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Linear-inspired color scheme\n        'dark': '#0A0A0A',\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        glow: {\n          '0%': { boxShadow: '0 0 20px rgba(255, 107, 53, 0.3)' },\n          '100%': { boxShadow: '0 0 30px rgba(255, 107, 53, 0.5)' },\n        },\n        float: {\n          '0%, 100%': { transform: 'translateY(0px)' },\n          '50%': { transform: 'translateY(-10px)' },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        glow: \"glow 2s ease-in-out infinite alternate\",\n        float: \"float 3s ease-in-out infinite\",\n      },\n      spacing: {\n        '18': '4.5rem',\n        '88': '22rem',\n      },\n      backgroundImage: {\n        'gradient-neon': 'linear-gradient(135deg, #FF6B35, #FF3333, #FF8C69)',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3412},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport interface RepositoryAnalysisInput {\n  name: string;\n  description: string;\n  language: string;\n  stars: number;\n  forks: number;\n  size: number;\n  languages: Record<string, number>;\n  topics: string[];\n  readme?: string;\n}\n\nexport interface RepositoryAnalysisResult {\n  originality: number;\n  completeness: number;\n  marketability: number;\n  monetization: number;\n  usefulness: number;\n  overallScore: number;\n  summary: string;\n  strengths: Array<{\n    point: string;\n    reason: string;\n  }>;\n  weaknesses: Array<{\n    point: string;\n    reason: string;\n  }>;\n  recommendations: Array<{\n    suggestion: string;\n    reason: string;\n    impact: string;\n  }>;\n  scoreExplanations: {\n    originality: string;\n    completeness: string;\n    marketability: string;\n    monetization: string;\n    usefulness: string;\n  };\n}\n\nexport async function generateAIRecommendations(\n  userId: string, \n  preferences: any, \n  recentActivity: any[]\n): Promise<any> {\n  try {\n    const prompt = `You are an expert GitHub repository recommendation system. Based on the user's preferences and recent activity, generate personalized repository recommendations.\n\nUser Preferences:\n- Preferred Languages: ${preferences?.preferredLanguages?.join(', ') || 'Any'}\n- Preferred Topics: ${preferences?.preferredTopics?.join(', ') || 'Any'}\n- Excluded Topics: ${preferences?.excludedTopics?.join(', ') || 'None'}\n- Minimum Stars: ${preferences?.minStars || 0}\n- Max Repository Age: ${preferences?.maxAge || 'Any'}\n\nRecent Activity (last 20 actions):\n${recentActivity.map(a => `- ${a.action} ${a.repositoryId ? `repository ${a.repositoryId}` : ''}`).join('\\n')}\n\nBased on this profile, recommend 10 GitHub repositories that would be most relevant and useful for this user. Focus on:\n1. Repositories matching their language preferences\n2. Topics they're interested in but avoiding excluded topics\n3. Quality repositories with appropriate star counts\n4. Active, well-maintained projects\n\nReturn a JSON object with this structure:\n{\n  \"recommendations\": [\n    {\n      \"name\": \"owner/repo\",\n      \"reason\": \"Why this repository is recommended for this user\",\n      \"matchScore\": 0.0-1.0,\n      \"primaryLanguage\": \"language\",\n      \"topics\": [\"topic1\", \"topic2\"],\n      \"stars\": 1000,\n      \"description\": \"Brief description\"\n    }\n  ],\n  \"insights\": {\n    \"topInterests\": [\"interest1\", \"interest2\"],\n    \"suggestedTopics\": [\"new topic to explore\"],\n    \"recommendationRationale\": \"Overall explanation of recommendations\"\n  }\n}`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        responseMimeType: \"application/json\",\n      },\n      contents: prompt,\n    });\n\n    const result = response.text;\n    return result ? JSON.parse(result) : { recommendations: [], insights: {} };\n  } catch (error) {\n    console.error(\"Error generating AI recommendations:\", error);\n    return { recommendations: [], insights: {} };\n  }\n}\n\nexport async function askAI(question: string): Promise<string> {\n  try {\n    const systemPrompt = `You are an AI assistant for RepoAnalyzer, a GitHub repository analysis platform.\n    \nRepoAnalyzer Features:\n- Analyzes GitHub repositories using 5 metrics: originality, completeness, marketability, monetization potential, and usefulness\n- Provides AI-powered insights using Google's Gemini 2.5 Pro with detailed explanations\n- Advanced search with 15+ filters (language, stars, date range, license, topics, etc.)\n- Batch analysis: Analyze multiple repositories simultaneously (3 for free, unlimited for Pro)\n- Repository comparison, finding similar repos, trending repositories\n- PDF and CSV export with comprehensive formatting\n- Real-time notifications with pulse animations\n- Collections and bookmarks for Pro users\n- AI-driven repository recommendations for Pro users\n- Interactive onboarding tour (5-step guide for new users)\n- Smooth micro-interactions and animations throughout the app\n- Organized dropdown navigation with three main sections\n\nNavigation Structure:\n- Discover menu: Advanced Search, Batch Analysis, Compare, Discover Trending\n- Workspace menu: Collections, Profile, Recent Analyses, Bookmarks (Pro features)\n- Resources menu: Documentation, Pricing, API Reference, FAQ\n\nUser Experience Enhancements:\n- Button scaling and ripple effects on all interactions\n- Input focus animations with shadow effects\n- Card lift effects on hover\n- Pulse animations on notification badges\n- Skeleton loaders for smooth loading states\n- Fade-in transitions for new content\n- Onboarding tour can be restarted from profile preferences\n\nInstructions:\n- Provide helpful, concise answers about RepoAnalyzer features\n- Give step-by-step instructions when asked how to use features\n- Explain metrics and scoring when asked\n- Guide users through the new dropdown navigation structure\n- Help users understand the onboarding tour and how to restart it\n- Be friendly and professional\n- Keep answers focused and actionable`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n      },\n      contents: question,\n    });\n\n    return response.text || \"I apologize, but I couldn't generate a response. Please try again.\";\n  } catch (error) {\n    console.error(\"AI Assistant error:\", error);\n    return \"I'm having trouble processing your question right now. Please try again later.\";\n  }\n}\n\nexport async function analyzeRepository(repo: RepositoryAnalysisInput): Promise<RepositoryAnalysisResult> {\n  try {\n    const systemPrompt = `You are an expert software repository analyst. Analyze the given repository and provide a comprehensive evaluation with detailed reasoning.\n\nRate each aspect from 1-10 and provide detailed insights:\n1. Originality: How unique and innovative is this project? Consider novelty of approach, creative problem-solving, and differentiation from existing solutions.\n2. Completeness: How complete and production-ready is the codebase? Consider documentation, testing, error handling, and polish.\n3. Marketability: How appealing would this be to users/customers? Consider demand, user experience, and competitive positioning.\n4. Monetization: What are the potential revenue opportunities? Consider business models, target market size, and value proposition.\n5. Usefulness: How practically useful is this project? Consider real-world applicability, problem severity, and user impact.\n\nProvide detailed explanations for WHY each score was given.\nInclude:\n- A concise summary (2-3 sentences)\n- 3-5 key strengths with clear reasoning\n- 3-5 areas for improvement with specific explanations\n- 3-5 actionable recommendations with expected impact\n\nRespond with valid JSON in this exact format:\n{\n  \"originality\": number,\n  \"completeness\": number,\n  \"marketability\": number,\n  \"monetization\": number,\n  \"usefulness\": number,\n  \"overallScore\": number,\n  \"summary\": \"string\",\n  \"strengths\": [\n    {\n      \"point\": \"Brief strength statement\",\n      \"reason\": \"Detailed explanation of why this is a strength and what evidence supports it\"\n    }\n  ],\n  \"weaknesses\": [\n    {\n      \"point\": \"Brief weakness statement\",\n      \"reason\": \"Detailed explanation of why this is a weakness and how it impacts the project\"\n    }\n  ],\n  \"recommendations\": [\n    {\n      \"suggestion\": \"Specific actionable recommendation\",\n      \"reason\": \"Why this recommendation would help\",\n      \"impact\": \"Expected positive impact on the project\"\n    }\n  ],\n  \"scoreExplanations\": {\n    \"originality\": \"Detailed reasoning for the originality score\",\n    \"completeness\": \"Detailed reasoning for the completeness score\",\n    \"marketability\": \"Detailed reasoning for the marketability score\",\n    \"monetization\": \"Detailed reasoning for the monetization score\",\n    \"usefulness\": \"Detailed reasoning for the usefulness score\"\n  }\n}`;\n\n    const repoInfo = `\nRepository: ${repo.name}\nDescription: ${repo.description}\nPrimary Language: ${repo.language}\nStars: ${repo.stars}\nForks: ${repo.forks}\nSize: ${repo.size} KB\nLanguages: ${JSON.stringify(repo.languages)}\nTopics: ${repo.topics.join(', ')}\n${repo.readme ? `README Preview: ${repo.readme.substring(0, 2000)}...` : 'No README available'}\n`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            originality: { type: \"number\" },\n            completeness: { type: \"number\" },\n            marketability: { type: \"number\" },\n            monetization: { type: \"number\" },\n            usefulness: { type: \"number\" },\n            overallScore: { type: \"number\" },\n            summary: { type: \"string\" },\n            strengths: { \n              type: \"array\", \n              items: { \n                type: \"object\",\n                properties: {\n                  point: { type: \"string\" },\n                  reason: { type: \"string\" }\n                },\n                required: [\"point\", \"reason\"]\n              } \n            },\n            weaknesses: { \n              type: \"array\", \n              items: { \n                type: \"object\",\n                properties: {\n                  point: { type: \"string\" },\n                  reason: { type: \"string\" }\n                },\n                required: [\"point\", \"reason\"]\n              } \n            },\n            recommendations: { \n              type: \"array\", \n              items: { \n                type: \"object\",\n                properties: {\n                  suggestion: { type: \"string\" },\n                  reason: { type: \"string\" },\n                  impact: { type: \"string\" }\n                },\n                required: [\"suggestion\", \"reason\", \"impact\"]\n              } \n            },\n            scoreExplanations: {\n              type: \"object\",\n              properties: {\n                originality: { type: \"string\" },\n                completeness: { type: \"string\" },\n                marketability: { type: \"string\" },\n                monetization: { type: \"string\" },\n                usefulness: { type: \"string\" }\n              },\n              required: [\"originality\", \"completeness\", \"marketability\", \"monetization\", \"usefulness\"]\n            }\n          },\n          required: [\"originality\", \"completeness\", \"marketability\", \"monetization\", \"usefulness\", \"overallScore\", \"summary\", \"strengths\", \"weaknesses\", \"recommendations\", \"scoreExplanations\"]\n        }\n      },\n      contents: repoInfo\n    });\n\n    const result = JSON.parse(response.text || '{}');\n    \n    // Ensure all scores are between 1-10\n    ['originality', 'completeness', 'marketability', 'monetization', 'usefulness', 'overallScore'].forEach(key => {\n      if (result[key]) {\n        result[key] = Math.max(1, Math.min(10, result[key]));\n      }\n    });\n\n    return result;\n  } catch (error) {\n    console.error('Error analyzing repository with Gemini:', error);\n    \n    // Fallback analysis with proper structure\n    return {\n      originality: 5,\n      completeness: 5,\n      marketability: 5,\n      monetization: 5,\n      usefulness: 5,\n      overallScore: 5,\n      summary: \"Analysis unavailable due to API error. This repository appears to be a standard project in the \" + repo.language + \" ecosystem.\",\n      strengths: [\n        {\n          point: \"Active community engagement\",\n          reason: \"The repository shows signs of community involvement based on stars and forks\"\n        },\n        {\n          point: \"Clear documentation\",\n          reason: \"Repository includes documentation that helps users understand the project\"\n        },\n        {\n          point: \"Stable codebase\",\n          reason: \"The project appears to have a mature and stable code structure\"\n        }\n      ],\n      weaknesses: [\n        {\n          point: \"Analysis temporarily unavailable\",\n          reason: \"Full AI analysis could not be completed at this time\"\n        },\n        {\n          point: \"Unable to assess current state\",\n          reason: \"Detailed metrics cannot be evaluated without AI assistance\"\n        }\n      ],\n      recommendations: [\n        {\n          suggestion: \"Review project documentation\",\n          reason: \"Manual review can provide insights that automated analysis missed\",\n          impact: \"Better understanding of project capabilities and limitations\"\n        },\n        {\n          suggestion: \"Analyze code quality manually\",\n          reason: \"Direct code inspection can reveal architectural patterns and quality\",\n          impact: \"Identification of potential improvements and optimizations\"\n        }\n      ],\n      scoreExplanations: {\n        originality: \"Score based on standard assessment - full analysis unavailable\",\n        completeness: \"Score based on standard assessment - full analysis unavailable\",\n        marketability: \"Score based on standard assessment - full analysis unavailable\",\n        monetization: \"Score based on standard assessment - full analysis unavailable\",\n        usefulness: \"Score based on standard assessment - full analysis unavailable\"\n      }\n    };\n  }\n}\n\nexport interface SimilaritySearchParams {\n  name: string;\n  description: string;\n  language: string;\n  topics: string[];\n  functionality?: string;\n  useCase?: string;\n  technologies?: string[];\n}\n\nexport async function findSimilarRepositories(repo: RepositoryAnalysisInput): Promise<string[]> {\n  try {\n    const prompt = `Given this repository information:\nName: ${repo.name}\nDescription: ${repo.description}\nLanguage: ${repo.language}\nTopics: ${repo.topics.join(', ')}\n\nFind 3-5 similar GitHub repositories. Return only repository names in format \"owner/repo-name\", one per line.\nFocus on repositories with similar functionality, technology stack, or problem domain.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: prompt\n    });\n\n    const text = response.text || '';\n    const repos = text\n      .split('\\n')\n      .map(line => line.trim())\n      .filter(line => line.includes('/') && !line.includes(' '))\n      .slice(0, 5);\n\n    return repos;\n  } catch (error) {\n    console.error('Error finding similar repositories:', error);\n    return [];\n  }\n}\n\nexport async function findSimilarByFunctionality(params: SimilaritySearchParams): Promise<{\n  repositories: string[];\n  reasoning: string;\n  similarity_scores: { [key: string]: number };\n}> {\n  try {\n    const systemPrompt = `You are an expert at analyzing GitHub repositories and finding similar projects based on functionality, use cases, and technology stack.\n    \n    When finding similar repositories, consider:\n    1. Core functionality and problem domain\n    2. Intended use cases and target audience\n    3. Technology stack and architecture patterns\n    4. Features and capabilities\n    5. Industry or domain focus\n    \n    Return a structured analysis with repository recommendations and similarity scores.`;\n\n    const prompt = `Analyze this repository and find similar projects:\n\nRepository: ${params.name}\nDescription: ${params.description}\nPrimary Language: ${params.language}\nTopics/Tags: ${params.topics.join(', ')}\n${params.functionality ? `Core Functionality: ${params.functionality}` : ''}\n${params.useCase ? `Use Case: ${params.useCase}` : ''}\n${params.technologies ? `Technologies: ${params.technologies.join(', ')}` : ''}\n\nFind 5-8 highly similar GitHub repositories that:\n1. Solve similar problems or serve similar purposes\n2. Use comparable technology stacks\n3. Target similar use cases or audiences\n4. Have active development and community\n\nProvide similarity scores (0-100) based on:\n- Functional similarity (40% weight)\n- Technology stack match (30% weight)\n- Use case alignment (20% weight)\n- Domain/industry match (10% weight)`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            repositories: { \n              type: \"array\", \n              items: { type: \"string\" },\n              description: \"List of similar repository names in format 'owner/repo'\"\n            },\n            reasoning: { \n              type: \"string\",\n              description: \"Explanation of why these repositories are similar\"\n            },\n            similarity_scores: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  repository: { type: \"string\" },\n                  score: { type: \"number\" }\n                },\n                required: [\"repository\", \"score\"]\n              },\n              description: \"Similarity scores for each repository (0-100)\"\n            }\n          },\n          required: [\"repositories\", \"reasoning\", \"similarity_scores\"]\n        }\n      },\n      contents: prompt\n    });\n\n    const result = JSON.parse(response.text || '{}');\n    \n    // Ensure we have valid data\n    if (!result.repositories || !Array.isArray(result.repositories)) {\n      result.repositories = [];\n    }\n    \n    // Filter and validate repository names\n    result.repositories = result.repositories\n      .filter((repo: string) => repo && repo.includes('/'))\n      .slice(0, 8);\n    \n    return result;\n  } catch (error) {\n    console.error('Error finding similar repositories by functionality:', error);\n    return {\n      repositories: [],\n      reasoning: \"Unable to find similar repositories at this time.\",\n      similarity_scores: {}\n    };\n  }\n}","size_bytes":17786},"server/github.ts":{"content":"export interface GitHubRepository {\n  id: number;\n  name: string;\n  full_name: string;\n  owner: {\n    login: string;\n  };\n  description: string | null;\n  language: string | null;\n  stargazers_count: number;\n  forks_count: number;\n  watchers_count: number;\n  size: number;\n  private: boolean;\n  html_url: string;\n  clone_url: string;\n  topics: string[];\n}\n\nexport interface RepositoryLanguages {\n  [language: string]: number;\n}\n\nclass GitHubService {\n  private baseUrl = 'https://api.github.com';\n\n  async searchRepositories(\n    query: string,\n    sort: 'stars' | 'forks' | 'updated' = 'stars',\n    limit = 10\n  ): Promise<GitHubRepository[]> {\n    try {\n      const response = await fetch(\n        `${this.baseUrl}/search/repositories?q=${encodeURIComponent(query)}&sort=${sort}&per_page=${limit}`\n      );\n      \n      if (!response.ok) {\n        throw new Error(`GitHub API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      return data.items || [];\n    } catch (error) {\n      console.error('Error searching GitHub repositories:', error);\n      return [];\n    }\n  }\n\n  async getRepository(owner: string, repo: string): Promise<GitHubRepository | null> {\n    try {\n      const response = await fetch(`${this.baseUrl}/repos/${owner}/${repo}`);\n      \n      if (!response.ok) {\n        return null;\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching GitHub repository:', error);\n      return null;\n    }\n  }\n\n  async getRepositoryLanguages(owner: string, repo: string): Promise<RepositoryLanguages> {\n    try {\n      const response = await fetch(`${this.baseUrl}/repos/${owner}/${repo}/languages`);\n      \n      if (!response.ok) {\n        return {};\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching repository languages:', error);\n      return {};\n    }\n  }\n\n  async getRepositoryReadme(owner: string, repo: string): Promise<string | null> {\n    try {\n      const response = await fetch(`${this.baseUrl}/repos/${owner}/${repo}/readme`, {\n        headers: {\n          'Accept': 'application/vnd.github.v3.raw'\n        }\n      });\n      \n      if (!response.ok) {\n        return null;\n      }\n      \n      return await response.text();\n    } catch (error) {\n      console.error('Error fetching repository README:', error);\n      return null;\n    }\n  }\n\n  async getRepositoryWithDetails(owner: string, repo: string): Promise<{\n    repository: GitHubRepository;\n    languages: RepositoryLanguages;\n    readme?: string;\n  } | null> {\n    try {\n      const [repository, languages, readme] = await Promise.all([\n        this.getRepository(owner, repo),\n        this.getRepositoryLanguages(owner, repo),\n        this.getRepositoryReadme(owner, repo)\n      ]);\n\n      if (!repository) {\n        return null;\n      }\n\n      return {\n        repository,\n        languages,\n        readme: readme || undefined\n      };\n    } catch (error) {\n      console.error('Error fetching repository with details:', error);\n      return null;\n    }\n  }\n\n  parseRepositoryUrl(url: string): { owner: string; repo: string } | null {\n    // Handle both full URLs and owner/repo format\n    const patterns = [\n      /github\\.com\\/([^\\/]+)\\/([^\\/]+)/,\n      /^([^\\/]+)\\/([^\\/]+)$/\n    ];\n\n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match) {\n        return {\n          owner: match[1],\n          repo: match[2].replace(/\\.git$/, '')\n        };\n      }\n    }\n\n    return null;\n  }\n}\n\nexport const githubService = new GitHubService();","size_bytes":3606},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4220},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport express from \"express\";\nimport Stripe from \"stripe\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { githubService } from \"./github\";\nimport { analyzeRepository, findSimilarRepositories, findSimilarByFunctionality, askAI, generateAIRecommendations } from \"./gemini\";\nimport { insertRepositorySchema, insertAnalysisSchema, insertSavedRepositorySchema } from \"@shared/schema\";\nimport { stripe, createOrRetrieveStripeCustomer, createSubscription, SUBSCRIPTION_PLANS } from \"./stripe\";\n\ninterface AuthenticatedRequest extends Request {\n  user: {\n    claims: {\n      sub: string;\n      email?: string;\n      first_name?: string;\n      last_name?: string;\n      profile_image_url?: string;\n    };\n    access_token: string;\n    refresh_token?: string;\n    expires_at: number;\n  };\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // AI Assistant endpoint\n  app.post('/api/ai/ask', async (req, res) => {\n    try {\n      const { question } = req.body;\n      \n      if (!question) {\n        return res.status(400).json({ error: \"Question is required\" });\n      }\n\n      const answer = await askAI(question);\n      res.json({ answer });\n    } catch (error) {\n      console.error(\"AI Assistant error:\", error);\n      res.status(500).json({ error: \"Failed to get AI response\" });\n    }\n  });\n\n  // Analytics Dashboard endpoint\n  app.get('/api/analytics/dashboard', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const analyses = await storage.getUserAnalyses(userId);\n      \n      // Calculate statistics\n      const now = new Date();\n      const thisMonth = analyses.filter((a: any) => {\n        const date = new Date(a.createdAt);\n        return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();\n      });\n      \n      const lastMonth = analyses.filter((a: any) => {\n        const date = new Date(a.createdAt);\n        const lastMonthDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n        return date.getMonth() === lastMonthDate.getMonth() && date.getFullYear() === lastMonthDate.getFullYear();\n      });\n      \n      const avgScore = analyses.length > 0 \n        ? analyses.reduce((sum: number, a: any) => sum + ((a.originality + a.completeness + a.marketability + a.monetization + a.usefulness) / 5), 0) / analyses.length\n        : 0;\n      \n      // Language distribution\n      const languageCounts: Record<string, number> = {};\n      analyses.forEach((a: any) => {\n        if (a.primaryLanguage) {\n          languageCounts[a.primaryLanguage] = (languageCounts[a.primaryLanguage] || 0) + 1;\n        }\n      });\n      const languages = Object.entries(languageCounts).map(([name, value]) => ({ name, value }));\n      \n      // Activity data (last 30 days)\n      const activity = [];\n      for (let i = 29; i >= 0; i--) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        const dateStr = date.toISOString().split('T')[0];\n        const count = analyses.filter((a: any) => \n          new Date(a.createdAt).toISOString().split('T')[0] === dateStr\n        ).length;\n        activity.push({ date: dateStr, count });\n      }\n      \n      // Score averages\n      const scores = [\n        { name: 'Originality', score: analyses.length > 0 ? analyses.reduce((sum: number, a: any) => sum + a.originality, 0) / analyses.length : 0 },\n        { name: 'Completeness', score: analyses.length > 0 ? analyses.reduce((sum: number, a: any) => sum + a.completeness, 0) / analyses.length : 0 },\n        { name: 'Marketability', score: analyses.length > 0 ? analyses.reduce((sum: number, a: any) => sum + a.marketability, 0) / analyses.length : 0 },\n        { name: 'Monetization', score: analyses.length > 0 ? analyses.reduce((sum: number, a: any) => sum + a.monetization, 0) / analyses.length : 0 },\n        { name: 'Usefulness', score: analyses.length > 0 ? analyses.reduce((sum: number, a: any) => sum + a.usefulness, 0) / analyses.length : 0 },\n      ];\n      \n      // Monthly trends (last 6 months)\n      const trends = [];\n      for (let i = 5; i >= 0; i--) {\n        const date = new Date();\n        date.setMonth(date.getMonth() - i);\n        const monthStr = date.toLocaleDateString('en', { month: 'short' });\n        const monthAnalyses = analyses.filter((a: any) => {\n          const aDate = new Date(a.createdAt);\n          return aDate.getMonth() === date.getMonth() && aDate.getFullYear() === date.getFullYear();\n        });\n        \n        trends.push({\n          month: monthStr,\n          originality: monthAnalyses.length > 0 ? monthAnalyses.reduce((sum: number, a: any) => sum + a.originality, 0) / monthAnalyses.length : 0,\n          completeness: monthAnalyses.length > 0 ? monthAnalyses.reduce((sum: number, a: any) => sum + a.completeness, 0) / monthAnalyses.length : 0,\n          marketability: monthAnalyses.length > 0 ? monthAnalyses.reduce((sum: number, a: any) => sum + a.marketability, 0) / monthAnalyses.length : 0,\n          monetization: monthAnalyses.length > 0 ? monthAnalyses.reduce((sum: number, a: any) => sum + a.monetization, 0) / monthAnalyses.length : 0,\n          usefulness: monthAnalyses.length > 0 ? monthAnalyses.reduce((sum: number, a: any) => sum + a.usefulness, 0) / monthAnalyses.length : 0,\n        });\n      }\n      \n      // Performance insights\n      const performance = [\n        { \n          title: 'Best Performing', \n          description: 'Your highest-scoring repository', \n          value: analyses.length > 0 ? Math.max(...analyses.map((a: any) => (a.originality + a.completeness + a.marketability + a.monetization + a.usefulness) / 5)).toFixed(1) : '0',\n          unit: 'score'\n        },\n        { \n          title: 'Improvement Rate', \n          description: 'Score improvement over time', \n          value: '+15',\n          unit: '%'\n        },\n        { \n          title: 'Analysis Frequency', \n          description: 'Average analyses per week', \n          value: (analyses.length / 4).toFixed(0),\n          unit: 'repos'\n        }\n      ];\n      \n      res.json({\n        stats: {\n          totalAnalyses: analyses.length,\n          thisMonth: thisMonth.length,\n          growth: lastMonth.length > 0 ? Math.round(((thisMonth.length - lastMonth.length) / lastMonth.length) * 100) : 0,\n          avgScore,\n          topLanguage: languages.length > 0 ? languages.sort((a, b) => b.value - a.value)[0].name : 'N/A',\n          activeProjects: new Set(analyses.map((a: any) => a.repositoryId)).size\n        },\n        activity,\n        languages,\n        scores,\n        trends,\n        performance,\n        recentAnalyses: analyses.slice(0, 10).map((a: any) => ({\n          id: a.id,\n          name: a.repositoryName,\n          owner: a.repositoryOwner,\n          language: a.primaryLanguage || 'Unknown',\n          score: (a.originality + a.completeness + a.marketability + a.monetization + a.usefulness) / 5,\n          date: a.createdAt\n        }))\n      });\n    } catch (error) {\n      console.error(\"Analytics error:\", error);\n      res.status(500).json({ error: \"Failed to fetch analytics data\" });\n    }\n  });\n\n  // Stripe subscription endpoint\n  app.post('/api/create-subscription', isAuthenticated, async (req: any, res) => {\n    try {\n      const { plan } = req.body;\n      const userId = req.user.claims.sub;\n      const userEmail = req.user.claims.email;\n\n      if (!plan || !SUBSCRIPTION_PLANS[plan as keyof typeof SUBSCRIPTION_PLANS]) {\n        return res.status(400).json({ error: \"Invalid subscription plan\" });\n      }\n\n      if (!userEmail) {\n        return res.status(400).json({ error: \"User email is required\" });\n      }\n\n      // Get or create Stripe customer\n      const customer = await createOrRetrieveStripeCustomer(userEmail, userId);\n      \n      // Update user with customer ID\n      await storage.updateUserStripeCustomerId(userId, customer.id);\n\n      // Create subscription\n      const subscription = await createSubscription(customer.id, plan);\n\n      // Update user with subscription info\n      await storage.updateUserSubscription(userId, {\n        stripeSubscriptionId: subscription.id,\n        subscriptionTier: plan,\n        subscriptionStatus: subscription.status,\n        subscriptionEndDate: (subscription as any).current_period_end ? new Date((subscription as any).current_period_end * 1000) : null,\n      });\n\n      // Return client secret for payment\n      const invoice = subscription.latest_invoice as any;\n      const paymentIntent = invoice?.payment_intent as any;\n\n      res.json({\n        subscriptionId: subscription.id,\n        clientSecret: paymentIntent?.client_secret,\n      });\n    } catch (error) {\n      console.error(\"Error creating subscription:\", error);\n      res.status(500).json({ error: \"Failed to create subscription\" });\n    }\n  });\n\n  // Stripe webhook endpoint\n  app.post('/api/stripe/webhook', express.raw({ type: 'application/json' }), async (req, res) => {\n    const sig = req.headers['stripe-signature'];\n    let event: Stripe.Event;\n\n    try {\n      // Note: In production, you should set STRIPE_WEBHOOK_SECRET\n      event = stripe.webhooks.constructEvent(req.body, sig!, process.env.STRIPE_WEBHOOK_SECRET || '');\n    } catch (err: any) {\n      console.error('Webhook signature verification failed:', err.message);\n      return res.status(400).send(`Webhook Error: ${err.message}`);\n    }\n\n    // Handle the event\n    switch (event.type) {\n      case 'customer.subscription.updated':\n      case 'customer.subscription.deleted':\n        const subscription = event.data.object as Stripe.Subscription;\n        const customerId = subscription.customer as string;\n        \n        try {\n          // Find user by Stripe customer ID\n          const user = await storage.getUserByStripeCustomerId(customerId);\n          if (user) {\n            await storage.updateUserSubscription(user.id, {\n              subscriptionStatus: subscription.status,\n              subscriptionEndDate: (subscription as any).current_period_end ? new Date((subscription as any).current_period_end * 1000) : null,\n            });\n          }\n        } catch (error) {\n          console.error('Error updating subscription status:', error);\n        }\n        break;\n\n      case 'invoice.payment_succeeded':\n        const invoice = event.data.object as Stripe.Invoice;\n        console.log('Payment succeeded for invoice:', invoice.id);\n        break;\n\n      case 'invoice.payment_failed':\n        const failedInvoice = event.data.object as Stripe.Invoice;\n        console.log('Payment failed for invoice:', failedInvoice.id);\n        break;\n\n      default:\n        console.log(`Unhandled event type ${event.type}`);\n    }\n\n    res.json({ received: true });\n  });\n\n  // Repository search and analysis\n  app.get('/api/repositories/search', async (req, res) => {\n    try {\n      const { q: query, limit = 10 } = req.query;\n      \n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ message: \"Query parameter 'q' is required\" });\n      }\n\n      // First try to search in our database\n      const localResults = await storage.searchRepositories(query, Number(limit));\n      \n      // If we have enough local results, return them\n      if (localResults.length >= Number(limit)) {\n        return res.json(localResults);\n      }\n\n      // Otherwise, search GitHub\n      const githubResults = await githubService.searchRepositories(query, 'stars', Number(limit));\n      \n      // Store new repositories in our database\n      const repositories = [];\n      for (const ghRepo of githubResults) {\n        try {\n          const languages = await githubService.getRepositoryLanguages(ghRepo.owner.login, ghRepo.name);\n          \n          const repoData = {\n            id: ghRepo.id.toString(),\n            name: ghRepo.name,\n            fullName: ghRepo.full_name,\n            owner: ghRepo.owner.login,\n            description: ghRepo.description,\n            language: ghRepo.language,\n            stars: ghRepo.stargazers_count,\n            forks: ghRepo.forks_count,\n            watchers: ghRepo.watchers_count,\n            size: ghRepo.size,\n            isPrivate: ghRepo.private,\n            htmlUrl: ghRepo.html_url,\n            cloneUrl: ghRepo.clone_url,\n            languages,\n            topics: ghRepo.topics || [],\n          };\n          \n          const repository = await storage.upsertRepository(repoData);\n          repositories.push(repository);\n        } catch (error) {\n          console.error(`Error storing repository ${ghRepo.full_name}:`, error);\n        }\n      }\n\n      res.json(repositories);\n    } catch (error) {\n      console.error(\"Error searching repositories:\", error);\n      res.status(500).json({ message: \"Failed to search repositories\" });\n    }\n  });\n\n  app.post('/api/repositories/analyze', async (req, res) => {\n    try {\n      const { url } = req.body;\n      \n      if (!url) {\n        return res.status(400).json({ message: \"Repository URL is required\" });\n      }\n\n      const parsed = githubService.parseRepositoryUrl(url);\n      if (!parsed) {\n        return res.status(400).json({ message: \"Invalid GitHub repository URL\" });\n      }\n\n      const { owner, repo } = parsed;\n      \n      // Get repository details from GitHub\n      const repoDetails = await githubService.getRepositoryWithDetails(owner, repo);\n      if (!repoDetails) {\n        return res.status(404).json({ message: \"Repository not found\" });\n      }\n      const { repository: ghRepo, languages, readme } = repoDetails;\n      \n      // Store repository in database\n      const repoData = {\n        id: ghRepo.id.toString(),\n        name: ghRepo.name,\n        fullName: ghRepo.full_name,\n        owner: ghRepo.owner.login,\n        description: ghRepo.description,\n        language: ghRepo.language,\n        stars: ghRepo.stargazers_count,\n        forks: ghRepo.forks_count,\n        watchers: ghRepo.watchers_count,\n        size: ghRepo.size,\n        isPrivate: ghRepo.private,\n        htmlUrl: ghRepo.html_url,\n        cloneUrl: ghRepo.clone_url,\n        languages,\n        topics: ghRepo.topics || [],\n        lastAnalyzed: new Date(),\n      };\n      \n      const repository = await storage.upsertRepository(repoData);\n\n      // Check if analysis already exists\n      const existingAnalysis = await storage.getAnalysis(repository.id);\n      if (existingAnalysis) {\n        return res.json({\n          repository,\n          analysis: existingAnalysis,\n          similar: await storage.getSimilarRepositories(repository.id)\n        });\n      }\n\n      // Analyze with Gemini\n      const analysisResult = await analyzeRepository({\n        name: ghRepo.name,\n        description: ghRepo.description || '',\n        language: ghRepo.language || 'Unknown',\n        stars: ghRepo.stargazers_count,\n        forks: ghRepo.forks_count,\n        size: ghRepo.size,\n        languages,\n        topics: ghRepo.topics || [],\n        readme: readme || undefined,\n      });\n\n      // Store analysis\n      const analysisData = {\n        repositoryId: repository.id,\n        userId: (req as any).user?.claims?.sub,\n        ...analysisResult,\n      };\n      \n      const validatedAnalysisData = insertAnalysisSchema.parse(analysisData);\n      const analysis = await storage.createAnalysis(validatedAnalysisData);\n\n      // Find and store similar repositories\n      try {\n        const similarRepoNames = await findSimilarRepositories({\n          name: ghRepo.name,\n          description: ghRepo.description || '',\n          language: ghRepo.language || 'Unknown',\n          stars: ghRepo.stargazers_count,\n          forks: ghRepo.forks_count,\n          size: ghRepo.size,\n          languages,\n          topics: ghRepo.topics || [],\n        });\n\n        const similarRepos = [];\n        for (const repoName of similarRepoNames) {\n          try {\n            const parsed = githubService.parseRepositoryUrl(repoName);\n            if (parsed) {\n              const similarRepoDetails = await githubService.getRepositoryWithDetails(parsed.owner, parsed.repo);\n              if (!similarRepoDetails) continue;\n              const { repository: similarGhRepo, languages: similarLanguages } = similarRepoDetails;\n              \n              const similarRepoData = {\n                id: similarGhRepo.id.toString(),\n                name: similarGhRepo.name,\n                fullName: similarGhRepo.full_name,\n                owner: similarGhRepo.owner.login,\n                description: similarGhRepo.description,\n                language: similarGhRepo.language,\n                stars: similarGhRepo.stargazers_count,\n                forks: similarGhRepo.forks_count,\n                watchers: similarGhRepo.watchers_count,\n                size: similarGhRepo.size,\n                isPrivate: similarGhRepo.private,\n                htmlUrl: similarGhRepo.html_url,\n                cloneUrl: similarGhRepo.clone_url,\n                languages: similarLanguages,\n                topics: similarGhRepo.topics || [],\n              };\n              \n              const similarRepo = await storage.upsertRepository(similarRepoData);\n              similarRepos.push({\n                repositoryId: similarRepo.id,\n                similarity: 0.8 // Default similarity score\n              });\n            }\n          } catch (error) {\n            console.error(`Error fetching similar repo ${repoName}:`, error);\n          }\n        }\n\n        if (similarRepos.length > 0) {\n          await storage.createSimilarRepositories(repository.id, similarRepos);\n        }\n      } catch (error) {\n        console.error(\"Error finding similar repositories:\", error);\n      }\n\n      const similar = await storage.getSimilarRepositories(repository.id);\n\n      res.json({\n        repository,\n        analysis,\n        similar\n      });\n    } catch (error) {\n      console.error(\"Error analyzing repository:\", error);\n      res.status(500).json({ message: \"Failed to analyze repository\" });\n    }\n  });\n\n  // Recent repositories (must be before :id route)\n  app.get('/api/repositories/recent', async (req, res) => {\n    try {\n      const { limit = 10 } = req.query;\n      const recent = await storage.getRecentRepositories(Number(limit));\n      res.json(recent);\n    } catch (error) {\n      console.error(\"Error fetching recent repositories:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent repositories\" });\n    }\n  });\n\n  // Trending repositories\n  app.get('/api/repositories/trending', async (req, res) => {\n    try {\n      // Get repositories analyzed in the last 24 hours with high scores\n      const trending = await storage.getTrendingRepositories();\n      res.json(trending);\n    } catch (error) {\n      console.error(\"Error fetching trending repositories:\", error);\n      res.status(500).json({ message: \"Failed to fetch trending repositories\" });\n    }\n  });\n\n  // Find similar repositories by functionality\n  app.post('/api/repositories/find-similar', async (req, res) => {\n    try {\n      const { \n        repositoryId, \n        functionality, \n        useCase, \n        technologies,\n        minStars,\n        maxAge,\n        maxResults = 20\n      } = req.body;\n\n      let repository;\n      let searchParams;\n\n      if (repositoryId) {\n        // Find similar to existing repository\n        repository = await storage.getRepository(repositoryId);\n        if (!repository) {\n          return res.status(404).json({ message: \"Repository not found\" });\n        }\n        \n        searchParams = {\n          name: repository.name,\n          description: repository.description || '',\n          language: repository.language || 'Unknown',\n          topics: repository.topics || [],\n          functionality: functionality || repository.description,\n          useCase,\n          technologies: technologies || (repository.languages ? Object.keys(repository.languages) : [])\n        };\n      } else if (functionality || useCase || (technologies && technologies.length > 0)) {\n        // Search based on provided criteria (at least one field is required)\n        searchParams = {\n          name: 'Custom Search',\n          description: functionality || useCase || (technologies && technologies.length > 0 ? `Projects using ${technologies.join(', ')}` : ''),\n          language: 'Any',\n          topics: [],\n          functionality: functionality || undefined,\n          useCase: useCase || undefined,\n          technologies: technologies || []\n        };\n      } else {\n        return res.status(400).json({ message: \"Please provide at least one search criteria (functionality, use case, or technologies)\" });\n      }\n\n      // Add filters to search params\n      if (minStars !== undefined) {\n        (searchParams as any).minStars = minStars;\n      }\n      if (maxAge && maxAge !== 'any') {\n        (searchParams as any).maxAge = maxAge;\n      }\n      \n      // Use enhanced AI search\n      const { repositories: similarRepoNames, reasoning, similarity_scores } = \n        await findSimilarByFunctionality(searchParams);\n\n      // Fetch details for each similar repository\n      const similarRepos = [];\n      for (const repoName of similarRepoNames) {\n        try {\n          const parsed = githubService.parseRepositoryUrl(repoName);\n          if (!parsed) continue;\n          \n          const repoDetails = await githubService.getRepositoryWithDetails(parsed.owner, parsed.repo);\n          if (!repoDetails) continue;\n          \n          const { repository: ghRepo, languages } = repoDetails;\n          \n          // Apply filters\n          if (minStars && ghRepo.stargazers_count < minStars) {\n            continue;\n          }\n          \n          if (maxAge && maxAge !== 'any') {\n            const createdDate = new Date((ghRepo as any).created_at);\n            const now = new Date();\n            const ageMap: { [key: string]: number } = {\n              '1month': 30,\n              '3months': 90,\n              '6months': 180,\n              '1year': 365,\n              '2years': 730\n            };\n            const maxDays = ageMap[maxAge];\n            if (maxDays) {\n              const daysSinceCreated = Math.floor((now.getTime() - createdDate.getTime()) / (1000 * 60 * 60 * 24));\n              if (daysSinceCreated > maxDays) {\n                continue;\n              }\n            }\n          }\n          \n          const repoData = {\n            id: ghRepo.id.toString(),\n            name: ghRepo.name,\n            fullName: ghRepo.full_name,\n            owner: ghRepo.owner.login,\n            description: ghRepo.description,\n            language: ghRepo.language,\n            stars: ghRepo.stargazers_count,\n            forks: ghRepo.forks_count,\n            watchers: ghRepo.watchers_count,\n            size: ghRepo.size,\n            isPrivate: ghRepo.private,\n            htmlUrl: ghRepo.html_url,\n            cloneUrl: ghRepo.clone_url,\n            languages,\n            topics: ghRepo.topics || [],\n            createdAt: (ghRepo as any).created_at,\n            updatedAt: (ghRepo as any).updated_at\n          };\n          \n          const savedRepo = await storage.upsertRepository(repoData);\n          \n          similarRepos.push({\n            repository: savedRepo,\n            similarity: similarity_scores[repoName] || 50,\n            name: repoName\n          });\n          \n          // Cap results at specified maximum\n          if (similarRepos.length >= maxResults) {\n            break;\n          }\n        } catch (error) {\n          console.error(`Error fetching similar repo ${repoName}:`, error);\n        }\n      }\n\n      res.json({\n        similar: similarRepos,\n        reasoning,\n        searchParams\n      });\n    } catch (error) {\n      console.error(\"Error finding similar repositories:\", error);\n      res.status(500).json({ message: \"Failed to find similar repositories\" });\n    }\n  });\n\n  app.get('/api/repositories/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const repository = await storage.getRepository(id);\n      \n      if (!repository) {\n        return res.status(404).json({ message: \"Repository not found\" });\n      }\n\n      const analysis = await storage.getAnalysis(id);\n      const similar = await storage.getSimilarRepositories(id);\n      \n      let isSaved = false;\n      if ((req as any).user?.claims?.sub) {\n        isSaved = await storage.isRepositorySaved((req as any).user.claims.sub, id);\n      }\n\n      res.json({\n        repository,\n        analysis,\n        similar,\n        isSaved\n      });\n    } catch (error) {\n      console.error(\"Error fetching repository:\", error);\n      res.status(500).json({ message: \"Failed to fetch repository\" });\n    }\n  });\n\n  // Recent analyses\n  app.get('/api/analyses/recent', async (req, res) => {\n    try {\n      const { limit = 10 } = req.query;\n      const analyses = await storage.getRecentAnalyses(undefined, Number(limit));\n      res.json(analyses);\n    } catch (error) {\n      console.error(\"Error fetching recent analyses:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent analyses\" });\n    }\n  });\n\n  // Saved repositories (protected routes)\n  app.post('/api/saved-repositories', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { repositoryId } = req.body;\n      \n      if (!repositoryId) {\n        return res.status(400).json({ message: \"Repository ID is required\" });\n      }\n\n      const data = { userId, repositoryId };\n      const validatedData = insertSavedRepositorySchema.parse(data);\n      \n      const savedRepo = await storage.saveRepository(validatedData.userId, validatedData.repositoryId);\n      res.json(savedRepo);\n    } catch (error) {\n      console.error(\"Error saving repository:\", error);\n      res.status(500).json({ message: \"Failed to save repository\" });\n    }\n  });\n\n  app.delete('/api/saved-repositories/:repositoryId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { repositoryId } = req.params;\n      \n      await storage.unsaveRepository(userId, repositoryId);\n      res.json({ message: \"Repository unsaved successfully\" });\n    } catch (error) {\n      console.error(\"Error unsaving repository:\", error);\n      res.status(500).json({ message: \"Failed to unsave repository\" });\n    }\n  });\n\n  app.get('/api/saved-repositories', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const savedRepos = await storage.getSavedRepositories(userId);\n      res.json(savedRepos);\n    } catch (error) {\n      console.error(\"Error fetching saved repositories:\", error);\n      res.status(500).json({ message: \"Failed to fetch saved repositories\" });\n    }\n  });\n\n  // User Profile & Preferences Routes (Protected - Pro/Enterprise only)\n  app.get('/api/user/preferences', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.subscriptionTier !== 'pro' && user.subscriptionTier !== 'enterprise')) {\n        return res.status(403).json({ message: \"This feature is available for Pro and Enterprise users only\" });\n      }\n\n      const preferences = await storage.getUserPreferences(userId);\n      res.json(preferences);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/user/preferences', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.subscriptionTier !== 'pro' && user.subscriptionTier !== 'enterprise')) {\n        return res.status(403).json({ message: \"This feature is available for Pro and Enterprise users only\" });\n      }\n\n      const preferences = await storage.updateUserPreferences(userId, req.body);\n      res.json(preferences);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Bookmarks Routes\n  app.get('/api/user/bookmarks', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.subscriptionTier !== 'pro' && user.subscriptionTier !== 'enterprise')) {\n        return res.status(403).json({ message: \"This feature is available for Pro and Enterprise users only\" });\n      }\n\n      const bookmarks = await storage.getUserBookmarks(userId);\n      res.json(bookmarks);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/user/bookmarks', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.subscriptionTier !== 'pro' && user.subscriptionTier !== 'enterprise')) {\n        return res.status(403).json({ message: \"This feature is available for Pro and Enterprise users only\" });\n      }\n\n      const { repositoryId, notes } = req.body;\n      const bookmark = await storage.addBookmark(userId, repositoryId, notes);\n      \n      // Track activity\n      await storage.trackActivity(userId, 'bookmarked', repositoryId);\n      \n      res.json(bookmark);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/user/bookmarks/:repositoryId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.subscriptionTier !== 'pro' && user.subscriptionTier !== 'enterprise')) {\n        return res.status(403).json({ message: \"This feature is available for Pro and Enterprise users only\" });\n      }\n\n      await storage.removeBookmark(userId, req.params.repositoryId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Tags Routes\n  app.get('/api/user/tags', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.subscriptionTier !== 'pro' && user.subscriptionTier !== 'enterprise')) {\n        return res.status(403).json({ message: \"This feature is available for Pro and Enterprise users only\" });\n      }\n\n      const tags = await storage.getUserTags(userId);\n      res.json(tags);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/user/tags', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.subscriptionTier !== 'pro' && user.subscriptionTier !== 'enterprise')) {\n        return res.status(403).json({ message: \"This feature is available for Pro and Enterprise users only\" });\n      }\n\n      const { name, color } = req.body;\n      const tag = await storage.createTag(userId, name, color);\n      res.json(tag);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/repositories/:repositoryId/tags', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.subscriptionTier !== 'pro' && user.subscriptionTier !== 'enterprise')) {\n        return res.status(403).json({ message: \"This feature is available for Pro and Enterprise users only\" });\n      }\n\n      const { tagId } = req.body;\n      await storage.tagRepository(req.params.repositoryId, tagId, userId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Collections Routes  \n  app.get('/api/user/collections', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.subscriptionTier !== 'pro' && user.subscriptionTier !== 'enterprise')) {\n        return res.status(403).json({ message: \"This feature is available for Pro and Enterprise users only\" });\n      }\n\n      const collections = await storage.getUserCollections(userId);\n      res.json(collections);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/user/collections', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.subscriptionTier !== 'pro' && user.subscriptionTier !== 'enterprise')) {\n        return res.status(403).json({ message: \"This feature is available for Pro and Enterprise users only\" });\n      }\n\n      const collection = await storage.createCollection(userId, req.body);\n      res.json(collection);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/collections/:collectionId/items', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.subscriptionTier !== 'pro' && user.subscriptionTier !== 'enterprise')) {\n        return res.status(403).json({ message: \"This feature is available for Pro and Enterprise users only\" });\n      }\n\n      const { repositoryId, notes } = req.body;\n      const item = await storage.addToCollection(\n        parseInt(req.params.collectionId),\n        repositoryId,\n        notes\n      );\n      res.json(item);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // AI Recommendations Route\n  app.get('/api/user/recommendations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.subscriptionTier !== 'pro' && user.subscriptionTier !== 'enterprise')) {\n        return res.status(403).json({ message: \"This feature is available for Pro and Enterprise users only\" });\n      }\n\n      // Get user preferences and recent activity\n      const preferences = await storage.getUserPreferences(userId);\n      const recentActivity = await storage.getUserRecentActivity(userId);\n      \n      // Generate AI recommendations based on user profile\n      const recommendations = await generateAIRecommendations(userId, preferences, recentActivity);\n      \n      res.json(recommendations);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Repository Tracking Endpoints\n  app.post('/api/repositories/:repositoryId/track', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { repositoryId } = req.params;\n      const { trackingType = 'all' } = req.body;\n      \n      // Check if repository exists\n      const repository = await storage.getRepository(repositoryId);\n      if (!repository) {\n        return res.status(404).json({ message: \"Repository not found\" });\n      }\n      \n      // Add tracking\n      const tracked = await storage.trackRepository(userId, repositoryId, trackingType);\n      \n      // Send initial notification\n      await storage.createNotification({\n        userId,\n        type: 'repo_update',\n        title: 'Repository Tracking Started',\n        message: `You are now tracking ${repository.fullName}`,\n        repositoryId,\n        metadata: { trackingType }\n      });\n      \n      res.json(tracked);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/repositories/:repositoryId/track', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { repositoryId } = req.params;\n      \n      await storage.untrackRepository(userId, repositoryId);\n      res.json({ message: \"Repository untracked successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/user/tracked-repositories', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const tracked = await storage.getTrackedRepositories(userId);\n      res.json(tracked);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Notifications Endpoints\n  app.get('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { unreadOnly = false } = req.query;\n      \n      const notifications = await storage.getUserNotifications(\n        userId, \n        unreadOnly === 'true'\n      );\n      res.json(notifications);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/notifications/:notificationId/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { notificationId } = req.params;\n      \n      await storage.markNotificationAsRead(parseInt(notificationId), userId);\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/notifications/:notificationId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { notificationId } = req.params;\n      \n      await storage.deleteNotification(parseInt(notificationId), userId);\n      res.json({ message: \"Notification deleted\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/notifications/mark-all-read', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.markAllNotificationsAsRead(userId);\n      res.json({ message: \"All notifications marked as read\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Comments Endpoints\n  app.get('/api/repositories/:repositoryId/comments', async (req, res) => {\n    try {\n      const { repositoryId } = req.params;\n      const comments = await storage.getRepositoryComments(repositoryId);\n      res.json(comments);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/repositories/:repositoryId/comments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { repositoryId } = req.params;\n      const { content, parentId } = req.body;\n      \n      const comment = await storage.createComment({\n        userId,\n        repositoryId,\n        content,\n        parentId,\n      });\n      \n      res.json(comment);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/comments/:commentId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { commentId } = req.params;\n      const { content } = req.body;\n      \n      const updated = await storage.updateComment(parseInt(commentId), userId, content);\n      res.json(updated);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/comments/:commentId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { commentId } = req.params;\n      \n      await storage.deleteComment(parseInt(commentId), userId);\n      res.json({ message: \"Comment deleted\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/comments/:commentId/like', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { commentId } = req.params;\n      \n      await storage.likeComment(parseInt(commentId), userId);\n      res.json({ message: \"Comment liked\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/comments/:commentId/like', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { commentId } = req.params;\n      \n      await storage.unlikeComment(parseInt(commentId), userId);\n      res.json({ message: \"Like removed\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Collections Endpoints\n  app.get('/api/collections/:userId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const requestingUserId = req.user.claims.sub;\n      \n      // Only allow users to view their own collections for now\n      if (userId !== requestingUserId) {\n        return res.status(403).json({ message: \"Cannot view other users' collections\" });\n      }\n      \n      const collections = await storage.getUserCollections(userId);\n      res.json(collections);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/collections', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { name, description, color } = req.body;\n      \n      if (!name || !name.trim()) {\n        return res.status(400).json({ message: \"Collection name is required\" });\n      }\n      \n      const collection = await storage.createCollection({\n        userId,\n        name: name.trim(),\n        description: description || null,\n        color: color || '#FF6B35',\n      });\n      \n      res.json(collection);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/collections/:collectionId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { collectionId } = req.params;\n      \n      await storage.deleteCollection(parseInt(collectionId), userId);\n      res.json({ message: \"Collection deleted\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/collections/:collectionId/repositories', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { collectionId } = req.params;\n      const { repositoryId } = req.body;\n      \n      if (!repositoryId) {\n        return res.status(400).json({ message: \"Repository ID is required\" });\n      }\n      \n      const item = await storage.addRepositoryToCollection(\n        parseInt(collectionId),\n        repositoryId,\n        userId\n      );\n      \n      res.json(item);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/collections/:collectionId/repositories/:repositoryId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { collectionId, repositoryId } = req.params;\n      \n      await storage.removeRepositoryFromCollection(\n        parseInt(collectionId),\n        repositoryId,\n        userId\n      );\n      \n      res.json({ message: \"Repository removed from collection\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Ratings Endpoints\n  app.get('/api/repositories/:repositoryId/ratings', async (req, res) => {\n    try {\n      const { repositoryId } = req.params;\n      const ratings = await storage.getRepositoryRatings(repositoryId);\n      const { average, count } = await storage.getRepositoryAverageRating(repositoryId);\n      \n      res.json({\n        ratings,\n        average,\n        count,\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/repositories/:repositoryId/ratings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { repositoryId } = req.params;\n      const { rating, review } = req.body;\n      \n      if (rating < 1 || rating > 5) {\n        return res.status(400).json({ message: \"Rating must be between 1 and 5\" });\n      }\n      \n      const newRating = await storage.createOrUpdateRating({\n        userId,\n        repositoryId,\n        rating,\n        review,\n      });\n      \n      res.json(newRating);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/ratings/:ratingId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { ratingId } = req.params;\n      \n      await storage.deleteRating(parseInt(ratingId), userId);\n      res.json({ message: \"Rating deleted\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/ratings/:ratingId/helpful', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { ratingId } = req.params;\n      \n      await storage.markRatingHelpful(parseInt(ratingId), userId);\n      res.json({ message: \"Marked as helpful\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/ratings/:ratingId/helpful', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { ratingId } = req.params;\n      \n      await storage.unmarkRatingHelpful(parseInt(ratingId), userId);\n      res.json({ message: \"Removed helpful mark\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // API Key Management\n  app.get('/api/developer/keys', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const keys = await storage.getUserApiKeys(userId);\n      res.json(keys);\n    } catch (error) {\n      console.error('Error fetching API keys:', error);\n      res.status(500).json({ message: 'Failed to fetch API keys' });\n    }\n  });\n\n  app.post('/api/developer/keys', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { name, description, permissions, expiresAt } = req.body;\n      \n      // Generate a secure API key\n      const key = 'rk_' + Array.from({ length: 32 }, () => \n        Math.random().toString(36)[2] || '0'\n      ).join('');\n      \n      const apiKey = await storage.createApiKey({\n        userId,\n        key,\n        name,\n        description,\n        permissions: permissions || ['read'],\n        expiresAt: expiresAt ? new Date(expiresAt) : null,\n      });\n      \n      res.json(apiKey);\n    } catch (error) {\n      console.error('Error creating API key:', error);\n      res.status(500).json({ message: 'Failed to create API key' });\n    }\n  });\n\n  app.delete('/api/developer/keys/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const keyId = parseInt(req.params.id);\n      \n      await storage.deleteApiKey(keyId, userId);\n      res.json({ message: 'API key deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting API key:', error);\n      res.status(500).json({ message: 'Failed to delete API key' });\n    }\n  });\n\n  app.get('/api/developer/keys/:id/usage', isAuthenticated, async (req: any, res) => {\n    try {\n      const keyId = parseInt(req.params.id);\n      const usage = await storage.getApiUsageStats(keyId);\n      res.json(usage);\n    } catch (error) {\n      console.error('Error fetching API usage:', error);\n      res.status(500).json({ message: 'Failed to fetch API usage' });\n    }\n  });\n\n  // Webhook Management\n  app.get('/api/developer/webhooks', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const webhooks = await storage.getUserWebhooks(userId);\n      res.json(webhooks);\n    } catch (error) {\n      console.error('Error fetching webhooks:', error);\n      res.status(500).json({ message: 'Failed to fetch webhooks' });\n    }\n  });\n\n  app.post('/api/developer/webhooks', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { url, events } = req.body;\n      \n      // Generate webhook secret\n      const secret = Array.from({ length: 32 }, () => \n        Math.random().toString(36)[2] || '0'\n      ).join('');\n      \n      const webhook = await storage.createWebhook({\n        userId,\n        url,\n        events: events || ['repository.analyzed'],\n        secret,\n      });\n      \n      res.json(webhook);\n    } catch (error) {\n      console.error('Error creating webhook:', error);\n      res.status(500).json({ message: 'Failed to create webhook' });\n    }\n  });\n\n  app.delete('/api/developer/webhooks/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const webhookId = parseInt(req.params.id);\n      \n      await storage.deleteWebhook(webhookId, userId);\n      res.json({ message: 'Webhook deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting webhook:', error);\n      res.status(500).json({ message: 'Failed to delete webhook' });\n    }\n  });\n\n  // Public API endpoints with API key authentication\n  const authenticateApiKey = async (req: any, res: any, next: any) => {\n    const apiKey = req.headers['x-api-key'] as string;\n    \n    if (!apiKey) {\n      return res.status(401).json({ error: 'API key required' });\n    }\n    \n    const key = await storage.getApiKeyByKey(apiKey);\n    \n    if (!key) {\n      return res.status(401).json({ error: 'Invalid API key' });\n    }\n    \n    if (key.expiresAt && new Date(key.expiresAt) < new Date()) {\n      return res.status(401).json({ error: 'API key expired' });\n    }\n    \n    // Check rate limit\n    const usage = await storage.getApiUsageStats(key.id, 1);\n    const totalRequests = usage.reduce((sum: number, u: any) => sum + u.count, 0);\n    \n    if (totalRequests >= (key.rateLimit || 1000)) {\n      return res.status(429).json({ error: 'Rate limit exceeded' });\n    }\n    \n    // Log usage\n    const startTime = Date.now();\n    res.on('finish', async () => {\n      await storage.logApiUsage({\n        apiKeyId: key.id,\n        endpoint: req.path,\n        method: req.method,\n        statusCode: res.statusCode,\n        responseTime: Date.now() - startTime,\n      });\n      await storage.updateApiKeyLastUsed(key.id);\n    });\n    \n    req.apiKey = key;\n    next();\n  };\n\n  // Public API v1 endpoints\n  app.get('/api/v1/repositories/search', authenticateApiKey, async (req: any, res) => {\n    try {\n      const { q, limit = 10 } = req.query;\n      \n      if (!req.apiKey.permissions?.includes('read')) {\n        return res.status(403).json({ error: 'Insufficient permissions' });\n      }\n      \n      const repositories = await storage.searchRepositories(q as string, parseInt(limit as string));\n      res.json({ data: repositories });\n    } catch (error) {\n      console.error('API error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/v1/repositories/:id', authenticateApiKey, async (req: any, res) => {\n    try {\n      if (!req.apiKey.permissions?.includes('read')) {\n        return res.status(403).json({ error: 'Insufficient permissions' });\n      }\n      \n      const repository = await storage.getRepository(req.params.id);\n      \n      if (!repository) {\n        return res.status(404).json({ error: 'Repository not found' });\n      }\n      \n      res.json({ data: repository });\n    } catch (error) {\n      console.error('API error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/v1/repositories/:id/analysis', authenticateApiKey, async (req: any, res) => {\n    try {\n      if (!req.apiKey.permissions?.includes('read')) {\n        return res.status(403).json({ error: 'Insufficient permissions' });\n      }\n      \n      const analysis = await storage.getAnalysis(req.params.id);\n      \n      if (!analysis) {\n        return res.status(404).json({ error: 'Analysis not found' });\n      }\n      \n      res.json({ data: analysis });\n    } catch (error) {\n      console.error('API error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/v1/repositories/analyze', authenticateApiKey, async (req: any, res) => {\n    try {\n      if (!req.apiKey.permissions?.includes('write')) {\n        return res.status(403).json({ error: 'Insufficient permissions' });\n      }\n      \n      const { repositoryUrl } = req.body;\n      \n      if (!repositoryUrl) {\n        return res.status(400).json({ error: 'Repository URL required' });\n      }\n      \n      // Parse repository information\n      const match = repositoryUrl.match(/github\\.com\\/([^\\/]+)\\/([^\\/]+)/);\n      if (!match) {\n        return res.status(400).json({ error: 'Invalid GitHub repository URL' });\n      }\n      \n      const [, owner, name] = match;\n      const fullName = `${owner}/${name}`;\n      \n      // Fetch repository data from GitHub\n      const response = await fetch(`https://api.github.com/repos/${fullName}`);\n      \n      if (!response.ok) {\n        return res.status(404).json({ error: 'Repository not found' });\n      }\n      \n      const repoData = await response.json();\n      \n      // Store repository\n      const repository = await storage.upsertRepository({\n        id: repoData.id.toString(),\n        name: repoData.name,\n        fullName: repoData.full_name,\n        description: repoData.description,\n        htmlUrl: repoData.html_url,\n        cloneUrl: repoData.clone_url,\n        stars: repoData.stargazers_count,\n        forks: repoData.forks_count,\n        language: repoData.language,\n        topics: repoData.topics || [],\n        owner: repoData.owner.login,\n        createdAt: new Date(repoData.created_at),\n        updatedAt: new Date(repoData.updated_at),\n        homepage: repoData.homepage,\n        defaultBranch: repoData.default_branch,\n        openIssues: repoData.open_issues_count,\n        license: repoData.license?.name,\n      });\n      \n      // Prepare repository data for analysis\n      const repoForAnalysis = {\n        ...repository,\n        description: repository.description || 'No description provided',\n      };\n      \n      // Perform analysis using existing gemini service\n      const geminiAnalysis = await analyzeRepository(repoForAnalysis);\n      \n      // Extract string arrays from enhanced format\n      const strengths = Array.isArray(geminiAnalysis.strengths) && typeof geminiAnalysis.strengths[0] === 'object' \n        ? geminiAnalysis.strengths.map((s: any) => s.point || s) \n        : geminiAnalysis.strengths;\n      \n      const weaknesses = Array.isArray(geminiAnalysis.weaknesses) && typeof geminiAnalysis.weaknesses[0] === 'object'\n        ? geminiAnalysis.weaknesses.map((w: any) => w.point || w)\n        : geminiAnalysis.weaknesses;\n      \n      const recommendations = Array.isArray(geminiAnalysis.recommendations) && typeof geminiAnalysis.recommendations[0] === 'object'\n        ? geminiAnalysis.recommendations.map((r: any) => r.suggestion || r)\n        : geminiAnalysis.recommendations;\n      \n      const analysis = await storage.createAnalysis({\n        repositoryId: repository.id,\n        userId: req.apiKey.userId,\n        originality: geminiAnalysis.originality,\n        completeness: geminiAnalysis.completeness,\n        marketability: geminiAnalysis.marketability,\n        monetization: geminiAnalysis.monetization,\n        usefulness: geminiAnalysis.usefulness,\n        overallScore: geminiAnalysis.overallScore,\n        summary: geminiAnalysis.summary,\n        strengths,\n        weaknesses,\n        recommendations,\n        scoreExplanations: geminiAnalysis.scoreExplanations,\n      });\n      \n      res.json({ data: { repository, analysis } });\n    } catch (error) {\n      console.error('API error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Teams endpoints\n  app.get('/api/teams', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const teams = await storage.getUserTeams(userId);\n      res.json(teams);\n    } catch (error) {\n      console.error('Error fetching teams:', error);\n      res.status(500).json({ message: 'Failed to fetch teams' });\n    }\n  });\n\n  app.post('/api/teams', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { name, description } = req.body;\n      \n      if (!name) {\n        return res.status(400).json({ message: 'Team name is required' });\n      }\n      \n      const team = await storage.createTeam({\n        name,\n        description,\n        ownerId: userId,\n      });\n      \n      res.json(team);\n    } catch (error) {\n      console.error('Error creating team:', error);\n      res.status(500).json({ message: 'Failed to create team' });\n    }\n  });\n\n  app.get('/api/teams/:teamId/members', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { teamId } = req.params;\n      \n      // Check if user is member of the team\n      const isMember = await storage.isTeamMember(teamId, userId);\n      if (!isMember) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      const members = await storage.getTeamMembers(teamId);\n      res.json(members);\n    } catch (error) {\n      console.error('Error fetching team members:', error);\n      res.status(500).json({ message: 'Failed to fetch team members' });\n    }\n  });\n\n  app.post('/api/teams/:teamId/invite', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { teamId } = req.params;\n      const { email, role } = req.body;\n      \n      // Check if user has permission to invite\n      const memberRole = await storage.getTeamMemberRole(teamId, userId);\n      if (!memberRole || (memberRole !== 'owner' && memberRole !== 'admin')) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      const invitation = await storage.createTeamInvitation({\n        teamId,\n        email,\n        role: role || 'member',\n        invitedBy: userId,\n      });\n      \n      res.json(invitation);\n    } catch (error) {\n      console.error('Error creating invitation:', error);\n      res.status(500).json({ message: 'Failed to create invitation' });\n    }\n  });\n\n  app.patch('/api/teams/:teamId/members/:memberId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { teamId, memberId } = req.params;\n      const { role } = req.body;\n      \n      // Check if user has permission to update roles\n      const memberRole = await storage.getTeamMemberRole(teamId, userId);\n      if (!memberRole || (memberRole !== 'owner' && memberRole !== 'admin')) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      await storage.updateTeamMemberRole(memberId, role);\n      res.json({ message: 'Role updated successfully' });\n    } catch (error) {\n      console.error('Error updating member role:', error);\n      res.status(500).json({ message: 'Failed to update member role' });\n    }\n  });\n\n  app.delete('/api/teams/:teamId/members/:memberId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { teamId, memberId } = req.params;\n      \n      // Check if user has permission to remove members\n      const memberRole = await storage.getTeamMemberRole(teamId, userId);\n      if (!memberRole || memberRole !== 'owner') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      await storage.removeTeamMember(memberId);\n      res.json({ message: 'Member removed successfully' });\n    } catch (error) {\n      console.error('Error removing member:', error);\n      res.status(500).json({ message: 'Failed to remove member' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  \n  // WebSocket server for real-time notifications\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  const userConnections = new Map<string, WebSocket>();\n\n  wss.on('connection', (ws: WebSocket, req) => {\n    // Parse user ID from connection (you might need to implement auth for WebSocket)\n    let userId: string | null = null;\n\n    ws.on('message', (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'authenticate') {\n          userId = message.userId;\n          if (userId) {\n            userConnections.set(userId, ws);\n            ws.send(JSON.stringify({ type: 'authenticated', message: 'Connected to notification service' }));\n          }\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      if (userId) {\n        userConnections.delete(userId);\n      }\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n    });\n  });\n\n  // Function to send real-time notifications\n  const sendRealtimeNotification = (userId: string, notification: any) => {\n    const ws = userConnections.get(userId);\n    if (ws && ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify({\n        type: 'notification',\n        data: notification\n      }));\n    }\n  };\n\n  // Make sendRealtimeNotification available globally\n  (global as any).sendRealtimeNotification = sendRealtimeNotification;\n\n  return httpServer;\n}\n","size_bytes":62415},"server/storage.ts":{"content":"import {\n  users,\n  repositories,\n  repositoryAnalyses,\n  savedRepositories,\n  similarRepositories,\n  bookmarks,\n  tags,\n  repositoryTags,\n  collections,\n  collectionItems,\n  userPreferences,\n  userActivities,\n  trackedRepositories,\n  notifications,\n  comments,\n  commentLikes,\n  ratings,\n  ratingHelpful,\n  teams,\n  teamMembers,\n  teamInvitations,\n  sharedAnalyses,\n  apiKeys,\n  apiUsage,\n  webhooks,\n  type User,\n  type UpsertUser,\n  type Repository,\n  type InsertRepository,\n  type RepositoryAnalysis,\n  type InsertAnalysis,\n  type SavedRepository,\n  type InsertSavedRepository,\n  type SimilarRepository,\n  type Bookmark,\n  type InsertBookmark,\n  type Tag,\n  type InsertTag,\n  type RepositoryTag,\n  type InsertRepositoryTag,\n  type Collection,\n  type InsertCollection,\n  type CollectionItem,\n  type InsertCollectionItem,\n  type UserPreference,\n  type InsertUserPreference,\n  type UserActivity,\n  type InsertUserActivity,\n  type TrackedRepository,\n  type InsertTrackedRepository,\n  type Notification,\n  type InsertNotification,\n  type Comment,\n  type InsertComment,\n  type CommentLike,\n  type InsertCommentLike,\n  type Rating,\n  type InsertRating,\n  type RatingHelpful,\n  type InsertRatingHelpful,\n  type Team,\n  type InsertTeam,\n  type TeamMember,\n  type InsertTeamMember,\n  type TeamInvitation,\n  type InsertTeamInvitation,\n  type SharedAnalysis,\n  type InsertSharedAnalysis,\n  type ApiKey,\n  type InsertApiKey,\n  type ApiUsage,\n  type InsertApiUsage,\n  type Webhook,\n  type InsertWebhook,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserStripeCustomerId(userId: string, stripeCustomerId: string): Promise<User>;\n  updateUserSubscription(userId: string, subscription: {\n    stripeSubscriptionId?: string;\n    subscriptionTier?: string;\n    subscriptionStatus?: string;\n    subscriptionEndDate?: Date | null;\n  }): Promise<User>;\n  getUserByStripeCustomerId(stripeCustomerId: string): Promise<User | undefined>;\n  resetUserAnalysisCount(userId: string): Promise<User>;\n  incrementUserAnalysisCount(userId: string): Promise<User>;\n\n  // Repository operations\n  getRepository(id: string): Promise<Repository | undefined>;\n  getRepositoryByFullName(fullName: string): Promise<Repository | undefined>;\n  upsertRepository(repo: InsertRepository & { id: string }): Promise<Repository>;\n  searchRepositories(query: string, limit?: number): Promise<Repository[]>;\n  getRecentRepositories(limit?: number): Promise<Repository[]>;\n\n  // Analysis operations\n  getAnalysis(repositoryId: string, userId?: string): Promise<RepositoryAnalysis | undefined>;\n  createAnalysis(analysis: InsertAnalysis): Promise<RepositoryAnalysis>;\n  getRecentAnalyses(userId?: string, limit?: number): Promise<(RepositoryAnalysis & { repository: Repository })[]>;\n\n  // Saved repositories operations\n  saveRepository(userId: string, repositoryId: string): Promise<SavedRepository>;\n  unsaveRepository(userId: string, repositoryId: string): Promise<void>;\n  getSavedRepositories(userId: string): Promise<(SavedRepository & { repository: Repository })[]>;\n  isRepositorySaved(userId: string, repositoryId: string): Promise<boolean>;\n\n  // Similar repositories operations\n  getSimilarRepositories(repositoryId: string, limit?: number): Promise<(SimilarRepository & { similarRepository: Repository })[]>;\n  createSimilarRepositories(repositoryId: string, similarRepos: { repositoryId: string; similarity: number }[]): Promise<void>;\n  \n  // Trending repositories\n  getTrendingRepositories(): Promise<Repository[]>;\n  \n  // User Profile & Preferences operations\n  getUserPreferences(userId: string): Promise<UserPreference | undefined>;\n  updateUserPreferences(userId: string, preferences: Partial<InsertUserPreference>): Promise<UserPreference>;\n  \n  // Bookmarks operations\n  getUserBookmarks(userId: string): Promise<Bookmark[]>;\n  addBookmark(userId: string, repositoryId: string, notes?: string): Promise<Bookmark>;\n  removeBookmark(userId: string, repositoryId: string): Promise<void>;\n  \n  // Tags operations\n  getUserTags(userId: string): Promise<Tag[]>;\n  createTag(userId: string, name: string, color?: string): Promise<Tag>;\n  tagRepository(repositoryId: string, tagId: number, userId: string): Promise<RepositoryTag>;\n  \n  // Collections operations\n  getUserCollections(userId: string): Promise<Collection[]>;\n  createCollection(userId: string, collection: InsertCollection): Promise<Collection>;\n  addToCollection(collectionId: number, repositoryId: string, notes?: string): Promise<CollectionItem>;\n  \n  // Activity tracking\n  trackActivity(userId: string, action: string, repositoryId?: string, metadata?: any): Promise<UserActivity>;\n  getUserRecentActivity(userId: string, limit?: number): Promise<UserActivity[]>;\n  \n  // Repository tracking operations\n  trackRepository(userId: string, repositoryId: string, trackingType: string): Promise<TrackedRepository>;\n  untrackRepository(userId: string, repositoryId: string): Promise<void>;\n  getTrackedRepositories(userId: string): Promise<(TrackedRepository & { repository: Repository })[]>;\n  \n  // Notification operations\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getUserNotifications(userId: string, unreadOnly?: boolean): Promise<(Notification & { repository?: Repository })[]>;\n  markNotificationAsRead(notificationId: number, userId: string): Promise<void>;\n  markAllNotificationsAsRead(userId: string): Promise<void>;\n  deleteNotification(notificationId: number, userId: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserStripeCustomerId(userId: string, stripeCustomerId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        stripeCustomerId,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async updateUserSubscription(userId: string, subscription: {\n    stripeSubscriptionId?: string;\n    subscriptionTier?: string;\n    subscriptionStatus?: string;\n    subscriptionEndDate?: Date | null;\n  }): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        ...subscription,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async getUserByStripeCustomerId(stripeCustomerId: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.stripeCustomerId, stripeCustomerId));\n    return user;\n  }\n\n  async resetUserAnalysisCount(userId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        analysisCount: 0,\n        lastAnalysisReset: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async incrementUserAnalysisCount(userId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        analysisCount: sql`${users.analysisCount} + 1`,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Repository operations\n  async getRepository(id: string): Promise<Repository | undefined> {\n    const [repository] = await db.select().from(repositories).where(eq(repositories.id, id));\n    return repository;\n  }\n\n  async getRepositoryByFullName(fullName: string): Promise<Repository | undefined> {\n    const [repository] = await db.select().from(repositories).where(eq(repositories.fullName, fullName));\n    return repository;\n  }\n\n  async upsertRepository(repo: InsertRepository & { id: string }): Promise<Repository> {\n    const [repository] = await db\n      .insert(repositories)\n      .values(repo)\n      .onConflictDoUpdate({\n        target: repositories.fullName,\n        set: {\n          ...repo,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return repository;\n  }\n\n  async searchRepositories(query: string, limit = 10): Promise<Repository[]> {\n    return await db\n      .select()\n      .from(repositories)\n      .where(sql`${repositories.name} ILIKE ${`%${query}%`} OR ${repositories.description} ILIKE ${`%${query}%`}`)\n      .orderBy(desc(repositories.stars))\n      .limit(limit);\n  }\n\n  async getRecentRepositories(limit = 10): Promise<Repository[]> {\n    return await db\n      .select()\n      .from(repositories)\n      .orderBy(desc(repositories.createdAt))\n      .limit(limit);\n  }\n\n  // Analysis operations\n  async getAnalysis(repositoryId: string, userId?: string): Promise<RepositoryAnalysis | undefined> {\n    const conditions = [eq(repositoryAnalyses.repositoryId, repositoryId)];\n    \n    if (userId) {\n      conditions.push(eq(repositoryAnalyses.userId, userId));\n    }\n\n    const results = await db\n      .select()\n      .from(repositoryAnalyses)\n      .where(conditions.length > 1 ? and(...conditions) : conditions[0])\n      .orderBy(desc(repositoryAnalyses.createdAt));\n    \n    return results[0];\n  }\n\n  async createAnalysis(analysis: InsertAnalysis): Promise<RepositoryAnalysis> {\n    const [newAnalysis] = await db\n      .insert(repositoryAnalyses)\n      .values(analysis)\n      .returning();\n    return newAnalysis;\n  }\n\n  async getRecentAnalyses(userId?: string, limit = 10): Promise<(RepositoryAnalysis & { repository: Repository })[]> {\n    const query = db\n      .select({\n        id: repositoryAnalyses.id,\n        repositoryId: repositoryAnalyses.repositoryId,\n        userId: repositoryAnalyses.userId,\n        originality: repositoryAnalyses.originality,\n        completeness: repositoryAnalyses.completeness,\n        marketability: repositoryAnalyses.marketability,\n        monetization: repositoryAnalyses.monetization,\n        usefulness: repositoryAnalyses.usefulness,\n        overallScore: repositoryAnalyses.overallScore,\n        summary: repositoryAnalyses.summary,\n        strengths: repositoryAnalyses.strengths,\n        weaknesses: repositoryAnalyses.weaknesses,\n        recommendations: repositoryAnalyses.recommendations,\n        createdAt: repositoryAnalyses.createdAt,\n        repository: repositories,\n      })\n      .from(repositoryAnalyses)\n      .innerJoin(repositories, eq(repositoryAnalyses.repositoryId, repositories.id));\n\n    if (userId) {\n      query.where(eq(repositoryAnalyses.userId, userId));\n    }\n\n    return await query\n      .orderBy(desc(repositoryAnalyses.createdAt))\n      .limit(limit);\n  }\n\n  async getUserAnalyses(userId: string): Promise<any[]> {\n    const results = await db\n      .select({\n        id: repositoryAnalyses.id,\n        repositoryId: repositoryAnalyses.repositoryId,\n        repositoryName: repositories.name,\n        repositoryOwner: repositories.owner,\n        primaryLanguage: repositories.language,\n        userId: repositoryAnalyses.userId,\n        originality: repositoryAnalyses.originality,\n        completeness: repositoryAnalyses.completeness,\n        marketability: repositoryAnalyses.marketability,\n        monetization: repositoryAnalyses.monetization,\n        usefulness: repositoryAnalyses.usefulness,\n        overallScore: repositoryAnalyses.overallScore,\n        createdAt: repositoryAnalyses.createdAt,\n      })\n      .from(repositoryAnalyses)\n      .innerJoin(repositories, eq(repositoryAnalyses.repositoryId, repositories.id))\n      .where(eq(repositoryAnalyses.userId, userId))\n      .orderBy(desc(repositoryAnalyses.createdAt));\n    \n    return results;\n  }\n\n  // Saved repositories operations\n  async saveRepository(userId: string, repositoryId: string): Promise<SavedRepository> {\n    const [saved] = await db\n      .insert(savedRepositories)\n      .values({ userId, repositoryId })\n      .returning();\n    return saved;\n  }\n\n  async unsaveRepository(userId: string, repositoryId: string): Promise<void> {\n    await db\n      .delete(savedRepositories)\n      .where(and(eq(savedRepositories.userId, userId), eq(savedRepositories.repositoryId, repositoryId)));\n  }\n\n  async getSavedRepositories(userId: string): Promise<(SavedRepository & { repository: Repository })[]> {\n    return await db\n      .select({\n        id: savedRepositories.id,\n        userId: savedRepositories.userId,\n        repositoryId: savedRepositories.repositoryId,\n        createdAt: savedRepositories.createdAt,\n        repository: repositories,\n      })\n      .from(savedRepositories)\n      .innerJoin(repositories, eq(savedRepositories.repositoryId, repositories.id))\n      .where(eq(savedRepositories.userId, userId))\n      .orderBy(desc(savedRepositories.createdAt));\n  }\n\n  async isRepositorySaved(userId: string, repositoryId: string): Promise<boolean> {\n    const [saved] = await db\n      .select()\n      .from(savedRepositories)\n      .where(and(eq(savedRepositories.userId, userId), eq(savedRepositories.repositoryId, repositoryId)));\n    return !!saved;\n  }\n\n  // Similar repositories operations\n  async getSimilarRepositories(repositoryId: string, limit = 5): Promise<(SimilarRepository & { similarRepository: Repository })[]> {\n    return await db\n      .select({\n        id: similarRepositories.id,\n        repositoryId: similarRepositories.repositoryId,\n        similarRepositoryId: similarRepositories.similarRepositoryId,\n        similarity: similarRepositories.similarity,\n        createdAt: similarRepositories.createdAt,\n        similarRepository: repositories,\n      })\n      .from(similarRepositories)\n      .innerJoin(repositories, eq(similarRepositories.similarRepositoryId, repositories.id))\n      .where(eq(similarRepositories.repositoryId, repositoryId))\n      .orderBy(desc(similarRepositories.similarity))\n      .limit(limit);\n  }\n\n  async createSimilarRepositories(repositoryId: string, similarRepos: { repositoryId: string; similarity: number }[]): Promise<void> {\n    if (similarRepos.length === 0) return;\n    \n    const values = similarRepos.map(repo => ({\n      repositoryId,\n      similarRepositoryId: repo.repositoryId,\n      similarity: repo.similarity,\n    }));\n\n    await db.insert(similarRepositories).values(values);\n  }\n\n  // Trending repositories\n  async getTrendingRepositories(): Promise<Repository[]> {\n    // Get repositories with recent analyses and high scores\n    const result = await db\n      .select({\n        repository: repositories,\n        avgScore: sql<number>`avg(${repositoryAnalyses.overallScore})`,\n        analysisCount: sql<number>`count(${repositoryAnalyses.id})`,\n      })\n      .from(repositories)\n      .innerJoin(repositoryAnalyses, eq(repositories.id, repositoryAnalyses.repositoryId))\n      .where(sql`${repositoryAnalyses.createdAt} > now() - interval '7 days'`)\n      .groupBy(repositories.id)\n      .having(sql`avg(${repositoryAnalyses.overallScore}) > 7`)\n      .orderBy(desc(sql`avg(${repositoryAnalyses.overallScore})`))\n      .limit(10);\n    \n    return result.map(r => r.repository);\n  }\n\n  // User Profile & Preferences operations\n  async getUserPreferences(userId: string): Promise<UserPreference | undefined> {\n    const [pref] = await db\n      .select()\n      .from(userPreferences)\n      .where(eq(userPreferences.userId, userId));\n    \n    if (!pref) {\n      // Create default preferences if none exist\n      const [newPref] = await db\n        .insert(userPreferences)\n        .values({ userId })\n        .returning();\n      return newPref;\n    }\n    \n    return pref;\n  }\n\n  async updateUserPreferences(userId: string, preferences: Partial<InsertUserPreference>): Promise<UserPreference> {\n    const [updated] = await db\n      .insert(userPreferences)\n      .values({ ...preferences, userId })\n      .onConflictDoUpdate({\n        target: userPreferences.userId,\n        set: {\n          ...preferences,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return updated;\n  }\n\n  // Bookmarks operations\n  async getUserBookmarks(userId: string): Promise<Bookmark[]> {\n    return await db\n      .select()\n      .from(bookmarks)\n      .where(eq(bookmarks.userId, userId))\n      .orderBy(desc(bookmarks.createdAt));\n  }\n\n  async addBookmark(userId: string, repositoryId: string, notes?: string): Promise<Bookmark> {\n    const [bookmark] = await db\n      .insert(bookmarks)\n      .values({ userId, repositoryId, notes })\n      .returning();\n    return bookmark;\n  }\n\n  async removeBookmark(userId: string, repositoryId: string): Promise<void> {\n    await db\n      .delete(bookmarks)\n      .where(and(eq(bookmarks.userId, userId), eq(bookmarks.repositoryId, repositoryId)));\n  }\n\n  // Tags operations\n  async getUserTags(userId: string): Promise<Tag[]> {\n    return await db\n      .select()\n      .from(tags)\n      .where(eq(tags.userId, userId))\n      .orderBy(tags.name);\n  }\n\n  async createTag(userId: string, name: string, color = \"#FF6B35\"): Promise<Tag> {\n    const [tag] = await db\n      .insert(tags)\n      .values({ userId, name, color })\n      .returning();\n    return tag;\n  }\n\n  async tagRepository(repositoryId: string, tagId: number, userId: string): Promise<RepositoryTag> {\n    const [repoTag] = await db\n      .insert(repositoryTags)\n      .values({ repositoryId, tagId, userId })\n      .returning();\n    return repoTag;\n  }\n\n  // Collections operations\n  async getUserCollections(userId: string): Promise<Collection[]> {\n    return await db\n      .select()\n      .from(collections)\n      .where(eq(collections.userId, userId))\n      .orderBy(desc(collections.updatedAt));\n  }\n\n  async createCollection(userId: string, collection: Partial<InsertCollection>): Promise<Collection> {\n    const [newCollection] = await db\n      .insert(collections)\n      .values({ ...collection, userId } as InsertCollection)\n      .returning();\n    return newCollection;\n  }\n\n  async addToCollection(collectionId: number, repositoryId: string, notes?: string): Promise<CollectionItem> {\n    const [maxPosition] = await db\n      .select({ max: sql<number>`COALESCE(MAX(${collectionItems.position}), 0)` })\n      .from(collectionItems)\n      .where(eq(collectionItems.collectionId, collectionId));\n    \n    const [item] = await db\n      .insert(collectionItems)\n      .values({\n        collectionId,\n        repositoryId,\n        notes,\n        position: (maxPosition?.max || 0) + 1,\n      })\n      .returning();\n    \n    // Update collection's updatedAt\n    await db\n      .update(collections)\n      .set({ updatedAt: new Date() })\n      .where(eq(collections.id, collectionId));\n    \n    return item;\n  }\n\n  // Activity tracking\n  async trackActivity(userId: string, action: string, repositoryId?: string, metadata?: any): Promise<UserActivity> {\n    const [activity] = await db\n      .insert(userActivities)\n      .values({ userId, action, repositoryId, metadata })\n      .returning();\n    return activity;\n  }\n\n  async getUserRecentActivity(userId: string, limit = 20): Promise<UserActivity[]> {\n    return await db\n      .select()\n      .from(userActivities)\n      .where(eq(userActivities.userId, userId))\n      .orderBy(desc(userActivities.createdAt))\n      .limit(limit);\n  }\n\n  // Repository tracking operations\n  async trackRepository(userId: string, repositoryId: string, trackingType: string): Promise<TrackedRepository> {\n    // Check if already tracking\n    const [existing] = await db\n      .select()\n      .from(trackedRepositories)\n      .where(and(\n        eq(trackedRepositories.userId, userId),\n        eq(trackedRepositories.repositoryId, repositoryId)\n      ));\n    \n    if (existing) {\n      // Update existing tracking\n      const [updated] = await db\n        .update(trackedRepositories)\n        .set({ \n          trackingType, \n          isActive: true,\n          lastChecked: new Date() \n        })\n        .where(eq(trackedRepositories.id, existing.id))\n        .returning();\n      return updated;\n    }\n    \n    // Create new tracking\n    const [tracked] = await db\n      .insert(trackedRepositories)\n      .values({\n        userId,\n        repositoryId,\n        trackingType,\n      })\n      .returning();\n    return tracked;\n  }\n\n  async untrackRepository(userId: string, repositoryId: string): Promise<void> {\n    await db\n      .update(trackedRepositories)\n      .set({ isActive: false })\n      .where(and(\n        eq(trackedRepositories.userId, userId),\n        eq(trackedRepositories.repositoryId, repositoryId)\n      ));\n  }\n\n  async getTrackedRepositories(userId: string): Promise<(TrackedRepository & { repository: Repository })[]> {\n    const result = await db\n      .select({\n        tracked: trackedRepositories,\n        repository: repositories,\n      })\n      .from(trackedRepositories)\n      .innerJoin(repositories, eq(trackedRepositories.repositoryId, repositories.id))\n      .where(and(\n        eq(trackedRepositories.userId, userId),\n        eq(trackedRepositories.isActive, true)\n      ))\n      .orderBy(desc(trackedRepositories.createdAt));\n    \n    return result.map(r => ({ ...r.tracked, repository: r.repository }));\n  }\n\n  // Notification operations\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db\n      .insert(notifications)\n      .values(notification)\n      .returning();\n    \n    // Send real-time notification if available\n    if ((global as any).sendRealtimeNotification) {\n      (global as any).sendRealtimeNotification(notification.userId, newNotification);\n    }\n    \n    return newNotification;\n  }\n\n  async getUserNotifications(userId: string, unreadOnly = false): Promise<(Notification & { repository?: Repository })[]> {\n    const query = db\n      .select({\n        notification: notifications,\n        repository: repositories,\n      })\n      .from(notifications)\n      .leftJoin(repositories, eq(notifications.repositoryId, repositories.id))\n      .where(\n        unreadOnly\n          ? and(\n              eq(notifications.userId, userId),\n              eq(notifications.isRead, false)\n            )\n          : eq(notifications.userId, userId)\n      )\n      .orderBy(desc(notifications.createdAt))\n      .limit(50);\n    \n    const result = await query;\n    return result.map(r => ({ \n      ...r.notification, \n      repository: r.repository || undefined \n    }));\n  }\n\n  async markNotificationAsRead(notificationId: number, userId: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ \n        isRead: true, \n        readAt: new Date() \n      })\n      .where(and(\n        eq(notifications.id, notificationId),\n        eq(notifications.userId, userId)\n      ));\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ \n        isRead: true, \n        readAt: new Date() \n      })\n      .where(eq(notifications.userId, userId));\n  }\n\n  async deleteNotification(notificationId: number, userId: string): Promise<void> {\n    await db\n      .delete(notifications)\n      .where(and(\n        eq(notifications.id, notificationId),\n        eq(notifications.userId, userId)\n      ));\n  }\n\n  // Comments operations\n  async getRepositoryComments(repositoryId: string): Promise<(Comment & { user: User, likeCount: number, hasLiked?: boolean })[]> {\n    const commentsData = await db\n      .select({\n        comment: comments,\n        user: users,\n      })\n      .from(comments)\n      .innerJoin(users, eq(comments.userId, users.id))\n      .where(eq(comments.repositoryId, repositoryId))\n      .orderBy(desc(comments.createdAt));\n    \n    // Get like counts\n    const commentIds = commentsData.map(c => c.comment.id);\n    const likeCounts = await db\n      .select({\n        commentId: commentLikes.commentId,\n        count: sql<number>`count(*)::int`,\n      })\n      .from(commentLikes)\n      .where(sql`${commentLikes.commentId} = ANY(${commentIds})`)\n      .groupBy(commentLikes.commentId);\n    \n    const likeCountMap = new Map(likeCounts.map(lc => [lc.commentId, lc.count]));\n    \n    return commentsData.map(cd => ({\n      ...cd.comment,\n      user: cd.user,\n      likeCount: likeCountMap.get(cd.comment.id) || 0,\n    }));\n  }\n\n  async createComment(comment: InsertComment): Promise<Comment> {\n    const [newComment] = await db\n      .insert(comments)\n      .values(comment)\n      .returning();\n    return newComment;\n  }\n\n  async updateComment(commentId: number, userId: string, content: string): Promise<Comment> {\n    const [updated] = await db\n      .update(comments)\n      .set({ \n        content,\n        isEdited: true,\n        updatedAt: new Date(),\n      })\n      .where(and(\n        eq(comments.id, commentId),\n        eq(comments.userId, userId)\n      ))\n      .returning();\n    return updated;\n  }\n\n  async deleteComment(commentId: number, userId: string): Promise<void> {\n    await db\n      .delete(comments)\n      .where(and(\n        eq(comments.id, commentId),\n        eq(comments.userId, userId)\n      ));\n  }\n\n  async likeComment(commentId: number, userId: string): Promise<void> {\n    // Check if already liked\n    const [existing] = await db\n      .select()\n      .from(commentLikes)\n      .where(and(\n        eq(commentLikes.commentId, commentId),\n        eq(commentLikes.userId, userId)\n      ));\n    \n    if (!existing) {\n      await db.insert(commentLikes).values({ commentId, userId });\n      // Update like count\n      await db\n        .update(comments)\n        .set({ likes: sql`${comments.likes} + 1` })\n        .where(eq(comments.id, commentId));\n    }\n  }\n\n  async unlikeComment(commentId: number, userId: string): Promise<void> {\n    const deleted = await db\n      .delete(commentLikes)\n      .where(and(\n        eq(commentLikes.commentId, commentId),\n        eq(commentLikes.userId, userId)\n      ))\n      .returning();\n    \n    if (deleted.length > 0) {\n      // Update like count\n      await db\n        .update(comments)\n        .set({ likes: sql`GREATEST(${comments.likes} - 1, 0)` })\n        .where(eq(comments.id, commentId));\n    }\n  }\n\n  // Ratings operations\n  async getRepositoryRatings(repositoryId: string): Promise<(Rating & { user: User, helpfulCount: number })[]> {\n    const ratingsData = await db\n      .select({\n        rating: ratings,\n        user: users,\n      })\n      .from(ratings)\n      .innerJoin(users, eq(ratings.userId, users.id))\n      .where(eq(ratings.repositoryId, repositoryId))\n      .orderBy(desc(ratings.createdAt));\n    \n    return ratingsData.map(rd => ({\n      ...rd.rating,\n      user: rd.user,\n      helpfulCount: rd.rating.helpfulCount || 0,\n    }));\n  }\n\n  async getRepositoryAverageRating(repositoryId: string): Promise<{ average: number, count: number }> {\n    const [result] = await db\n      .select({\n        average: sql<number>`COALESCE(AVG(${ratings.rating}), 0)`,\n        count: sql<number>`COUNT(*)::int`,\n      })\n      .from(ratings)\n      .where(eq(ratings.repositoryId, repositoryId));\n    \n    return { \n      average: result?.average || 0,\n      count: result?.count || 0,\n    };\n  }\n\n  async getUserRating(userId: string, repositoryId: string): Promise<Rating | undefined> {\n    const [rating] = await db\n      .select()\n      .from(ratings)\n      .where(and(\n        eq(ratings.userId, userId),\n        eq(ratings.repositoryId, repositoryId)\n      ));\n    return rating;\n  }\n\n  async createOrUpdateRating(rating: InsertRating): Promise<Rating> {\n    const [upserted] = await db\n      .insert(ratings)\n      .values(rating)\n      .onConflictDoUpdate({\n        target: [ratings.userId, ratings.repositoryId],\n        set: {\n          rating: rating.rating,\n          review: rating.review,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return upserted;\n  }\n\n  async deleteRating(ratingId: number, userId: string): Promise<void> {\n    await db\n      .delete(ratings)\n      .where(and(\n        eq(ratings.id, ratingId),\n        eq(ratings.userId, userId)\n      ));\n  }\n\n  async markRatingHelpful(ratingId: number, userId: string): Promise<void> {\n    // Check if already marked\n    const [existing] = await db\n      .select()\n      .from(ratingHelpful)\n      .where(and(\n        eq(ratingHelpful.ratingId, ratingId),\n        eq(ratingHelpful.userId, userId)\n      ));\n    \n    if (!existing) {\n      await db.insert(ratingHelpful).values({ ratingId, userId });\n      // Update helpful count\n      await db\n        .update(ratings)\n        .set({ helpfulCount: sql`${ratings.helpfulCount} + 1` })\n        .where(eq(ratings.id, ratingId));\n    }\n  }\n\n  async unmarkRatingHelpful(ratingId: number, userId: string): Promise<void> {\n    const deleted = await db\n      .delete(ratingHelpful)\n      .where(and(\n        eq(ratingHelpful.ratingId, ratingId),\n        eq(ratingHelpful.userId, userId)\n      ))\n      .returning();\n    \n    if (deleted.length > 0) {\n      // Update helpful count\n      await db\n        .update(ratings)\n        .set({ helpfulCount: sql`GREATEST(${ratings.helpfulCount} - 1, 0)` })\n        .where(eq(ratings.id, ratingId));\n    }\n  }\n\n  // Collections operations\n  async getUserCollections(userId: string): Promise<(Collection & { repositoryCount: number })[]> {\n    const collectionsData = await db\n      .select({\n        collection: collections,\n      })\n      .from(collections)\n      .where(eq(collections.userId, userId))\n      .orderBy(desc(collections.createdAt));\n    \n    // Get repository counts\n    const collectionIds = collectionsData.map(c => c.collection.id);\n    const counts = await db\n      .select({\n        collectionId: collectionItems.collectionId,\n        count: sql<number>`count(*)::int`,\n      })\n      .from(collectionItems)\n      .where(sql`${collectionItems.collectionId} = ANY(${collectionIds})`)\n      .groupBy(collectionItems.collectionId);\n    \n    const countMap = new Map(counts.map(c => [c.collectionId, c.count]));\n    \n    return collectionsData.map(cd => ({\n      ...cd.collection,\n      repositoryCount: countMap.get(cd.collection.id) || 0,\n    }));\n  }\n\n  async createCollection(collection: InsertCollection): Promise<Collection> {\n    const [newCollection] = await db\n      .insert(collections)\n      .values(collection)\n      .returning();\n    return newCollection;\n  }\n\n  async updateCollection(collectionId: number, userId: string, updates: Partial<InsertCollection>): Promise<Collection> {\n    const [updated] = await db\n      .update(collections)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(and(\n        eq(collections.id, collectionId),\n        eq(collections.userId, userId)\n      ))\n      .returning();\n    return updated;\n  }\n\n  async deleteCollection(collectionId: number, userId: string): Promise<void> {\n    await db\n      .delete(collections)\n      .where(and(\n        eq(collections.id, collectionId),\n        eq(collections.userId, userId)\n      ));\n  }\n\n  async addRepositoryToCollection(collectionId: number, repositoryId: string, userId: string): Promise<CollectionItem> {\n    // First verify the collection belongs to the user\n    const [collection] = await db\n      .select()\n      .from(collections)\n      .where(and(\n        eq(collections.id, collectionId),\n        eq(collections.userId, userId)\n      ));\n    \n    if (!collection) {\n      throw new Error('Collection not found or access denied');\n    }\n    \n    // Check if already in collection\n    const [existing] = await db\n      .select()\n      .from(collectionItems)\n      .where(and(\n        eq(collectionItems.collectionId, collectionId),\n        eq(collectionItems.repositoryId, repositoryId)\n      ));\n    \n    if (existing) {\n      return existing;\n    }\n    \n    const [item] = await db\n      .insert(collectionItems)\n      .values({\n        collectionId,\n        repositoryId,\n      })\n      .returning();\n    return item;\n  }\n\n  async removeRepositoryFromCollection(collectionId: number, repositoryId: string, userId: string): Promise<void> {\n    // First verify the collection belongs to the user\n    const [collection] = await db\n      .select()\n      .from(collections)\n      .where(and(\n        eq(collections.id, collectionId),\n        eq(collections.userId, userId)\n      ));\n    \n    if (!collection) {\n      throw new Error('Collection not found or access denied');\n    }\n    \n    await db\n      .delete(collectionItems)\n      .where(and(\n        eq(collectionItems.collectionId, collectionId),\n        eq(collectionItems.repositoryId, repositoryId)\n      ));\n  }\n\n  async getCollectionRepositories(collectionId: number): Promise<Repository[]> {\n    const items = await db\n      .select({\n        repository: repositories,\n      })\n      .from(collectionItems)\n      .innerJoin(repositories, eq(collectionItems.repositoryId, repositories.id))\n      .where(eq(collectionItems.collectionId, collectionId))\n      .orderBy(collectionItems.position);\n    \n    return items.map(i => i.repository);\n  }\n\n  // Team operations\n  async getUserTeams(userId: string): Promise<any[]> {\n    const userTeams = await db\n      .select({\n        id: teams.id,\n        name: teams.name,\n        description: teams.description,\n        ownerId: teams.ownerId,\n        createdAt: teams.createdAt,\n        role: teamMembers.role,\n      })\n      .from(teamMembers)\n      .innerJoin(teams, eq(teamMembers.teamId, teams.id))\n      .where(eq(teamMembers.userId, userId));\n    \n    // Get member counts for each team\n    const teamsWithCounts = await Promise.all(userTeams.map(async (team) => {\n      const [count] = await db\n        .select({ count: sql<number>`COUNT(*)` })\n        .from(teamMembers)\n        .where(eq(teamMembers.teamId, team.id));\n      \n      return {\n        ...team,\n        memberCount: count?.count || 1,\n      };\n    }));\n    \n    return teamsWithCounts;\n  }\n\n  async createTeam(team: InsertTeam): Promise<Team> {\n    const [newTeam] = await db.insert(teams).values(team).returning();\n    \n    // Add owner as a team member\n    await db.insert(teamMembers).values({\n      teamId: newTeam.id,\n      userId: team.ownerId,\n      role: 'owner',\n    });\n    \n    return newTeam;\n  }\n\n  async isTeamMember(teamId: string, userId: string): Promise<boolean> {\n    const [member] = await db\n      .select()\n      .from(teamMembers)\n      .where(and(\n        eq(teamMembers.teamId, teamId),\n        eq(teamMembers.userId, userId)\n      ));\n    \n    return !!member;\n  }\n\n  async getTeamMembers(teamId: string): Promise<any[]> {\n    const members = await db\n      .select({\n        id: teamMembers.id,\n        userId: teamMembers.userId,\n        teamId: teamMembers.teamId,\n        role: teamMembers.role,\n        joinedAt: teamMembers.joinedAt,\n        user: {\n          id: users.id,\n          email: users.email,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n        },\n      })\n      .from(teamMembers)\n      .innerJoin(users, eq(teamMembers.userId, users.id))\n      .where(eq(teamMembers.teamId, teamId));\n    \n    return members;\n  }\n\n  async getTeamMemberRole(teamId: string, userId: string): Promise<string | null> {\n    const [member] = await db\n      .select({ role: teamMembers.role })\n      .from(teamMembers)\n      .where(and(\n        eq(teamMembers.teamId, teamId),\n        eq(teamMembers.userId, userId)\n      ));\n    \n    return member?.role || null;\n  }\n\n  async createTeamInvitation(invitation: any): Promise<any> {\n    const token = Math.random().toString(36).substring(2, 15);\n    const expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + 7); // 7 days expiry\n    \n    const [newInvitation] = await db\n      .insert(teamInvitations)\n      .values({\n        ...invitation,\n        token,\n        expiresAt,\n      })\n      .returning();\n    \n    // TODO: Send email invitation\n    return newInvitation;\n  }\n\n  async updateTeamMemberRole(memberId: string, role: string): Promise<void> {\n    await db\n      .update(teamMembers)\n      .set({ role })\n      .where(eq(teamMembers.id, memberId));\n  }\n\n  async removeTeamMember(memberId: string): Promise<void> {\n    await db\n      .delete(teamMembers)\n      .where(eq(teamMembers.id, memberId));\n  }\n\n  // API Key operations\n  async getUserApiKeys(userId: string): Promise<ApiKey[]> {\n    return await db\n      .select()\n      .from(apiKeys)\n      .where(eq(apiKeys.userId, userId))\n      .orderBy(desc(apiKeys.createdAt));\n  }\n\n  async getApiKeyByKey(key: string): Promise<ApiKey | undefined> {\n    const [apiKey] = await db\n      .select()\n      .from(apiKeys)\n      .where(eq(apiKeys.key, key));\n    \n    return apiKey;\n  }\n\n  async createApiKey(apiKey: InsertApiKey): Promise<ApiKey> {\n    const [newKey] = await db\n      .insert(apiKeys)\n      .values(apiKey)\n      .returning();\n    \n    return newKey;\n  }\n\n  async updateApiKeyLastUsed(keyId: number): Promise<void> {\n    await db\n      .update(apiKeys)\n      .set({ lastUsedAt: new Date() })\n      .where(eq(apiKeys.id, keyId));\n  }\n\n  async deleteApiKey(keyId: number, userId: string): Promise<void> {\n    await db\n      .delete(apiKeys)\n      .where(and(\n        eq(apiKeys.id, keyId),\n        eq(apiKeys.userId, userId)\n      ));\n  }\n\n  async logApiUsage(usage: InsertApiUsage): Promise<void> {\n    await db.insert(apiUsage).values(usage);\n  }\n\n  async getApiUsageStats(apiKeyId: number, hours: number = 24): Promise<any> {\n    const since = new Date();\n    since.setHours(since.getHours() - hours);\n    \n    const usage = await db\n      .select({\n        endpoint: apiUsage.endpoint,\n        method: apiUsage.method,\n        count: sql<number>`COUNT(*)`,\n        avgResponseTime: sql<number>`AVG(${apiUsage.responseTime})`,\n      })\n      .from(apiUsage)\n      .where(and(\n        eq(apiUsage.apiKeyId, apiKeyId),\n        sql`${apiUsage.timestamp} >= ${since}`\n      ))\n      .groupBy(apiUsage.endpoint, apiUsage.method);\n    \n    return usage;\n  }\n\n  // Webhook operations\n  async getUserWebhooks(userId: string): Promise<Webhook[]> {\n    return await db\n      .select()\n      .from(webhooks)\n      .where(eq(webhooks.userId, userId))\n      .orderBy(desc(webhooks.createdAt));\n  }\n\n  async createWebhook(webhook: InsertWebhook): Promise<Webhook> {\n    const [newWebhook] = await db\n      .insert(webhooks)\n      .values(webhook)\n      .returning();\n    \n    return newWebhook;\n  }\n\n  async updateWebhook(webhookId: number, userId: string, updates: Partial<Webhook>): Promise<void> {\n    await db\n      .update(webhooks)\n      .set(updates)\n      .where(and(\n        eq(webhooks.id, webhookId),\n        eq(webhooks.userId, userId)\n      ));\n  }\n\n  async deleteWebhook(webhookId: number, userId: string): Promise<void> {\n    await db\n      .delete(webhooks)\n      .where(and(\n        eq(webhooks.id, webhookId),\n        eq(webhooks.userId, userId)\n      ));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":39195},"server/stripe.ts":{"content":"import Stripe from \"stripe\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n}\n\nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-07-30.basil\",\n});\n\n// Subscription plans configuration\nexport const SUBSCRIPTION_PLANS = {\n  pro: {\n    name: \"Pro\",\n    price: 1900, // $19.00 in cents\n    currency: \"usd\",\n    interval: \"month\",\n    features: {\n      analysisLimit: -1, // unlimited\n      apiCalls: 1000,\n      pdfExport: true,\n      prioritySupport: false,\n      customCriteria: false,\n      bulkAnalysis: false,\n    }\n  },\n  enterprise: {\n    name: \"Enterprise\", \n    price: 9900, // $99.00 in cents\n    currency: \"usd\",\n    interval: \"month\",\n    features: {\n      analysisLimit: -1, // unlimited\n      apiCalls: -1, // unlimited\n      pdfExport: true,\n      prioritySupport: true,\n      customCriteria: true,\n      bulkAnalysis: true,\n    }\n  }\n} as const;\n\nexport type SubscriptionTier = 'free' | 'pro' | 'enterprise';\n\nexport function getSubscriptionLimits(tier: SubscriptionTier) {\n  switch (tier) {\n    case 'free':\n      return {\n        analysisLimit: 5, // per day\n        apiCalls: 0,\n        pdfExport: false,\n        prioritySupport: false,\n        customCriteria: false,\n        bulkAnalysis: false,\n      };\n    case 'pro':\n      return SUBSCRIPTION_PLANS.pro.features;\n    case 'enterprise':\n      return SUBSCRIPTION_PLANS.enterprise.features;\n    default:\n      return getSubscriptionLimits('free');\n  }\n}\n\nexport async function createOrRetrieveStripeCustomer(email: string, userId: string) {\n  try {\n    // Try to find existing customer\n    const existingCustomers = await stripe.customers.list({\n      email: email,\n      limit: 1,\n    });\n\n    if (existingCustomers.data.length > 0) {\n      return existingCustomers.data[0];\n    }\n\n    // Create new customer\n    const customer = await stripe.customers.create({\n      email: email,\n      metadata: {\n        userId: userId,\n      },\n    });\n\n    return customer;\n  } catch (error) {\n    console.error(\"Error creating/retrieving Stripe customer:\", error);\n    throw error;\n  }\n}\n\nexport async function createSubscription(customerId: string, planType: keyof typeof SUBSCRIPTION_PLANS) {\n  try {\n    const plan = SUBSCRIPTION_PLANS[planType];\n    \n    // Create a price for this subscription\n    const price = await stripe.prices.create({\n      unit_amount: plan.price,\n      currency: plan.currency,\n      recurring: {\n        interval: plan.interval,\n      },\n      product_data: {\n        name: `RepoAnalyzer ${plan.name} Plan`,\n      },\n    });\n\n    // Create the subscription\n    const subscription = await stripe.subscriptions.create({\n      customer: customerId,\n      items: [{\n        price: price.id,\n      }],\n      payment_behavior: 'default_incomplete',\n      payment_settings: {\n        save_default_payment_method: 'on_subscription',\n      },\n      expand: ['latest_invoice.payment_intent'],\n    });\n\n    return subscription;\n  } catch (error) {\n    console.error(\"Error creating subscription:\", error);\n    throw error;\n  }\n}","size_bytes":3107},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  real,\n  boolean,\n  serial,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from 'drizzle-orm';\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  subscriptionTier: varchar(\"subscription_tier\").default(\"free\"), // free, pro, enterprise\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  subscriptionStatus: varchar(\"subscription_status\").default(\"inactive\"), // active, inactive, cancelled, past_due\n  subscriptionEndDate: timestamp(\"subscription_end_date\"),\n  analysisCount: integer(\"analysis_count\").default(0), // Daily analysis count for rate limiting\n  lastAnalysisReset: timestamp(\"last_analysis_reset\").defaultNow(),\n  apiKey: varchar(\"api_key\"), // For API access\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Repositories table\nexport const repositories = pgTable(\"repositories\", {\n  id: varchar(\"id\").primaryKey(), // GitHub repo ID\n  name: varchar(\"name\").notNull(),\n  fullName: varchar(\"full_name\").notNull().unique(),\n  owner: varchar(\"owner\").notNull(),\n  description: text(\"description\"),\n  language: varchar(\"language\"),\n  stars: integer(\"stars\").default(0),\n  forks: integer(\"forks\").default(0),\n  watchers: integer(\"watchers\").default(0),\n  size: integer(\"size\").default(0),\n  isPrivate: boolean(\"is_private\").default(false),\n  htmlUrl: varchar(\"html_url\").notNull(),\n  cloneUrl: varchar(\"clone_url\").notNull(),\n  languages: jsonb(\"languages\"), // Object with language percentages\n  topics: text(\"topics\").array(), // Array of topic strings\n  lastAnalyzed: timestamp(\"last_analyzed\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Repository analyses table\nexport const repositoryAnalyses = pgTable(\"repository_analyses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  repositoryId: varchar(\"repository_id\").notNull().references(() => repositories.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  originality: real(\"originality\").notNull(),\n  completeness: real(\"completeness\").notNull(),\n  marketability: real(\"marketability\").notNull(),\n  monetization: real(\"monetization\").notNull(),\n  usefulness: real(\"usefulness\").notNull(),\n  overallScore: real(\"overall_score\").notNull(),\n  summary: text(\"summary\").notNull(),\n  strengths: text(\"strengths\").array(),\n  weaknesses: text(\"weaknesses\").array(),\n  recommendations: text(\"recommendations\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Saved repositories (user bookmarks)\nexport const savedRepositories = pgTable(\"saved_repositories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  repositoryId: varchar(\"repository_id\").notNull().references(() => repositories.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Similar repositories\nexport const similarRepositories = pgTable(\"similar_repositories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  repositoryId: varchar(\"repository_id\").notNull().references(() => repositories.id),\n  similarRepositoryId: varchar(\"similar_repository_id\").notNull().references(() => repositories.id),\n  similarity: real(\"similarity\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  savedRepositories: many(savedRepositories),\n  analyses: many(repositoryAnalyses),\n}));\n\nexport const repositoriesRelations = relations(repositories, ({ many }) => ({\n  analyses: many(repositoryAnalyses),\n  savedBy: many(savedRepositories),\n  similarRepositories: many(similarRepositories, { relationName: \"repository_similar\" }),\n  similarTo: many(similarRepositories, { relationName: \"similar_repository\" }),\n}));\n\nexport const repositoryAnalysesRelations = relations(repositoryAnalyses, ({ one }) => ({\n  repository: one(repositories, {\n    fields: [repositoryAnalyses.repositoryId],\n    references: [repositories.id],\n  }),\n  user: one(users, {\n    fields: [repositoryAnalyses.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const savedRepositoriesRelations = relations(savedRepositories, ({ one }) => ({\n  user: one(users, {\n    fields: [savedRepositories.userId],\n    references: [users.id],\n  }),\n  repository: one(repositories, {\n    fields: [savedRepositories.repositoryId],\n    references: [repositories.id],\n  }),\n}));\n\nexport const similarRepositoriesRelations = relations(similarRepositories, ({ one }) => ({\n  repository: one(repositories, {\n    fields: [similarRepositories.repositoryId],\n    references: [repositories.id],\n    relationName: \"repository_similar\",\n  }),\n  similarRepository: one(repositories, {\n    fields: [similarRepositories.similarRepositoryId],\n    references: [repositories.id],\n    relationName: \"similar_repository\",\n  }),\n}));\n\n// Insert schemas\nexport const insertRepositorySchema = createInsertSchema(repositories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastAnalyzed: true,\n});\n\nexport const insertAnalysisSchema = createInsertSchema(repositoryAnalyses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSavedRepositorySchema = createInsertSchema(savedRepositories).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Bookmarks table for saving repositories\nexport const bookmarks = pgTable(\"bookmarks\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  repositoryId: varchar(\"repository_id\").notNull().references(() => repositories.id, { onDelete: \"cascade\" }),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_bookmarks_user\").on(table.userId),\n  index(\"idx_bookmarks_repository\").on(table.repositoryId),\n]);\n\nexport type Bookmark = typeof bookmarks.$inferSelect;\nexport type InsertBookmark = typeof bookmarks.$inferInsert;\n\n// Tags table for organizing repositories\nexport const tags = pgTable(\"tags\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\", { length: 50 }).notNull(),\n  color: varchar(\"color\", { length: 7 }).default(\"#FF6B35\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_tags_user\").on(table.userId),\n  index(\"idx_tags_name\").on(table.name),\n]);\n\nexport type Tag = typeof tags.$inferSelect;\nexport type InsertTag = typeof tags.$inferInsert;\n\n// Repository tags junction table\nexport const repositoryTags = pgTable(\"repository_tags\", {\n  id: serial(\"id\").primaryKey(),\n  repositoryId: varchar(\"repository_id\").notNull().references(() => repositories.id, { onDelete: \"cascade\" }),\n  tagId: integer(\"tag_id\").notNull().references(() => tags.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_repository_tags_repo\").on(table.repositoryId),\n  index(\"idx_repository_tags_tag\").on(table.tagId),\n  index(\"idx_repository_tags_user\").on(table.userId),\n]);\n\nexport type RepositoryTag = typeof repositoryTags.$inferSelect;\nexport type InsertRepositoryTag = typeof repositoryTags.$inferInsert;\n\n// Collections for organizing repositories\nexport const collections = pgTable(\"collections\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  isPublic: boolean(\"is_public\").default(false),\n  icon: varchar(\"icon\", { length: 50 }).default(\"folder\"),\n  color: varchar(\"color\", { length: 7 }).default(\"#FF6B35\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_collections_user\").on(table.userId),\n  index(\"idx_collections_public\").on(table.isPublic),\n]);\n\nexport type Collection = typeof collections.$inferSelect;\nexport type InsertCollection = typeof collections.$inferInsert;\n\n// Collection items junction table\nexport const collectionItems = pgTable(\"collection_items\", {\n  id: serial(\"id\").primaryKey(),\n  collectionId: integer(\"collection_id\").notNull().references(() => collections.id, { onDelete: \"cascade\" }),\n  repositoryId: varchar(\"repository_id\").notNull().references(() => repositories.id, { onDelete: \"cascade\" }),\n  position: integer(\"position\").default(0),\n  notes: text(\"notes\"),\n  addedAt: timestamp(\"added_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_collection_items_collection\").on(table.collectionId),\n  index(\"idx_collection_items_repository\").on(table.repositoryId),\n]);\n\nexport type CollectionItem = typeof collectionItems.$inferSelect;\nexport type InsertCollectionItem = typeof collectionItems.$inferInsert;\n\n// User preferences for AI recommendations\nexport const userPreferences = pgTable(\"user_preferences\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }).unique(),\n  preferredLanguages: text(\"preferred_languages\").array().default([]),\n  preferredTopics: text(\"preferred_topics\").array().default([]),\n  excludedTopics: text(\"excluded_topics\").array().default([]),\n  minStars: integer(\"min_stars\").default(0),\n  maxAge: varchar(\"max_age\", { length: 20 }).default(\"any\"),\n  aiRecommendations: boolean(\"ai_recommendations\").default(true),\n  emailNotifications: boolean(\"email_notifications\").default(false),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_user_preferences_user\").on(table.userId),\n]);\n\nexport type UserPreference = typeof userPreferences.$inferSelect;\nexport type InsertUserPreference = typeof userPreferences.$inferInsert;\n\n// User activity tracking for recommendations\nexport const userActivities = pgTable(\"user_activities\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  action: varchar(\"action\", { length: 50 }).notNull(), // viewed, analyzed, bookmarked, shared\n  repositoryId: varchar(\"repository_id\").references(() => repositories.id, { onDelete: \"cascade\" }),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_user_activities_user\").on(table.userId),\n  index(\"idx_user_activities_action\").on(table.action),\n  index(\"idx_user_activities_repository\").on(table.repositoryId),\n]);\n\nexport type UserActivity = typeof userActivities.$inferSelect;\nexport type InsertUserActivity = typeof userActivities.$inferInsert;\n\n// Tracked repositories for real-time monitoring\nexport const trackedRepositories = pgTable(\"tracked_repositories\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  repositoryId: varchar(\"repository_id\").notNull().references(() => repositories.id, { onDelete: \"cascade\" }),\n  trackingType: varchar(\"tracking_type\", { length: 50 }).notNull().default(\"all\"), // all, stars, releases, commits, issues\n  lastChecked: timestamp(\"last_checked\").defaultNow(),\n  lastStars: integer(\"last_stars\").default(0),\n  lastForks: integer(\"last_forks\").default(0),\n  lastCommitHash: varchar(\"last_commit_hash\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_tracked_repositories_user\").on(table.userId),\n  index(\"idx_tracked_repositories_repo\").on(table.repositoryId),\n  index(\"idx_tracked_repositories_active\").on(table.isActive),\n]);\n\nexport type TrackedRepository = typeof trackedRepositories.$inferSelect;\nexport type InsertTrackedRepository = typeof trackedRepositories.$inferInsert;\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  type: varchar(\"type\", { length: 50 }).notNull(), // repo_update, star_milestone, new_release, recommendation\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  message: text(\"message\").notNull(),\n  repositoryId: varchar(\"repository_id\").references(() => repositories.id, { onDelete: \"cascade\" }),\n  metadata: jsonb(\"metadata\"), // Additional data like old/new values\n  isRead: boolean(\"is_read\").default(false),\n  readAt: timestamp(\"read_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_notifications_user\").on(table.userId),\n  index(\"idx_notifications_read\").on(table.isRead),\n  index(\"idx_notifications_type\").on(table.type),\n  index(\"idx_notifications_created\").on(table.createdAt),\n]);\n\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = typeof notifications.$inferInsert;\n\n// Comments table for repository discussions\nexport const comments = pgTable(\"comments\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  repositoryId: varchar(\"repository_id\").notNull().references(() => repositories.id, { onDelete: \"cascade\" }),\n  content: text(\"content\").notNull(),\n  parentId: integer(\"parent_id\"), // For threaded comments\n  likes: integer(\"likes\").default(0),\n  isEdited: boolean(\"is_edited\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_comments_user\").on(table.userId),\n  index(\"idx_comments_repository\").on(table.repositoryId),\n  index(\"idx_comments_parent\").on(table.parentId),\n  index(\"idx_comments_created\").on(table.createdAt),\n]);\n\nexport type Comment = typeof comments.$inferSelect;\nexport type InsertComment = typeof comments.$inferInsert;\n\n// Comment likes junction table\nexport const commentLikes = pgTable(\"comment_likes\", {\n  id: serial(\"id\").primaryKey(),\n  commentId: integer(\"comment_id\").notNull().references(() => comments.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_comment_likes_comment\").on(table.commentId),\n  index(\"idx_comment_likes_user\").on(table.userId),\n]);\n\nexport type CommentLike = typeof commentLikes.$inferSelect;\nexport type InsertCommentLike = typeof commentLikes.$inferInsert;\n\n// Ratings table for repository ratings\nexport const ratings = pgTable(\"ratings\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  repositoryId: varchar(\"repository_id\").notNull().references(() => repositories.id, { onDelete: \"cascade\" }),\n  rating: integer(\"rating\").notNull(), // 1-5 stars\n  review: text(\"review\"),\n  helpfulCount: integer(\"helpful_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_ratings_user\").on(table.userId),\n  index(\"idx_ratings_repository\").on(table.repositoryId),\n  index(\"idx_ratings_rating\").on(table.rating),\n  index(\"idx_ratings_created\").on(table.createdAt),\n]);\n\nexport type Rating = typeof ratings.$inferSelect;\nexport type InsertRating = typeof ratings.$inferInsert;\n\n// Rating helpfulness junction table\nexport const ratingHelpful = pgTable(\"rating_helpful\", {\n  id: serial(\"id\").primaryKey(),\n  ratingId: integer(\"rating_id\").notNull().references(() => ratings.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_rating_helpful_rating\").on(table.ratingId),\n  index(\"idx_rating_helpful_user\").on(table.userId),\n]);\n\nexport type RatingHelpful = typeof ratingHelpful.$inferSelect;\nexport type InsertRatingHelpful = typeof ratingHelpful.$inferInsert;\n\n// Teams table for collaboration\nexport const teams = pgTable(\"teams\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  ownerId: varchar(\"owner_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_teams_owner\").on(table.ownerId),\n  index(\"idx_teams_created\").on(table.createdAt),\n]);\n\nexport type Team = typeof teams.$inferSelect;\nexport type InsertTeam = typeof teams.$inferInsert;\n\n// Team members junction table\nexport const teamMembers = pgTable(\"team_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").notNull().references(() => teams.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  role: varchar(\"role\", { length: 50 }).notNull().default('member'), // owner, admin, member, viewer\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_team_members_team\").on(table.teamId),\n  index(\"idx_team_members_user\").on(table.userId),\n  index(\"idx_team_members_role\").on(table.role),\n]);\n\nexport type TeamMember = typeof teamMembers.$inferSelect;\nexport type InsertTeamMember = typeof teamMembers.$inferInsert;\n\n// Team invitations table\nexport const teamInvitations = pgTable(\"team_invitations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").notNull().references(() => teams.id, { onDelete: \"cascade\" }),\n  email: varchar(\"email\", { length: 255 }).notNull(),\n  role: varchar(\"role\", { length: 50 }).notNull().default('member'),\n  invitedBy: varchar(\"invited_by\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  token: varchar(\"token\", { length: 255 }).notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  acceptedAt: timestamp(\"accepted_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_team_invitations_team\").on(table.teamId),\n  index(\"idx_team_invitations_email\").on(table.email),\n  index(\"idx_team_invitations_token\").on(table.token),\n]);\n\nexport type TeamInvitation = typeof teamInvitations.$inferSelect;\nexport type InsertTeamInvitation = typeof teamInvitations.$inferInsert;\n\n// Shared analyses table for team collaboration\nexport const sharedAnalyses = pgTable(\"shared_analyses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  analysisId: varchar(\"analysis_id\").notNull().references(() => repositoryAnalyses.id, { onDelete: \"cascade\" }),\n  teamId: varchar(\"team_id\").notNull().references(() => teams.id, { onDelete: \"cascade\" }),\n  sharedBy: varchar(\"shared_by\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  permissions: varchar(\"permissions\", { length: 50 }).notNull().default('view'), // view, comment, edit\n  sharedAt: timestamp(\"shared_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_shared_analyses_analysis\").on(table.analysisId),\n  index(\"idx_shared_analyses_team\").on(table.teamId),\n  index(\"idx_shared_analyses_shared_by\").on(table.sharedBy),\n]);\n\nexport type SharedAnalysis = typeof sharedAnalyses.$inferSelect;\nexport type InsertSharedAnalysis = typeof sharedAnalyses.$inferInsert;\n\n// API Keys for developer access\nexport const apiKeys = pgTable(\"api_keys\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  key: varchar(\"key\", { length: 64 }).notNull().unique(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  permissions: jsonb(\"permissions\").default(['read']).$type<string[]>(), // ['read', 'write', 'delete']\n  rateLimit: integer(\"rate_limit\").default(1000), // requests per hour\n  lastUsedAt: timestamp(\"last_used_at\"),\n  expiresAt: timestamp(\"expires_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_api_keys_user\").on(table.userId),\n  index(\"idx_api_keys_key\").on(table.key),\n]);\n\nexport type ApiKey = typeof apiKeys.$inferSelect;\nexport type InsertApiKey = typeof apiKeys.$inferInsert;\n\n// API Usage tracking\nexport const apiUsage = pgTable(\"api_usage\", {\n  id: serial(\"id\").primaryKey(),\n  apiKeyId: integer(\"api_key_id\").notNull().references(() => apiKeys.id, { onDelete: \"cascade\" }),\n  endpoint: varchar(\"endpoint\", { length: 255 }).notNull(),\n  method: varchar(\"method\", { length: 10 }).notNull(),\n  statusCode: integer(\"status_code\"),\n  responseTime: integer(\"response_time\"), // in milliseconds\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n}, (table) => [\n  index(\"idx_api_usage_key\").on(table.apiKeyId),\n  index(\"idx_api_usage_timestamp\").on(table.timestamp),\n]);\n\nexport type ApiUsage = typeof apiUsage.$inferSelect;\nexport type InsertApiUsage = typeof apiUsage.$inferInsert;\n\n// Webhook configurations\nexport const webhooks = pgTable(\"webhooks\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  url: varchar(\"url\", { length: 500 }).notNull(),\n  events: jsonb(\"events\").default(['repository.analyzed']).$type<string[]>(), // Event types to trigger\n  secret: varchar(\"secret\", { length: 64 }).notNull(), // For signature verification\n  active: boolean(\"active\").default(true),\n  lastTriggeredAt: timestamp(\"last_triggered_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_webhooks_user\").on(table.userId),\n  index(\"idx_webhooks_active\").on(table.active),\n]);\n\nexport type Webhook = typeof webhooks.$inferSelect;\nexport type InsertWebhook = typeof webhooks.$inferInsert;\n\n// Add relations for new tables\nexport const trackedRepositoriesRelations = relations(trackedRepositories, ({ one }) => ({\n  user: one(users, {\n    fields: [trackedRepositories.userId],\n    references: [users.id],\n  }),\n  repository: one(repositories, {\n    fields: [trackedRepositories.repositoryId],\n    references: [repositories.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n  repository: one(repositories, {\n    fields: [notifications.repositoryId],\n    references: [repositories.id],\n  }),\n}));\n\nexport type Repository = typeof repositories.$inferSelect;\nexport type InsertRepository = z.infer<typeof insertRepositorySchema>;\nexport type RepositoryAnalysis = typeof repositoryAnalyses.$inferSelect;\nexport type InsertAnalysis = z.infer<typeof insertAnalysisSchema>;\nexport type SavedRepository = typeof savedRepositories.$inferSelect;\nexport type InsertSavedRepository = z.infer<typeof insertSavedRepositorySchema>;\nexport type SimilarRepository = typeof similarRepositories.$inferSelect;\n","size_bytes":23713},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ThemeProvider } from \"@/contexts/theme-context\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Search from \"@/pages/search\";\nimport Analyze from \"@/pages/analyze\";\nimport RepositoryDetail from \"@/pages/repository-detail\";\nimport Compare from \"@/pages/compare\";\nimport Profile from \"@/pages/profile\";\nimport Discover from \"@/pages/discover\";\nimport Docs from \"@/pages/docs\";\nimport Pricing from \"@/pages/pricing\";\nimport Checkout from \"@/pages/checkout\";\nimport PaymentSuccess from \"@/pages/payment-success\";\nimport BatchAnalyze from \"@/pages/batch-analyze\";\nimport Collections from \"@/pages/collections\";\nimport Analytics from \"@/pages/analytics\";\nimport Teams from \"@/pages/teams\";\nimport Developer from \"@/pages/developer\";\nimport AdvancedAnalytics from \"@/pages/advanced-analytics\";\nimport Integrations from \"@/pages/integrations\";\nimport CodeReview from \"@/pages/code-review\";\nimport { AIAssistant } from \"@/components/ai-assistant\";\nimport OnboardingTour from \"@/components/onboarding-tour\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {/* Public routes - available to everyone */}\n      <Route path=\"/analyze\" component={Analyze} />\n      <Route path=\"/batch-analyze\" component={BatchAnalyze} />\n      <Route path=\"/search\" component={Search} />\n      <Route path=\"/repository/:id\" component={RepositoryDetail} />\n      <Route path=\"/compare\" component={Compare} />\n      <Route path=\"/discover\" component={Discover} />\n      <Route path=\"/docs\" component={Docs} />\n      <Route path=\"/pricing\" component={Pricing} />\n      <Route path=\"/checkout\" component={Checkout} />\n      <Route path=\"/payment-success\" component={PaymentSuccess} />\n      <Route path=\"/developer\" component={Developer} />\n      <Route path=\"/advanced-analytics\" component={AdvancedAnalytics} />\n      <Route path=\"/integrations\" component={Integrations} />\n      <Route path=\"/code-review\" component={CodeReview} />\n      \n      {/* Home page - shows Landing for unauthenticated, Home for authenticated */}\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <Route path=\"/\" component={Home} />\n      )}\n      \n      {/* Protected routes - only for authenticated users */}\n      {isAuthenticated && (\n        <>\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/collections\" component={Collections} />\n          <Route path=\"/analytics\" component={Analytics} />\n          <Route path=\"/teams\" component={Teams} />\n        </>\n      )}\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n          <AIAssistant />\n          <OnboardingTour />\n        </TooltipProvider>\n      </QueryClientProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3339},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Light theme colors */\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 47%, 11%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 47%, 11%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 47%, 11%);\n  --primary: hsl(18, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(0, 90%, 55%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(210, 40%, 96.1%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(16, 100%, 60%);\n  --accent-foreground: hsl(222, 47%, 11%);\n  --destructive: hsl(0, 84.2%, 50%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(18, 100%, 50%);\n  --chart-1: hsl(18, 100%, 50%);\n  --chart-2: hsl(173, 58%, 45%);\n  --chart-3: hsl(197, 37%, 30%);\n  --chart-4: hsl(43, 74%, 55%);\n  --chart-5: hsl(27, 87%, 57%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222, 47%, 11%);\n  --sidebar-primary: hsl(18, 100%, 50%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96.1%);\n  --sidebar-accent-foreground: hsl(222, 47%, 11%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(18, 100%, 50%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;\n  --radius: 0.75rem;\n  --dark: hsl(0, 0%, 3.9%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(0, 0%, 6.7%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(0, 0%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(18, 100%, 60.2%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(0, 100%, 60%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(0, 0%, 14.9%);\n  --muted-foreground: hsl(0, 0%, 63.9%);\n  --accent: hsl(16, 100%, 69.8%);\n  --accent-foreground: hsl(0, 0%, 9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(0, 0%, 13.3%);\n  --input: hsl(0, 0%, 13.3%);\n  --ring: hsl(18, 100%, 60.2%);\n  --chart-1: hsl(18, 100%, 60.2%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(0, 0%, 6.7%);\n  --sidebar-foreground: hsl(0, 0%, 98%);\n  --sidebar-primary: hsl(18, 100%, 60.2%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(0, 0%, 14.9%);\n  --sidebar-accent-foreground: hsl(0, 0%, 98%);\n  --sidebar-border: hsl(0, 0%, 13.3%);\n  --sidebar-ring: hsl(18, 100%, 60.2%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .gradient-text {\n    background: linear-gradient(135deg, #FF6B35, #FF3333);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .gradient-border {\n    background: linear-gradient(135deg, #FF6B35, #FF3333, #FF8C69);\n    padding: 1px;\n    border-radius: 12px;\n  }\n\n  .neon-glow {\n    box-shadow: 0 0 20px rgba(255, 107, 53, 0.3), 0 0 40px rgba(255, 51, 51, 0.2);\n  }\n\n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n\n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  .line-clamp-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n\n@keyframes glow {\n  from { \n    box-shadow: 0 0 20px rgba(255, 107, 53, 0.3); \n  }\n  to { \n    box-shadow: 0 0 30px rgba(255, 107, 53, 0.5); \n  }\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px); \n  }\n  50% { \n    transform: translateY(-10px); \n  }\n}\n\n@keyframes dissolve {\n  0% {\n    opacity: 1;\n    transform: scale(1);\n    filter: blur(0px);\n  }\n  50% {\n    opacity: 0.5;\n    transform: scale(0.8);\n    filter: blur(2px);\n  }\n  100% {\n    opacity: 0;\n    transform: scale(0.5);\n    filter: blur(8px);\n  }\n}\n\n.tag-dissolve {\n  animation: dissolve 0.4s ease-out forwards;\n}\n\n/* Animated Hover Effects */\n.hover-lift {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.hover-lift:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 20px 40px rgba(255, 107, 53, 0.2);\n}\n\n.hover-scale {\n  transition: transform 0.2s ease-in-out;\n}\n\n.hover-scale:hover {\n  transform: scale(1.02);\n}\n\n.hover-glow {\n  transition: all 0.3s ease;\n  position: relative;\n}\n\n.hover-glow::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(135deg, #FF6B35, #FF3333);\n  opacity: 0;\n  border-radius: inherit;\n  transition: opacity 0.3s ease;\n  z-index: -1;\n}\n\n.hover-glow:hover::before {\n  opacity: 0.1;\n}\n\n.hover-border-glow {\n  transition: all 0.3s ease;\n  position: relative;\n}\n\n.hover-border-glow::after {\n  content: '';\n  position: absolute;\n  top: -2px;\n  left: -2px;\n  right: -2px;\n  bottom: -2px;\n  background: linear-gradient(135deg, #FF6B35, #FF3333, #FF8C69);\n  border-radius: inherit;\n  opacity: 0;\n  z-index: -1;\n  transition: opacity 0.3s ease;\n}\n\n.hover-border-glow:hover::after {\n  opacity: 0.5;\n  animation: borderGlowPulse 2s ease-in-out infinite;\n}\n\n@keyframes borderGlowPulse {\n  0%, 100% {\n    opacity: 0.5;\n  }\n  50% {\n    opacity: 0.8;\n  }\n}\n\n.hover-shine {\n  position: relative;\n  overflow: hidden;\n}\n\n.hover-shine::before {\n  content: '';\n  position: absolute;\n  top: -50%;\n  left: -50%;\n  width: 200%;\n  height: 200%;\n  background: linear-gradient(\n    45deg,\n    transparent 30%,\n    rgba(255, 255, 255, 0.1) 50%,\n    transparent 70%\n  );\n  transform: rotate(45deg) translateX(-100%);\n  transition: transform 0.6s;\n}\n\n.hover-shine:hover::before {\n  transform: rotate(45deg) translateX(100%);\n}\n\n.button-hover {\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.button-hover::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-radius: 50%;\n  background: rgba(255, 255, 255, 0.2);\n  transform: translate(-50%, -50%);\n  transition: width 0.6s, height 0.6s;\n}\n\n.button-hover:hover::after {\n  width: 300px;\n  height: 300px;\n}\n\n/* Card hover animations */\n.card-hover {\n  transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n}\n\n.card-hover:hover {\n  transform: translateY(-8px) scale(1.02);\n  box-shadow: \n    0 20px 40px rgba(255, 107, 53, 0.3),\n    0 0 0 1px rgba(255, 107, 53, 0.2);\n}\n\n/* Neon text glow effect */\n.neon-text-glow {\n  transition: all 0.3s ease;\n}\n\n.neon-text-glow:hover {\n  text-shadow: \n    0 0 10px currentColor,\n    0 0 20px currentColor,\n    0 0 30px currentColor;\n}\n\n/* Smooth color transitions */\n.color-transition {\n  transition: color 0.3s ease, background-color 0.3s ease, border-color 0.3s ease;\n}\n\n/* ===== MICRO-INTERACTIONS ===== */\n\n/* Button micro-interactions */\n.button-scale {\n  transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.button-scale:hover {\n  transform: scale(1.05);\n}\n\n.button-scale:active {\n  transform: scale(0.98);\n}\n\n/* Smooth fade transitions */\n.fade-in {\n  animation: fadeIn 0.3s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(4px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Loading skeleton animation */\n.skeleton {\n  background: linear-gradient(\n    90deg,\n    hsl(var(--muted)) 0%,\n    hsl(var(--muted-foreground) / 0.1) 50%,\n    hsl(var(--muted)) 100%\n  );\n  background-size: 200% 100%;\n  animation: skeleton-loading 1.5s ease-in-out infinite;\n  border-radius: 4px;\n}\n\n@keyframes skeleton-loading {\n  0% {\n    background-position: 200% 0;\n  }\n  100% {\n    background-position: -200% 0;\n  }\n}\n\n/* Progress bar animation */\n.progress-animate {\n  transition: width 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/* Card hover lift effect */\n.card-lift {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.card-lift:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 12px 24px -10px rgba(0, 0, 0, 0.2);\n}\n\n/* Input focus animation */\n.input-focus {\n  transition: all 0.2s ease;\n}\n\n.input-focus:focus {\n  transform: scale(1.01);\n  box-shadow: 0 0 0 3px hsl(var(--primary) / 0.1);\n}\n\n/* Pulse animation for notifications */\n@keyframes pulse {\n  0%, 100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n  50% {\n    transform: scale(1.05);\n    opacity: 0.9;\n  }\n}\n\n.pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Smooth number transitions */\n.number-transition {\n  transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/* Badge bounce animation */\n@keyframes bounce {\n  0%, 100% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-4px);\n  }\n}\n\n.bounce-on-hover:hover {\n  animation: bounce 0.5s ease-in-out;\n}\n\n/* Ripple effect */\n.ripple {\n  position: relative;\n  overflow: hidden;\n}\n\n.ripple::before {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-radius: 50%;\n  background: rgba(255, 255, 255, 0.5);\n  transform: translate(-50%, -50%);\n  transition: width 0.6s, height 0.6s;\n}\n\n.ripple:active::before {\n  width: 300px;\n  height: 300px;\n}\n\n/* Slide in animation */\n@keyframes slideIn {\n  from {\n    transform: translateX(-100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n.slide-in {\n  animation: slideIn 0.3s ease-out;\n}\n\n/* Spin animation for loading */\n@keyframes spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.spin {\n  animation: spin 1s linear infinite;\n}\n\n/* Shake animation for errors */\n@keyframes shake {\n  0%, 100% {\n    transform: translateX(0);\n  }\n  10%, 30%, 50%, 70%, 90% {\n    transform: translateX(-2px);\n  }\n  20%, 40%, 60%, 80% {\n    transform: translateX(2px);\n  }\n}\n\n.shake {\n  animation: shake 0.5s ease-in-out;\n}\n\n/* Smooth expand/collapse */\n.expand-collapse {\n  transition: height 0.3s ease, opacity 0.3s ease;\n  overflow: hidden;\n}\n","size_bytes":10322},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ai-assistant.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Message {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n}\n\nexport function AIAssistant() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      role: 'assistant',\n      content: \"Hello! I'm your AI assistant. I can help you understand RepoAnalyzer's features, guide you through analysis, and answer any questions about repository metrics. How can I help you today?\",\n      timestamp: new Date()\n    }\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  const askAIMutation = useMutation({\n    mutationFn: async (question: string) => {\n      const response = await fetch('/api/ai/ask', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ question }),\n      });\n      if (!response.ok) throw new Error('Failed to get AI response');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setMessages(prev => [...prev, {\n        id: Date.now().toString(),\n        role: 'assistant',\n        content: data.answer,\n        timestamp: new Date()\n      }]);\n      setIsTyping(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to get AI response. Please try again.\",\n        variant: \"destructive\",\n      });\n      setIsTyping(false);\n    }\n  });\n\n  const handleSend = () => {\n    if (!input.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: input,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    setIsTyping(true);\n    askAIMutation.mutate(input);\n  };\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  return (\n    <>\n      {/* Floating Action Button */}\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        {!isOpen && (\n          <button\n            onClick={() => setIsOpen(true)}\n            className=\"group relative w-16 h-16 rounded-full bg-gradient-to-r from-primary to-secondary p-[2px] shadow-2xl hover:shadow-primary/50 transition-all duration-300 hover:scale-110\"\n            data-testid=\"button-ai-assistant\"\n            data-tour=\"ai-assistant\"\n          >\n            <div className=\"w-full h-full rounded-full bg-dark flex items-center justify-center\">\n              <div className=\"relative\">\n                <i className=\"fas fa-robot text-2xl text-white\"></i>\n                <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n              </div>\n            </div>\n            <div className=\"absolute -top-12 right-0 bg-gray-900 text-white text-sm px-3 py-1 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n              AI Assistant\n            </div>\n          </button>\n        )}\n      </div>\n\n      {/* Holographic AI Assistant Panel */}\n      {isOpen && (\n        <div className=\"fixed bottom-6 right-6 z-50 w-96 h-[600px]\">\n          <div className=\"relative w-full h-full\">\n            {/* Holographic Background Effect */}\n            <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500/10 via-purple-500/10 to-pink-500/10 rounded-2xl animate-pulse\"></div>\n            <div className=\"absolute inset-0 bg-gradient-to-tr from-cyan-500/10 via-transparent to-yellow-500/10 rounded-2xl animate-pulse animation-delay-1000\"></div>\n            \n            {/* Holographic Border */}\n            <div className=\"absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 p-[1px] animate-gradient\">\n              <div className=\"w-full h-full rounded-2xl bg-gray-900/95 backdrop-blur-xl\">\n                {/* Holographic Particles */}\n                <div className=\"absolute inset-0 overflow-hidden rounded-2xl\">\n                  <div className=\"particle particle-1\"></div>\n                  <div className=\"particle particle-2\"></div>\n                  <div className=\"particle particle-3\"></div>\n                  <div className=\"particle particle-4\"></div>\n                </div>\n\n                {/* Header */}\n                <div className=\"relative flex items-center justify-between p-4 border-b border-gray-800/50\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"relative\">\n                      <div className=\"w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center animate-pulse\">\n                        <i className=\"fas fa-robot text-white\"></i>\n                      </div>\n                      <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full\"></div>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-white\">AI Assistant</h3>\n                      <p className=\"text-xs text-gray-400\">Powered by Gemini 2.5</p>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setIsOpen(false)}\n                    className=\"text-gray-400 hover:text-white\"\n                  >\n                    <i className=\"fas fa-times\"></i>\n                  </Button>\n                </div>\n\n                {/* Messages */}\n                <ScrollArea ref={scrollRef} className=\"h-[440px] p-4\">\n                  <div className=\"space-y-4\">\n                    {messages.map((message) => (\n                      <div\n                        key={message.id}\n                        className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n                      >\n                        <div className={`max-w-[80%] ${message.role === 'user' ? 'order-2' : 'order-1'}`}>\n                          <div\n                            className={`p-3 rounded-lg ${\n                              message.role === 'user'\n                                ? 'bg-gradient-to-r from-primary/20 to-secondary/20 border border-primary/30 text-white'\n                                : 'bg-gray-800/50 border border-gray-700/50 text-gray-200'\n                            } backdrop-blur-sm`}\n                          >\n                            {message.content}\n                          </div>\n                          <p className={`text-xs text-gray-500 mt-1 ${message.role === 'user' ? 'text-right' : ''}`}>\n                            {message.timestamp.toLocaleTimeString()}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                    {isTyping && (\n                      <div className=\"flex justify-start\">\n                        <div className=\"bg-gray-800/50 border border-gray-700/50 p-3 rounded-lg\">\n                          <div className=\"flex space-x-2\">\n                            <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-bounce\"></div>\n                            <div className=\"w-2 h-2 bg-purple-500 rounded-full animate-bounce animation-delay-200\"></div>\n                            <div className=\"w-2 h-2 bg-pink-500 rounded-full animate-bounce animation-delay-400\"></div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </ScrollArea>\n\n                {/* Input */}\n                <div className=\"absolute bottom-0 left-0 right-0 p-4 border-t border-gray-800/50 bg-gray-900/80 backdrop-blur-sm rounded-b-2xl\">\n                  <form\n                    onSubmit={(e) => {\n                      e.preventDefault();\n                      handleSend();\n                    }}\n                    className=\"flex space-x-2\"\n                  >\n                    <Input\n                      value={input}\n                      onChange={(e) => setInput(e.target.value)}\n                      placeholder=\"Ask me anything...\"\n                      className=\"flex-1 bg-gray-800/50 border-gray-700 text-white placeholder-gray-500\"\n                      disabled={isTyping}\n                      data-testid=\"input-ai-question\"\n                    />\n                    <Button\n                      type=\"submit\"\n                      disabled={!input.trim() || isTyping}\n                      className=\"bg-gradient-to-r from-primary to-secondary hover:opacity-90\"\n                      data-testid=\"button-ai-send\"\n                    >\n                      <i className=\"fas fa-paper-plane\"></i>\n                    </Button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <style>{`\n        @keyframes gradient {\n          0%, 100% { opacity: 1; }\n          50% { opacity: 0.7; }\n        }\n\n        .animate-gradient {\n          animation: gradient 3s ease-in-out infinite;\n        }\n\n        .animation-delay-200 {\n          animation-delay: 200ms;\n        }\n\n        .animation-delay-400 {\n          animation-delay: 400ms;\n        }\n\n        .animation-delay-1000 {\n          animation-delay: 1000ms;\n        }\n\n        .particle {\n          position: absolute;\n          width: 2px;\n          height: 2px;\n          background: linear-gradient(to bottom, transparent, #60a5fa, transparent);\n          opacity: 0;\n          animation: particleFloat 10s infinite;\n        }\n\n        .particle-1 {\n          left: 10%;\n          animation-delay: 0s;\n        }\n\n        .particle-2 {\n          left: 30%;\n          animation-delay: 2.5s;\n        }\n\n        .particle-3 {\n          left: 60%;\n          animation-delay: 5s;\n        }\n\n        .particle-4 {\n          left: 80%;\n          animation-delay: 7.5s;\n        }\n\n        @keyframes particleFloat {\n          0% {\n            bottom: -10px;\n            opacity: 0;\n          }\n          10% {\n            opacity: 1;\n          }\n          90% {\n            opacity: 1;\n          }\n          100% {\n            bottom: 100%;\n            opacity: 0;\n          }\n        }\n      `}</style>\n    </>\n  );\n}","size_bytes":10774},"client/src/components/analysis-chart.tsx":{"content":"import { ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, Legend, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\ninterface AnalysisChartProps {\n  analysis: any;\n}\n\nexport function AnalysisRadarChart({ analysis }: AnalysisChartProps) {\n  const data = [\n    { metric: 'Originality', score: analysis?.originality || 0, fullMark: 10 },\n    { metric: 'Completeness', score: analysis?.completeness || 0, fullMark: 10 },\n    { metric: 'Marketability', score: analysis?.marketability || 0, fullMark: 10 },\n    { metric: 'Monetization', score: analysis?.monetization || 0, fullMark: 10 },\n    { metric: 'Usefulness', score: analysis?.usefulness || 0, fullMark: 10 },\n  ];\n\n  return (\n    <Card className=\"bg-card border border-border\">\n      <CardHeader>\n        <CardTitle className=\"text-xl\">Analysis Radar</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <RadarChart data={data}>\n            <PolarGrid stroke=\"#374151\" />\n            <PolarAngleAxis dataKey=\"metric\" stroke=\"#9CA3AF\" />\n            <PolarRadiusAxis angle={90} domain={[0, 10]} stroke=\"#9CA3AF\" />\n            <Radar \n              name=\"Score\" \n              dataKey=\"score\" \n              stroke=\"#FF6B35\" \n              fill=\"#FF6B35\" \n              fillOpacity={0.6} \n            />\n            <Legend />\n          </RadarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function LanguageDistributionChart({ languages }: { languages: any }) {\n  if (!languages || Object.keys(languages).length === 0) return null;\n\n  const data = Object.entries(languages)\n    .map(([name, value]) => ({ name, value: value as number }))\n    .sort((a, b) => b.value - a.value)\n    .slice(0, 5);\n\n  const total = data.reduce((sum, item) => sum + item.value, 0);\n  const dataWithPercentage = data.map(item => ({\n    ...item,\n    percentage: ((item.value / total) * 100).toFixed(1)\n  }));\n\n  return (\n    <Card className=\"bg-card border border-border\">\n      <CardHeader>\n        <CardTitle className=\"text-xl\">Language Distribution</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={250}>\n          <BarChart data={dataWithPercentage}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n            <XAxis dataKey=\"name\" stroke=\"#9CA3AF\" />\n            <YAxis stroke=\"#9CA3AF\" />\n            <Tooltip \n              contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #374151' }}\n              labelStyle={{ color: '#9CA3AF' }}\n            />\n            <Bar dataKey=\"value\" fill=\"#FF3333\" radius={[8, 8, 0, 0]} />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2880},"client/src/components/analysis-results.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, FileDown, FileText } from \"lucide-react\";\nimport { getScoreHealthIndicator, getMetricHealthIndicator, getOverallHealth } from \"@/utils/health-indicators\";\nimport { exportToPDF, exportToCSV } from \"@/utils/export-utils\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AnalysisResultsProps {\n  analysis: {\n    originality: number;\n    completeness: number;\n    marketability: number;\n    monetization: number;\n    usefulness: number;\n    overallScore: number;\n    summary: string;\n    strengths: string[];\n    weaknesses: string[];\n    recommendations: string[];\n    scoreExplanations?: {\n      [key: string]: string;\n    };\n  };\n  repository?: {\n    name: string;\n    full_name: string;\n    description?: string;\n    language?: string;\n    stargazers_count?: number;\n    forks_count?: number;\n  };\n}\n\nexport default function AnalysisResults({ analysis, repository }: AnalysisResultsProps) {\n  const { toast } = useToast();\n\n  const handleExportPDF = async () => {\n    try {\n      const exportData = {\n        id: 'temp-id',\n        repositoryId: repository?.full_name || 'unknown',\n        originality: analysis.originality,\n        completeness: analysis.completeness,\n        marketability: analysis.marketability,\n        monetization: analysis.monetization,\n        usefulness: analysis.usefulness,\n        overallScore: analysis.overallScore,\n        summary: analysis.summary,\n        strengths: analysis.strengths,\n        weaknesses: analysis.weaknesses,\n        recommendations: analysis.recommendations,\n        createdAt: new Date().toISOString(),\n        repository,\n        // For backward compatibility\n        originality_score: analysis.originality * 10,\n        completeness_score: analysis.completeness * 10,\n        marketability_score: analysis.marketability * 10,\n        monetization_score: analysis.monetization * 10,\n        usefulness_score: analysis.usefulness * 10,\n        overall_score: analysis.overallScore,\n        key_findings: analysis.strengths,\n      };\n      \n      await exportToPDF(exportData, 'analysis-results');\n      toast({\n        title: \"Export Successful\",\n        description: \"Analysis results exported as PDF\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export analysis results\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleExportCSV = () => {\n    try {\n      const exportData = {\n        id: 'temp-id',\n        repositoryId: repository?.full_name || 'unknown',\n        originality: analysis.originality,\n        completeness: analysis.completeness,\n        marketability: analysis.marketability,\n        monetization: analysis.monetization,\n        usefulness: analysis.usefulness,\n        overallScore: analysis.overallScore,\n        summary: analysis.summary,\n        strengths: analysis.strengths,\n        weaknesses: analysis.weaknesses,\n        recommendations: analysis.recommendations,\n        createdAt: new Date().toISOString(),\n        repository,\n        // For backward compatibility\n        originality_score: analysis.originality * 10,\n        completeness_score: analysis.completeness * 10,\n        marketability_score: analysis.marketability * 10,\n        monetization_score: analysis.monetization * 10,\n        usefulness_score: analysis.usefulness * 10,\n        overall_score: analysis.overallScore,\n        key_findings: analysis.strengths,\n      };\n      \n      exportToCSV(exportData);\n      toast({\n        title: \"Export Successful\",\n        description: \"Analysis results exported as CSV\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export analysis results\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 9) return 'text-green-400';\n    if (score >= 7) return 'text-primary';\n    if (score >= 5) return 'text-accent';\n    return 'text-gray-400';\n  };\n\n  const getProgressWidth = (score: number) => {\n    return `${(score / 10) * 100}%`;\n  };\n\n  const getScoreGradient = (metric: string) => {\n    switch (metric) {\n      case 'originality':\n        return 'from-primary to-secondary';\n      case 'completeness':\n        return 'from-green-400 to-blue-500';\n      case 'marketability':\n        return 'from-accent to-primary';\n      case 'monetization':\n        return 'from-purple-400 to-pink-500';\n      case 'usefulness':\n        return 'from-yellow-400 to-orange-500';\n      default:\n        return 'from-primary to-secondary';\n    }\n  };\n\n  return (\n    <Card className=\"bg-card border border-border mb-8\" id=\"analysis-results\">\n      <CardContent className=\"p-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <h2 className=\"text-2xl font-semibold\">AI Analysis Results</h2>\n          <div className=\"flex gap-2\" data-tour=\"export-buttons\">\n            <Button\n              onClick={handleExportPDF}\n              className=\"bg-gradient-to-r from-primary to-secondary hover:from-secondary hover:to-primary\"\n              data-testid=\"button-export-pdf\"\n            >\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Export PDF\n            </Button>\n            <Button\n              onClick={handleExportCSV}\n              variant=\"outline\"\n              className=\"border-primary text-primary hover:bg-primary hover:text-white\"\n              data-testid=\"button-export-csv\"\n            >\n              <FileDown className=\"w-4 h-4 mr-2\" />\n              Export CSV\n            </Button>\n          </div>\n        </div>\n\n        {/* Analysis Summary */}\n        <div className=\"mb-8\">\n          <h3 className=\"text-xl font-semibold mb-4\">Summary</h3>\n          <div className=\"bg-dark rounded-lg p-6 border border-border\">\n            <p className=\"text-gray-300 leading-relaxed\" data-testid=\"text-analysis-summary\">\n              {analysis.summary}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\" data-tour=\"metrics-display\">\n          {/* Scores */}\n          <div className=\"space-y-6\">\n            <h3 className=\"text-xl font-semibold mb-4\">Detailed Scores</h3>\n            \n            <div className=\"space-y-4\">\n              {[\n                { label: 'Originality', score: analysis.originality, key: 'originality' },\n                { label: 'Completeness', score: analysis.completeness, key: 'completeness' },\n                { label: 'Marketability', score: analysis.marketability, key: 'marketability' },\n              ].map(({ label, score, key }) => (\n                <div key={key} className=\"bg-dark rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-2xl\">{getMetricHealthIndicator(key, score * 10)}</span>\n                      <span className=\"font-medium\">{label}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className={`text-2xl font-bold ${getScoreColor(score)}`} data-testid={`score-${key}`}>\n                        {score.toFixed(1)}\n                      </span>\n                      <span className={`text-sm ${getScoreHealthIndicator(score * 10).color}`}>\n                        {getScoreHealthIndicator(score * 10).label}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"w-full h-3 bg-gray-700 rounded-full overflow-hidden mb-2\">\n                    <div \n                      className={`h-full bg-gradient-to-r ${getScoreGradient(key)} rounded-full transition-all duration-1000`}\n                      style={{ width: getProgressWidth(score) }}\n                    ></div>\n                  </div>\n                  {analysis.scoreExplanations?.[key] && (\n                    <p className=\"text-xs text-gray-400 mt-2 italic\">\n                      {analysis.scoreExplanations[key]}\n                    </p>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"space-y-6\">\n            <h3 className=\"text-xl font-semibold mb-4\">Additional Metrics</h3>\n            \n            <div className=\"space-y-4\">\n              {[\n                { label: 'Monetization Potential', score: analysis.monetization, key: 'monetization' },\n                { label: 'Overall Usefulness', score: analysis.usefulness, key: 'usefulness' },\n              ].map(({ label, score, key }) => (\n                <div key={key} className=\"bg-dark rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-2xl\">{getMetricHealthIndicator(key, score * 10)}</span>\n                      <span className=\"font-medium\">{label}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className={`text-2xl font-bold ${getScoreColor(score)}`} data-testid={`score-${key}`}>\n                        {score.toFixed(1)}\n                      </span>\n                      <span className={`text-sm ${getScoreHealthIndicator(score * 10).color}`}>\n                        {getScoreHealthIndicator(score * 10).label}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"w-full h-3 bg-gray-700 rounded-full overflow-hidden mb-2\">\n                    <div \n                      className={`h-full bg-gradient-to-r ${getScoreGradient(key)} rounded-full transition-all duration-1000`}\n                      style={{ width: getProgressWidth(score) }}\n                    ></div>\n                  </div>\n                  {analysis.scoreExplanations?.[key] && (\n                    <p className=\"text-xs text-gray-400 mt-2 italic\">\n                      {analysis.scoreExplanations[key]}\n                    </p>\n                  )}\n                </div>\n              ))}\n\n              <div className=\"bg-dark rounded-lg p-4 border border-primary/20\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-3xl\">{getScoreHealthIndicator(analysis.overallScore * 10).emoji}</span>\n                    <span className=\"font-medium\">Overall Score</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-3xl font-bold gradient-text\" data-testid=\"score-overall\">\n                      {analysis.overallScore.toFixed(1)}\n                    </span>\n                    <span className={`text-sm ${getScoreHealthIndicator(analysis.overallScore * 10).color}`}>\n                      {getScoreHealthIndicator(analysis.overallScore * 10).label}\n                    </span>\n                  </div>\n                </div>\n                <p className=\"text-sm text-gray-400\">\n                  {analysis.overallScore >= 9 ? 'Exceptional repository with outstanding potential' :\n                   analysis.overallScore >= 7 ? 'High-quality repository with strong potential' :\n                   analysis.overallScore >= 5 ? 'Good repository with moderate potential' :\n                   'Repository needs improvement in key areas'}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Strengths, Weaknesses, and Recommendations */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Strengths */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4 text-green-400\">\n              <i className=\"fas fa-check-circle mr-2\"></i>\n              Strengths\n            </h3>\n            <div className=\"space-y-3\">\n              {analysis.strengths.map((strength: any, index: number) => (\n                <div \n                  key={index}\n                  className=\"bg-dark rounded-lg p-3 border-l-4 border-green-400\"\n                  data-testid={`strength-${index}`}\n                >\n                  <p className=\"text-sm text-gray-300 font-medium\">\n                    {typeof strength === 'string' ? strength : strength.point}\n                  </p>\n                  {typeof strength === 'object' && strength.reason && (\n                    <p className=\"text-xs text-gray-400 mt-1 italic\">\n                      {strength.reason}\n                    </p>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Weaknesses */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4 text-red-400\">\n              <i className=\"fas fa-exclamation-triangle mr-2\"></i>\n              Areas for Improvement\n            </h3>\n            <div className=\"space-y-3\">\n              {analysis.weaknesses.map((weakness: any, index: number) => (\n                <div \n                  key={index}\n                  className=\"bg-dark rounded-lg p-3 border-l-4 border-red-400\"\n                  data-testid={`weakness-${index}`}\n                >\n                  <p className=\"text-sm text-gray-300 font-medium\">\n                    {typeof weakness === 'string' ? weakness : weakness.point}\n                  </p>\n                  {typeof weakness === 'object' && weakness.reason && (\n                    <p className=\"text-xs text-gray-400 mt-1 italic\">\n                      {weakness.reason}\n                    </p>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Recommendations */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4 text-primary\">\n              <i className=\"fas fa-lightbulb mr-2\"></i>\n              Recommendations\n            </h3>\n            <div className=\"space-y-3\">\n              {analysis.recommendations.map((recommendation: any, index: number) => (\n                <div \n                  key={index}\n                  className=\"bg-dark rounded-lg p-3 border-l-4 border-primary\"\n                  data-testid={`recommendation-${index}`}\n                >\n                  <p className=\"text-sm text-gray-300 font-medium\">\n                    {typeof recommendation === 'string' ? recommendation : recommendation.suggestion}\n                  </p>\n                  {typeof recommendation === 'object' && recommendation.reason && (\n                    <p className=\"text-xs text-gray-400 mt-1 italic\">\n                      <strong>Why:</strong> {recommendation.reason}\n                    </p>\n                  )}\n                  {typeof recommendation === 'object' && recommendation.impact && (\n                    <p className=\"text-xs text-green-400 mt-1 italic\">\n                      <strong>Impact:</strong> {recommendation.impact}\n                    </p>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":15348},"client/src/components/collections-manager.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Folder, Plus, X, Edit2, Trash2, BookmarkPlus } from 'lucide-react';\n\ninterface Collection {\n  id: number;\n  name: string;\n  description: string;\n  color: string;\n  repositoryCount: number;\n  createdAt: string;\n}\n\ninterface CollectionsManagerProps {\n  repositoryId?: string;\n  userId: string;\n  showCreateButton?: boolean;\n}\n\nexport function CollectionsManager({ repositoryId, userId, showCreateButton = true }: CollectionsManagerProps) {\n  const { toast } = useToast();\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [isAddToCollectionOpen, setIsAddToCollectionOpen] = useState(false);\n  const [newCollection, setNewCollection] = useState({\n    name: '',\n    description: '',\n    color: '#FF6B6B'\n  });\n\n  const { data: collections = [], isLoading } = useQuery<Collection[]>({\n    queryKey: ['/api/collections', userId],\n    enabled: !!userId\n  });\n\n  const createCollectionMutation = useMutation({\n    mutationFn: async (data: typeof newCollection) => {\n      return await apiRequest('POST', '/api/collections', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/collections'] });\n      toast({\n        title: 'Collection Created',\n        description: 'Your new collection has been created successfully.'\n      });\n      setIsCreateOpen(false);\n      setNewCollection({ name: '', description: '', color: '#FF6B6B' });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to create collection. Please try again.',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const addToCollectionMutation = useMutation({\n    mutationFn: async ({ collectionId, repoId }: { collectionId: number; repoId: string }) => {\n      return await apiRequest('POST', `/api/collections/${collectionId}/repositories`, { repositoryId: repoId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/collections'] });\n      toast({\n        title: 'Added to Collection',\n        description: 'Repository has been added to the collection.'\n      });\n      setIsAddToCollectionOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to add repository to collection.',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const deleteCollectionMutation = useMutation({\n    mutationFn: async (collectionId: number) => {\n      return await apiRequest('DELETE', `/api/collections/${collectionId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/collections'] });\n      toast({\n        title: 'Collection Deleted',\n        description: 'Collection has been deleted successfully.'\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to delete collection.',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const handleCreateCollection = () => {\n    if (!newCollection.name.trim()) {\n      toast({\n        title: 'Error',\n        description: 'Collection name is required.',\n        variant: 'destructive'\n      });\n      return;\n    }\n    createCollectionMutation.mutate(newCollection);\n  };\n\n  const handleAddToCollection = (collectionId: number) => {\n    if (repositoryId) {\n      addToCollectionMutation.mutate({ collectionId, repoId: repositoryId });\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Create Collection Button */}\n      {showCreateButton && (\n        <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"w-full bg-gradient-to-r from-primary to-secondary hover:from-secondary hover:to-primary\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create New Collection\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"bg-card border border-border\">\n            <DialogHeader>\n              <DialogTitle>Create New Collection</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Collection Name</label>\n                <Input\n                  value={newCollection.name}\n                  onChange={(e) => setNewCollection({ ...newCollection, name: e.target.value })}\n                  placeholder=\"My Awesome Collection\"\n                  className=\"bg-dark border-border\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Description</label>\n                <Textarea\n                  value={newCollection.description}\n                  onChange={(e) => setNewCollection({ ...newCollection, description: e.target.value })}\n                  placeholder=\"Describe your collection...\"\n                  className=\"bg-dark border-border\"\n                  rows={3}\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Color</label>\n                <div className=\"flex items-center space-x-2\">\n                  <Input\n                    type=\"color\"\n                    value={newCollection.color}\n                    onChange={(e) => setNewCollection({ ...newCollection, color: e.target.value })}\n                    className=\"w-20 h-10 bg-dark border-border\"\n                  />\n                  <Input\n                    value={newCollection.color}\n                    onChange={(e) => setNewCollection({ ...newCollection, color: e.target.value })}\n                    placeholder=\"#FF6B6B\"\n                    className=\"flex-1 bg-dark border-border\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setIsCreateOpen(false)}>\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleCreateCollection}\n                  disabled={createCollectionMutation.isPending}\n                  className=\"bg-primary hover:bg-primary/80\"\n                >\n                  {createCollectionMutation.isPending ? 'Creating...' : 'Create Collection'}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Add to Collection Button (for repository pages) */}\n      {repositoryId && (\n        <Dialog open={isAddToCollectionOpen} onOpenChange={setIsAddToCollectionOpen}>\n          <DialogTrigger asChild>\n            <Button variant=\"outline\" size=\"sm\" className=\"hover-lift\">\n              <BookmarkPlus className=\"mr-2 h-4 w-4\" />\n              Add to Collection\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"bg-card border border-border\">\n            <DialogHeader>\n              <DialogTitle>Add to Collection</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n              {isLoading ? (\n                <div className=\"text-center py-4\">Loading collections...</div>\n              ) : collections.length === 0 ? (\n                <div className=\"text-center py-4\">\n                  <p className=\"text-gray-400 mb-4\">No collections yet</p>\n                  <Button onClick={() => { setIsAddToCollectionOpen(false); setIsCreateOpen(true); }}>\n                    Create Your First Collection\n                  </Button>\n                </div>\n              ) : (\n                collections.map((collection) => (\n                  <Card\n                    key={collection.id}\n                    className=\"bg-dark border-border hover:border-primary/30 transition-all cursor-pointer hover-lift\"\n                    onClick={() => handleAddToCollection(collection.id)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div\n                            className=\"w-3 h-3 rounded-full\"\n                            style={{ backgroundColor: collection.color }}\n                          />\n                          <div>\n                            <h4 className=\"font-medium\">{collection.name}</h4>\n                            <p className=\"text-xs text-gray-400\">\n                              {collection.repositoryCount} repositories\n                            </p>\n                          </div>\n                        </div>\n                        <Plus className=\"h-4 w-4 text-gray-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Collections List */}\n      {!repositoryId && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {isLoading ? (\n            <div className=\"col-span-full text-center py-8\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\" />\n            </div>\n          ) : collections.length === 0 ? (\n            <div className=\"col-span-full text-center py-8\">\n              <Folder className=\"w-16 h-16 text-gray-600 mx-auto mb-4\" />\n              <p className=\"text-gray-400 mb-4\">No collections yet</p>\n              <p className=\"text-sm text-gray-500\">Create your first collection to organize repositories</p>\n            </div>\n          ) : (\n            collections.map((collection) => (\n              <Card\n                key={collection.id}\n                className=\"bg-card border border-border hover:border-primary/30 transition-all group card-hover\"\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div\n                        className=\"w-4 h-4 rounded-full\"\n                        style={{ backgroundColor: collection.color }}\n                      />\n                      <h3 className=\"font-semibold text-lg\">{collection.name}</h3>\n                    </div>\n                    <div className=\"flex space-x-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                        <Edit2 className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8 text-red-400 hover:text-red-300\"\n                        onClick={() => deleteCollectionMutation.mutate(collection.id)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <p className=\"text-gray-400 text-sm mb-4 line-clamp-2\">\n                    {collection.description || 'No description'}\n                  </p>\n                  <div className=\"flex items-center justify-between\">\n                    <Badge variant=\"secondary\" className=\"bg-dark\">\n                      {collection.repositoryCount} repositories\n                    </Badge>\n                    <span className=\"text-xs text-gray-500\">\n                      Created {new Date(collection.createdAt).toLocaleDateString()}\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":12269},"client/src/components/comments.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { MessageSquare, Heart, Edit, Trash2, Send } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface CommentsProps {\n  repositoryId: string;\n}\n\nexport function Comments({ repositoryId }: CommentsProps) {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [newComment, setNewComment] = useState(\"\");\n  const [editingCommentId, setEditingCommentId] = useState<number | null>(null);\n  const [editContent, setEditContent] = useState(\"\");\n\n  // Fetch comments\n  const { data: comments = [], isLoading } = useQuery<any[]>({\n    queryKey: [`/api/repositories/${repositoryId}/comments`],\n  });\n\n  // Add comment mutation\n  const addCommentMutation = useMutation({\n    mutationFn: async (content: string) => {\n      return await apiRequest(\"POST\", `/api/repositories/${repositoryId}/comments`, {\n        content,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/repositories/${repositoryId}/comments`] });\n      setNewComment(\"\");\n      toast({\n        title: \"Comment added\",\n        description: \"Your comment has been posted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to add comment\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update comment mutation\n  const updateCommentMutation = useMutation({\n    mutationFn: async ({ commentId, content }: { commentId: number; content: string }) => {\n      return await apiRequest(\"PUT\", `/api/comments/${commentId}`, { content });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/repositories/${repositoryId}/comments`] });\n      setEditingCommentId(null);\n      setEditContent(\"\");\n      toast({\n        title: \"Comment updated\",\n        description: \"Your comment has been updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update comment\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete comment mutation\n  const deleteCommentMutation = useMutation({\n    mutationFn: async (commentId: number) => {\n      return await apiRequest(\"DELETE\", `/api/comments/${commentId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/repositories/${repositoryId}/comments`] });\n      toast({\n        title: \"Comment deleted\",\n        description: \"Your comment has been deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to delete comment\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Like comment mutation\n  const likeCommentMutation = useMutation({\n    mutationFn: async (commentId: number) => {\n      return await apiRequest(\"POST\", `/api/comments/${commentId}/like`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/repositories/${repositoryId}/comments`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to like comment\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Unlike comment mutation\n  const unlikeCommentMutation = useMutation({\n    mutationFn: async (commentId: number) => {\n      return await apiRequest(\"DELETE\", `/api/comments/${commentId}/like`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/repositories/${repositoryId}/comments`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to unlike comment\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitComment = () => {\n    if (newComment.trim()) {\n      addCommentMutation.mutate(newComment);\n    }\n  };\n\n  const handleUpdateComment = (commentId: number) => {\n    if (editContent.trim()) {\n      updateCommentMutation.mutate({ commentId, content: editContent });\n    }\n  };\n\n  const startEditing = (comment: any) => {\n    setEditingCommentId(comment.id);\n    setEditContent(comment.content);\n  };\n\n  const cancelEditing = () => {\n    setEditingCommentId(null);\n    setEditContent(\"\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"h-24 bg-muted rounded-lg animate-pulse\" />\n        <div className=\"h-24 bg-muted rounded-lg animate-pulse\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-xl font-semibold flex items-center gap-2\">\n          <MessageSquare className=\"h-5 w-5\" />\n          Comments ({comments.length})\n        </h3>\n      </div>\n\n      {isAuthenticated && (\n        <Card className=\"p-4\">\n          <div className=\"space-y-3\">\n            <Textarea\n              placeholder=\"Share your thoughts about this repository...\"\n              value={newComment}\n              onChange={(e) => setNewComment(e.target.value)}\n              className=\"min-h-[80px]\"\n              data-testid=\"input-comment\"\n            />\n            <div className=\"flex justify-end\">\n              <Button\n                onClick={handleSubmitComment}\n                disabled={!newComment.trim() || addCommentMutation.isPending}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-submit-comment\"\n              >\n                <Send className=\"h-4 w-4\" />\n                {addCommentMutation.isPending ? \"Posting...\" : \"Post Comment\"}\n              </Button>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      <div className=\"space-y-4\">\n        {comments.length === 0 ? (\n          <Card className=\"p-8 text-center text-muted-foreground\">\n            <MessageSquare className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p>No comments yet. Be the first to share your thoughts!</p>\n          </Card>\n        ) : (\n          comments.map((comment: any) => (\n            <Card key={comment.id} className=\"p-4\">\n              <div className=\"flex items-start gap-3\">\n                <Avatar className=\"h-10 w-10\">\n                  <AvatarImage src={comment.user?.profileImageUrl} />\n                  <AvatarFallback>\n                    {comment.user?.firstName?.[0] || comment.user?.email?.[0] || \"U\"}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <span className=\"font-semibold\">\n                        {comment.user?.firstName && comment.user?.lastName\n                          ? `${comment.user.firstName} ${comment.user.lastName}`\n                          : comment.user?.email?.split(\"@\")[0] || \"Anonymous\"}\n                      </span>\n                      <span className=\"text-sm text-muted-foreground ml-2\">\n                        {formatDistanceToNow(new Date(comment.createdAt), { addSuffix: true })}\n                      </span>\n                      {comment.isEdited && (\n                        <span className=\"text-xs text-muted-foreground ml-2\">(edited)</span>\n                      )}\n                    </div>\n                    {isAuthenticated && comment.userId === user?.id && (\n                      <div className=\"flex items-center gap-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => startEditing(comment)}\n                          data-testid={`button-edit-comment-${comment.id}`}\n                        >\n                          <Edit className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteCommentMutation.mutate(comment.id)}\n                          disabled={deleteCommentMutation.isPending}\n                          data-testid={`button-delete-comment-${comment.id}`}\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                  {editingCommentId === comment.id ? (\n                    <div className=\"mt-2 space-y-2\">\n                      <Textarea\n                        value={editContent}\n                        onChange={(e) => setEditContent(e.target.value)}\n                        className=\"min-h-[60px]\"\n                        data-testid={`input-edit-comment-${comment.id}`}\n                      />\n                      <div className=\"flex gap-2\">\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleUpdateComment(comment.id)}\n                          disabled={updateCommentMutation.isPending}\n                          data-testid={`button-save-edit-${comment.id}`}\n                        >\n                          {updateCommentMutation.isPending ? \"Saving...\" : \"Save\"}\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={cancelEditing}\n                          data-testid={`button-cancel-edit-${comment.id}`}\n                        >\n                          Cancel\n                        </Button>\n                      </div>\n                    </div>\n                  ) : (\n                    <p className=\"mt-2 text-sm\">{comment.content}</p>\n                  )}\n                  <div className=\"flex items-center gap-4 mt-3\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"flex items-center gap-1 h-auto p-1\"\n                      onClick={() =>\n                        comment.hasLiked\n                          ? unlikeCommentMutation.mutate(comment.id)\n                          : likeCommentMutation.mutate(comment.id)\n                      }\n                      disabled={\n                        !isAuthenticated ||\n                        likeCommentMutation.isPending ||\n                        unlikeCommentMutation.isPending\n                      }\n                      data-testid={`button-like-comment-${comment.id}`}\n                    >\n                      <Heart\n                        className={`h-4 w-4 ${comment.hasLiked ? \"fill-red-500 text-red-500\" : \"\"}`}\n                      />\n                      <span className=\"text-sm\">{comment.likeCount || 0}</span>\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":11392},"client/src/components/comparison-table.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Repository {\n  id: string;\n  name: string;\n  fullName: string;\n  description: string | null;\n  language: string | null;\n  stars: number;\n  forks: number;\n  watchers: number;\n}\n\ninterface Analysis {\n  originality: number;\n  completeness: number;\n  marketability: number;\n  monetization: number;\n  usefulness: number;\n  overallScore: number;\n}\n\ninterface ComparisonTableProps {\n  repoA: Repository;\n  repoB: Repository;\n}\n\nexport default function ComparisonTable({ repoA, repoB }: ComparisonTableProps) {\n  const { data: dataA } = useQuery({\n    queryKey: ['/api/repositories', repoA.id],\n    enabled: !!repoA.id,\n  });\n\n  const { data: dataB } = useQuery({\n    queryKey: ['/api/repositories', repoB.id],\n    enabled: !!repoB.id,\n  });\n\n  const analysisA = dataA?.analysis;\n  const analysisB = dataB?.analysis;\n\n  const compareMetric = (valueA: number | undefined, valueB: number | undefined) => {\n    if (!valueA || !valueB) return 'tie';\n    if (valueA > valueB) return 'a';\n    if (valueB > valueA) return 'b';\n    return 'tie';\n  };\n\n  const getWinnerIcon = (winner: string) => {\n    switch (winner) {\n      case 'a':\n        return <i className=\"fas fa-trophy text-primary\" data-testid=\"trophy-repo-a\"></i>;\n      case 'b':\n        return <i className=\"fas fa-trophy text-accent\" data-testid=\"trophy-repo-b\"></i>;\n      default:\n        return <i className=\"fas fa-minus text-gray-400\" data-testid=\"tie-icon\"></i>;\n    }\n  };\n\n  const formatNumber = (num: number) => {\n    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;\n    if (num >= 1000) return `${(num / 1000).toFixed(1)}k`;\n    return num.toLocaleString();\n  };\n\n  return (\n    <Card className=\"bg-card border border-border\">\n      <CardContent className=\"p-8\">\n        <h3 className=\"text-2xl font-bold mb-8 text-center gradient-text\">Comparison Results</h3>\n        \n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-border\">\n                <th className=\"text-left py-4 font-medium text-gray-300\">Metric</th>\n                <th className=\"text-center py-4 font-medium\">\n                  <div className=\"flex flex-col items-center\">\n                    <span className=\"text-primary\" data-testid=\"header-repo-a\">{repoA.name}</span>\n                    <span className=\"text-xs text-gray-400\">{repoA.fullName}</span>\n                  </div>\n                </th>\n                <th className=\"text-center py-4 font-medium\">\n                  <div className=\"flex flex-col items-center\">\n                    <span className=\"text-accent\" data-testid=\"header-repo-b\">{repoB.name}</span>\n                    <span className=\"text-xs text-gray-400\">{repoB.fullName}</span>\n                  </div>\n                </th>\n                <th className=\"text-center py-4 font-medium text-gray-300\">Winner</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-border\">\n              {/* Basic Repository Metrics */}\n              <tr>\n                <td className=\"py-4 font-medium\">Stars</td>\n                <td className=\"py-4 text-center\">\n                  <span className=\"text-primary font-bold\" data-testid=\"stars-repo-a\">\n                    {formatNumber(repoA.stars)}\n                  </span>\n                </td>\n                <td className=\"py-4 text-center\">\n                  <span className=\"text-accent font-bold\" data-testid=\"stars-repo-b\">\n                    {formatNumber(repoB.stars)}\n                  </span>\n                </td>\n                <td className=\"py-4 text-center\">\n                  {getWinnerIcon(compareMetric(repoA.stars, repoB.stars))}\n                </td>\n              </tr>\n\n              <tr>\n                <td className=\"py-4 font-medium\">Forks</td>\n                <td className=\"py-4 text-center\">\n                  <span className=\"text-primary font-bold\" data-testid=\"forks-repo-a\">\n                    {formatNumber(repoA.forks)}\n                  </span>\n                </td>\n                <td className=\"py-4 text-center\">\n                  <span className=\"text-accent font-bold\" data-testid=\"forks-repo-b\">\n                    {formatNumber(repoB.forks)}\n                  </span>\n                </td>\n                <td className=\"py-4 text-center\">\n                  {getWinnerIcon(compareMetric(repoA.forks, repoB.forks))}\n                </td>\n              </tr>\n\n              <tr>\n                <td className=\"py-4 font-medium\">Primary Language</td>\n                <td className=\"py-4 text-center\">\n                  <Badge className=\"bg-blue-500/20 text-blue-400 border border-blue-500/30\" data-testid=\"language-repo-a\">\n                    {repoA.language || 'Unknown'}\n                  </Badge>\n                </td>\n                <td className=\"py-4 text-center\">\n                  <Badge className=\"bg-green-500/20 text-green-400 border border-green-500/30\" data-testid=\"language-repo-b\">\n                    {repoB.language || 'Unknown'}\n                  </Badge>\n                </td>\n                <td className=\"py-4 text-center\">\n                  <i className=\"fas fa-minus text-gray-400\"></i>\n                </td>\n              </tr>\n\n              {/* AI Analysis Metrics */}\n              {analysisA && analysisB && (\n                <>\n                  <tr className=\"bg-dark/30\">\n                    <td colSpan={4} className=\"py-3 text-center font-semibold text-lg gradient-text\">\n                      AI Analysis Comparison\n                    </td>\n                  </tr>\n\n                  <tr>\n                    <td className=\"py-4 font-medium\">Originality</td>\n                    <td className=\"py-4 text-center\">\n                      <span className=\"text-primary font-bold text-lg\" data-testid=\"originality-repo-a\">\n                        {analysisA.originality.toFixed(1)}\n                      </span>\n                    </td>\n                    <td className=\"py-4 text-center\">\n                      <span className=\"text-accent font-bold text-lg\" data-testid=\"originality-repo-b\">\n                        {analysisB.originality.toFixed(1)}\n                      </span>\n                    </td>\n                    <td className=\"py-4 text-center\">\n                      {getWinnerIcon(compareMetric(analysisA.originality, analysisB.originality))}\n                    </td>\n                  </tr>\n\n                  <tr>\n                    <td className=\"py-4 font-medium\">Completeness</td>\n                    <td className=\"py-4 text-center\">\n                      <span className=\"text-primary font-bold text-lg\" data-testid=\"completeness-repo-a\">\n                        {analysisA.completeness.toFixed(1)}\n                      </span>\n                    </td>\n                    <td className=\"py-4 text-center\">\n                      <span className=\"text-accent font-bold text-lg\" data-testid=\"completeness-repo-b\">\n                        {analysisB.completeness.toFixed(1)}\n                      </span>\n                    </td>\n                    <td className=\"py-4 text-center\">\n                      {getWinnerIcon(compareMetric(analysisA.completeness, analysisB.completeness))}\n                    </td>\n                  </tr>\n\n                  <tr>\n                    <td className=\"py-4 font-medium\">Marketability</td>\n                    <td className=\"py-4 text-center\">\n                      <span className=\"text-primary font-bold text-lg\" data-testid=\"marketability-repo-a\">\n                        {analysisA.marketability.toFixed(1)}\n                      </span>\n                    </td>\n                    <td className=\"py-4 text-center\">\n                      <span className=\"text-accent font-bold text-lg\" data-testid=\"marketability-repo-b\">\n                        {analysisB.marketability.toFixed(1)}\n                      </span>\n                    </td>\n                    <td className=\"py-4 text-center\">\n                      {getWinnerIcon(compareMetric(analysisA.marketability, analysisB.marketability))}\n                    </td>\n                  </tr>\n\n                  <tr>\n                    <td className=\"py-4 font-medium\">Monetization Potential</td>\n                    <td className=\"py-4 text-center\">\n                      <span className=\"text-primary font-bold text-lg\" data-testid=\"monetization-repo-a\">\n                        {analysisA.monetization.toFixed(1)}\n                      </span>\n                    </td>\n                    <td className=\"py-4 text-center\">\n                      <span className=\"text-accent font-bold text-lg\" data-testid=\"monetization-repo-b\">\n                        {analysisB.monetization.toFixed(1)}\n                      </span>\n                    </td>\n                    <td className=\"py-4 text-center\">\n                      {getWinnerIcon(compareMetric(analysisA.monetization, analysisB.monetization))}\n                    </td>\n                  </tr>\n\n                  <tr>\n                    <td className=\"py-4 font-medium\">Usefulness</td>\n                    <td className=\"py-4 text-center\">\n                      <span className=\"text-primary font-bold text-lg\" data-testid=\"usefulness-repo-a\">\n                        {analysisA.usefulness.toFixed(1)}\n                      </span>\n                    </td>\n                    <td className=\"py-4 text-center\">\n                      <span className=\"text-accent font-bold text-lg\" data-testid=\"usefulness-repo-b\">\n                        {analysisB.usefulness.toFixed(1)}\n                      </span>\n                    </td>\n                    <td className=\"py-4 text-center\">\n                      {getWinnerIcon(compareMetric(analysisA.usefulness, analysisB.usefulness))}\n                    </td>\n                  </tr>\n\n                  <tr className=\"bg-primary/10 border-t-2 border-primary/30\">\n                    <td className=\"py-6 font-bold text-lg\">Overall Score</td>\n                    <td className=\"py-6 text-center\">\n                      <span className=\"text-2xl font-bold gradient-text\" data-testid=\"overall-repo-a\">\n                        {analysisA.overallScore.toFixed(1)}\n                      </span>\n                    </td>\n                    <td className=\"py-6 text-center\">\n                      <span className=\"text-2xl font-bold gradient-text\" data-testid=\"overall-repo-b\">\n                        {analysisB.overallScore.toFixed(1)}\n                      </span>\n                    </td>\n                    <td className=\"py-6 text-center\">\n                      <div className=\"text-2xl\">\n                        {getWinnerIcon(compareMetric(analysisA.overallScore, analysisB.overallScore))}\n                      </div>\n                    </td>\n                  </tr>\n                </>\n              )}\n\n              {(!analysisA || !analysisB) && (\n                <tr>\n                  <td colSpan={4} className=\"py-8 text-center\">\n                    <div className=\"text-gray-400\">\n                      <i className=\"fas fa-info-circle mr-2\"></i>\n                      AI analysis data is not available for one or both repositories. \n                      Analyze the repositories first to see detailed comparisons.\n                    </div>\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n\n        {/* Summary */}\n        {analysisA && analysisB && (\n          <div className=\"mt-8 p-6 bg-dark rounded-lg border border-border\">\n            <h4 className=\"text-lg font-semibold mb-4\">Comparison Summary</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h5 className=\"font-medium text-primary mb-2\">{repoA.name}</h5>\n                <p className=\"text-sm text-gray-300 line-clamp-3\">\n                  {repoA.description || 'No description available'}\n                </p>\n              </div>\n              <div>\n                <h5 className=\"font-medium text-accent mb-2\">{repoB.name}</h5>\n                <p className=\"text-sm text-gray-300 line-clamp-3\">\n                  {repoB.description || 'No description available'}\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":12517},"client/src/components/header.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Notifications } from \"@/components/notifications\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n} from \"@/components/ui/navigation-menu\";\nimport { cn } from \"@/lib/utils\";\nimport React from \"react\";\n\nconst ListItem = React.forwardRef<\n  React.ElementRef<\"a\">,\n  React.ComponentPropsWithoutRef<\"a\"> & { title: string; href: string; children: React.ReactNode }\n>(({ className, title, children, href, ...props }, ref) => {\n  return (\n    <li>\n      <NavigationMenuLink asChild>\n        <Link\n          ref={ref}\n          href={href}\n          className={cn(\n            \"block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground\",\n            className\n          )}\n          {...props}\n        >\n          <div className=\"text-sm font-medium leading-none\">{title}</div>\n          <p className=\"line-clamp-2 text-sm leading-snug text-muted-foreground\">\n            {children}\n          </p>\n        </Link>\n      </NavigationMenuLink>\n    </li>\n  );\n});\nListItem.displayName = \"ListItem\";\n\nexport default function Header() {\n  const { user, isAuthenticated } = useAuth();\n\n  const displayName = user?.firstName && user?.lastName \n    ? `${user.firstName} ${user.lastName}` \n    : user?.firstName || user?.email?.split('@')[0] || 'User';\n\n  return (\n    <header className=\"bg-card border-b border-border\">\n      <div className=\"max-w-7xl mx-auto px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-8\">\n            <Link href=\"/\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 rounded-xl bg-gradient-to-r from-primary to-secondary flex items-center justify-center\">\n                  <i className=\"fas fa-code text-white\"></i>\n                </div>\n                <h1 className=\"text-2xl font-bold gradient-text\">RepoAnalyzer</h1>\n              </div>\n            </Link>\n            \n            <NavigationMenu>\n              <NavigationMenuList>\n                {isAuthenticated && (\n                  <NavigationMenuItem>\n                    <Link href=\"/\">\n                      <NavigationMenuLink className=\"group inline-flex h-10 w-max items-center justify-center rounded-md bg-transparent px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\">\n                        Home\n                      </NavigationMenuLink>\n                    </Link>\n                  </NavigationMenuItem>\n                )}\n                \n                <NavigationMenuItem>\n                  <NavigationMenuTrigger className=\"hover:bg-accent/50\">\n                    <i className=\"fas fa-compass mr-2\"></i>\n                    Discover\n                  </NavigationMenuTrigger>\n                  <NavigationMenuContent>\n                    <ul className=\"grid w-[400px] gap-3 p-4 md:w-[500px] md:grid-cols-2 lg:w-[600px]\">\n                      <li className=\"row-span-3\">\n                        <NavigationMenuLink asChild>\n                          <Link\n                            className=\"flex h-full w-full select-none flex-col justify-end rounded-md bg-gradient-to-b from-muted/50 to-muted p-6 no-underline outline-none focus:shadow-md\"\n                            href=\"/discover\"\n                          >\n                            <i className=\"fas fa-rocket text-3xl mb-2\"></i>\n                            <div className=\"mb-2 mt-4 text-lg font-medium\">\n                              Discover Trending\n                            </div>\n                            <p className=\"text-sm leading-tight text-muted-foreground\">\n                              Explore trending repositories and emerging technologies in real-time\n                            </p>\n                          </Link>\n                        </NavigationMenuLink>\n                      </li>\n                      <ListItem href=\"/search\" title=\"Advanced Search\" data-tour=\"advanced-search\">\n                        <i className=\"fas fa-search mr-2\"></i>\n                        Search with powerful filters and sorting options\n                      </ListItem>\n                      <ListItem href=\"/batch-analyze\" title=\"Batch Analysis\" data-tour=\"batch-analysis\">\n                        <i className=\"fas fa-layer-group mr-2\"></i>\n                        Analyze multiple repositories simultaneously\n                      </ListItem>\n                      <ListItem href=\"/compare\" title=\"Compare Repos\">\n                        <i className=\"fas fa-code-compare mr-2\"></i>\n                        Side-by-side repository comparisons\n                      </ListItem>\n                    </ul>\n                  </NavigationMenuContent>\n                </NavigationMenuItem>\n\n                {isAuthenticated && (\n                  <NavigationMenuItem>\n                    <NavigationMenuTrigger className=\"hover:bg-accent/50\">\n                      <i className=\"fas fa-briefcase mr-2\"></i>\n                      Workspace\n                    </NavigationMenuTrigger>\n                    <NavigationMenuContent>\n                      <ul className=\"grid gap-3 p-4 md:w-[400px] lg:w-[500px] lg:grid-cols-[.75fr_1fr]\">\n                        <li className=\"row-span-3\">\n                          <NavigationMenuLink asChild>\n                            <Link\n                              className=\"flex h-full w-full select-none flex-col justify-end rounded-md bg-gradient-to-b from-muted/50 to-muted p-6 no-underline outline-none focus:shadow-md\"\n                              href=\"/collections\"\n                            >\n                              <i className=\"fas fa-folder-open text-3xl mb-2\"></i>\n                              <div className=\"mb-2 mt-4 text-lg font-medium\">\n                                Collections\n                              </div>\n                              <p className=\"text-sm leading-tight text-muted-foreground\">\n                                Organize repositories into custom collections\n                              </p>\n                            </Link>\n                          </NavigationMenuLink>\n                        </li>\n                        <ListItem href=\"/analytics\" title=\"Analytics Dashboard\">\n                          <i className=\"fas fa-chart-line mr-2\"></i>\n                          Track analysis patterns and insights\n                        </ListItem>\n                        <ListItem href=\"/advanced-analytics\" title=\"Advanced Analytics\">\n                          <i className=\"fas fa-chart-bar mr-2\"></i>\n                          Deep insights and predictions\n                        </ListItem>\n                        <ListItem href=\"/teams\" title=\"Teams\">\n                          <i className=\"fas fa-users mr-2\"></i>\n                          Collaborate with team members\n                        </ListItem>\n                        <ListItem href=\"/developer\" title=\"Developer API\">\n                          <i className=\"fas fa-code mr-2\"></i>\n                          API keys and documentation\n                        </ListItem>\n                        <ListItem href=\"/integrations\" title=\"Integration Hub\">\n                          <i className=\"fas fa-plug mr-2\"></i>\n                          Connect with external tools\n                        </ListItem>\n                        <ListItem href=\"/code-review\" title=\"AI Code Review\">\n                          <i className=\"fas fa-robot mr-2\"></i>\n                          AI-powered code analysis\n                        </ListItem>\n                        <ListItem href=\"/profile\" title=\"Profile\">\n                          <i className=\"fas fa-user mr-2\"></i>\n                          Manage your account and preferences\n                        </ListItem>\n                        <ListItem href=\"/bookmarks\" title=\"Bookmarks\">\n                          <i className=\"fas fa-bookmark mr-2\"></i>\n                          Quick access to saved repositories\n                        </ListItem>\n                      </ul>\n                    </NavigationMenuContent>\n                  </NavigationMenuItem>\n                )}\n\n                <NavigationMenuItem>\n                  <NavigationMenuTrigger className=\"hover:bg-accent/50\">\n                    <i className=\"fas fa-graduation-cap mr-2\"></i>\n                    Resources\n                  </NavigationMenuTrigger>\n                  <NavigationMenuContent>\n                    <ul className=\"grid gap-3 p-4 md:w-[400px] lg:w-[500px] lg:grid-cols-[.75fr_1fr]\">\n                      <li className=\"row-span-3\">\n                        <NavigationMenuLink asChild>\n                          <Link\n                            className=\"flex h-full w-full select-none flex-col justify-end rounded-md bg-gradient-to-b from-muted/50 to-muted p-6 no-underline outline-none focus:shadow-md\"\n                            href=\"/docs\"\n                          >\n                            <i className=\"fas fa-book text-3xl mb-2\"></i>\n                            <div className=\"mb-2 mt-4 text-lg font-medium\">\n                              Documentation\n                            </div>\n                            <p className=\"text-sm leading-tight text-muted-foreground\">\n                              Complete guide to all features and capabilities\n                            </p>\n                          </Link>\n                        </NavigationMenuLink>\n                      </li>\n                      <ListItem href=\"/pricing\" title=\"Pricing\" data-tour=\"pricing-nav\">\n                        <i className=\"fas fa-tag mr-2\"></i>\n                        View plans and upgrade options\n                      </ListItem>\n                      <ListItem href=\"/docs#api\" title=\"API Reference\">\n                        <i className=\"fas fa-code mr-2\"></i>\n                        Developer documentation\n                      </ListItem>\n                      <ListItem href=\"/docs#faq\" title=\"FAQ\">\n                        <i className=\"fas fa-question-circle mr-2\"></i>\n                        Frequently asked questions\n                      </ListItem>\n                    </ul>\n                  </NavigationMenuContent>\n                </NavigationMenuItem>\n              </NavigationMenuList>\n            </NavigationMenu>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <div data-tour=\"theme-toggle\">\n              <ThemeToggle />\n            </div>\n            {isAuthenticated && (\n              <div data-tour=\"notification-bell\">\n                <Notifications />\n              </div>\n            )}\n            {isAuthenticated ? (\n              <div className=\"flex items-center space-x-4\">\n                <Link href=\"/profile\" data-tour=\"profile-nav\">\n                  <div className=\"flex items-center space-x-3 hover:bg-gray-800 rounded-lg px-3 py-2 transition-colors\">\n                    {user?.profileImageUrl ? (\n                      <img\n                        src={user.profileImageUrl}\n                        alt=\"Profile\"\n                        className=\"w-8 h-8 rounded-lg object-cover\"\n                        data-testid=\"img-avatar\"\n                      />\n                    ) : (\n                      <div className=\"w-8 h-8 rounded-lg bg-gradient-to-r from-primary to-secondary flex items-center justify-center\">\n                        <span className=\"text-sm font-semibold text-white\">\n                          {displayName.charAt(0).toUpperCase()}\n                        </span>\n                      </div>\n                    )}\n                    <span className=\"text-white font-medium\">{displayName}</span>\n                  </div>\n                </Link>\n              </div>\n            ) : (\n              <Button\n                onClick={() => window.location.href = '/api/login'}\n                className=\"bg-gradient-to-r from-primary to-secondary hover:from-secondary hover:to-primary text-white button-hover hover-shine button-scale\"\n                data-testid=\"button-login\"\n                data-tour=\"profile-nav\"\n              >\n                Sign In\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":12837},"client/src/components/notifications.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Bell, X, Check, Eye, Trash2 } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n  DropdownMenuLabel,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Notification {\n  id: number;\n  type: string;\n  title: string;\n  message: string;\n  repositoryId?: string;\n  metadata?: any;\n  isRead: boolean;\n  readAt?: string;\n  createdAt: string;\n  repository?: {\n    fullName: string;\n    htmlUrl: string;\n  };\n}\n\nexport function Notifications() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const wsRef = useRef<WebSocket | null>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Fetch notifications\n  const { data: notifications = [], isLoading } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\"],\n    enabled: isAuthenticated,\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const unreadCount = notifications.filter((n) => !n.isRead).length;\n\n  // Mark as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: number) => {\n      await apiRequest(\"PUT\", `/api/notifications/${notificationId}/read`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  // Mark all as read mutation\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"PUT\", \"/api/notifications/mark-all-read\", {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      toast({\n        title: \"All notifications marked as read\",\n      });\n    },\n  });\n\n  // Delete notification mutation\n  const deleteNotificationMutation = useMutation({\n    mutationFn: async (notificationId: number) => {\n      await apiRequest(\"DELETE\", `/api/notifications/${notificationId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  // WebSocket connection for real-time notifications\n  useEffect(() => {\n    if (!isAuthenticated || !user) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n\n    try {\n      const ws = new WebSocket(wsUrl);\n      wsRef.current = ws;\n\n      ws.onopen = () => {\n        // Authenticate the WebSocket connection\n        ws.send(JSON.stringify({ type: \"authenticate\", userId: user.id }));\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          \n          if (data.type === \"authenticated\") {\n            console.log(\"WebSocket authenticated\");\n          } else if (data.type === \"notification\") {\n            // New notification received\n            queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n            \n            // Show toast notification\n            toast({\n              title: data.data.title,\n              description: data.data.message,\n            });\n          }\n        } catch (error) {\n          console.error(\"WebSocket message error:\", error);\n        }\n      };\n\n      ws.onerror = (error) => {\n        console.error(\"WebSocket error:\", error);\n      };\n\n      ws.onclose = () => {\n        console.log(\"WebSocket disconnected\");\n      };\n\n      return () => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.close();\n        }\n      };\n    } catch (error) {\n      console.error(\"Failed to connect to WebSocket:\", error);\n    }\n  }, [isAuthenticated, user, toast, queryClient]);\n\n  if (!isAuthenticated) return null;\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case \"repo_update\":\n        return \"🔄\";\n      case \"star_milestone\":\n        return \"⭐\";\n      case \"new_release\":\n        return \"🚀\";\n      case \"recommendation\":\n        return \"💡\";\n      default:\n        return \"📢\";\n    }\n  };\n\n  return (\n    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"relative button-scale\"\n          data-testid=\"button-notifications\"\n        >\n          <Bell className=\"h-5 w-5\" />\n          {unreadCount > 0 && (\n            <Badge\n              variant=\"destructive\"\n              className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs pulse\"\n            >\n              {unreadCount > 9 ? \"9+\" : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-96\" align=\"end\">\n        <div className=\"flex items-center justify-between px-2 py-1.5\">\n          <DropdownMenuLabel>Notifications</DropdownMenuLabel>\n          {unreadCount > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => markAllAsReadMutation.mutate()}\n              className=\"text-xs\"\n              data-testid=\"button-mark-all-read\"\n            >\n              <Check className=\"h-3 w-3 mr-1\" />\n              Mark all read\n            </Button>\n          )}\n        </div>\n        <DropdownMenuSeparator />\n        <ScrollArea className=\"h-[400px]\">\n          {isLoading ? (\n            <div className=\"p-4 text-center text-muted-foreground\">\n              Loading notifications...\n            </div>\n          ) : notifications.length === 0 ? (\n            <div className=\"p-8 text-center text-muted-foreground\">\n              <Bell className=\"h-12 w-12 mx-auto mb-3 opacity-20\" />\n              <p className=\"text-sm\">No notifications yet</p>\n              <p className=\"text-xs mt-2\">\n                Track repositories to get updates\n              </p>\n            </div>\n          ) : (\n            <div className=\"py-1\">\n              {notifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  className={`px-3 py-2 hover:bg-muted/50 transition-colors ${\n                    !notification.isRead ? \"bg-muted/20\" : \"\"\n                  }`}\n                >\n                  <div className=\"flex items-start gap-2\">\n                    <span className=\"text-lg mt-0.5\">\n                      {getNotificationIcon(notification.type)}\n                    </span>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium text-sm\">\n                            {notification.title}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground mt-0.5\">\n                            {notification.message}\n                          </p>\n                          {notification.repository && (\n                            <a\n                              href={notification.repository.htmlUrl}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"text-xs text-primary hover:underline mt-1 inline-block\"\n                            >\n                              {notification.repository.fullName}\n                            </a>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          {!notification.isRead && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"h-6 w-6\"\n                              onClick={() =>\n                                markAsReadMutation.mutate(notification.id)\n                              }\n                              data-testid={`button-mark-read-${notification.id}`}\n                            >\n                              <Eye className=\"h-3 w-3\" />\n                            </Button>\n                          )}\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-6 w-6\"\n                            onClick={() =>\n                              deleteNotificationMutation.mutate(notification.id)\n                            }\n                            data-testid={`button-delete-notification-${notification.id}`}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {formatDistanceToNow(new Date(notification.createdAt), {\n                          addSuffix: true,\n                        })}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":9645},"client/src/components/onboarding-tour.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Joyride, { Step, CallBackProps, STATUS, EVENTS } from 'react-joyride';\nimport { useLocation } from 'wouter';\nimport { useToast } from '@/hooks/use-toast';\n\nconst tourSteps: Step[] = [\n  {\n    target: 'body',\n    placement: 'center',\n    title: '🚀 Welcome to RepoAnalyzer!',\n    content: (\n      <div className=\"space-y-2\">\n        <p>Your AI-powered GitHub repository analysis platform.</p>\n        <p className=\"text-sm text-gray-600\">Let's take a quick tour to help you get started!</p>\n      </div>\n    ),\n    disableBeacon: true,\n  },\n  {\n    target: '[data-tour=\"search-box\"]',\n    title: '🔍 Smart Repository Search',\n    content: 'Start by searching for any GitHub repository. Just paste a GitHub URL or search by name.',\n    placement: 'bottom',\n  },\n  {\n    target: '[data-tour=\"analyze-button\"]', \n    title: '🤖 AI-Powered Analysis',\n    content: 'Click \"Analyze\" to get comprehensive insights using our advanced AI. We evaluate originality, completeness, marketability, and more!',\n    placement: 'bottom',\n  },\n  {\n    target: '[data-tour=\"ai-assistant\"]',\n    title: '✨ AI Assistant',\n    content: 'Need help? Click the AI assistant button for instant, context-aware help with any feature!',\n    placement: 'left',\n  },\n  {\n    target: 'body',\n    placement: 'center',\n    title: '🎉 You\\'re All Set!',\n    content: (\n      <div className=\"space-y-3\">\n        <p>Ready to start analyzing repositories?</p>\n        <p className=\"text-sm text-gray-600\">Try searching for your own GitHub repository or explore trending projects!</p>\n        <p className=\"text-xs text-gray-500 mt-3\">Tip: You can restart this tour anytime from your profile settings.</p>\n      </div>\n    ),\n  },\n];\n\ninterface OnboardingTourProps {\n  onComplete?: () => void;\n}\n\nexport default function OnboardingTour({ onComplete }: OnboardingTourProps) {\n  const [runTour, setRunTour] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Check if tour has been completed before\n    const tourCompleted = localStorage.getItem('completedTour');\n    const skipTour = localStorage.getItem('skipTour');\n    \n    if (!tourCompleted && !skipTour) {\n      // Small delay to ensure page is fully loaded\n      setTimeout(() => {\n        setRunTour(true);\n      }, 1000);\n    }\n  }, []);\n\n  const handleJoyrideCallback = (data: CallBackProps) => {\n    const { status, type } = data;\n\n    if (status === STATUS.FINISHED) {\n      // Mark tour as completed\n      localStorage.setItem('completedTour', 'true');\n      localStorage.setItem('tourCompletedDate', new Date().toISOString());\n      setRunTour(false);\n      \n      toast({\n        title: \"Tour Completed! 🎉\",\n        description: \"You can restart the tour anytime from your profile settings.\",\n      });\n      \n      if (onComplete) {\n        onComplete();\n      }\n    } else if (status === STATUS.SKIPPED) {\n      // Mark as skipped\n      localStorage.setItem('skipTour', 'true');\n      setRunTour(false);\n      \n      toast({\n        title: \"Tour Skipped\",\n        description: \"You can restart the tour anytime from your profile settings.\",\n      });\n    }\n  };\n\n  const joyrideStyles = {\n    options: {\n      primaryColor: 'rgb(59, 130, 246)', // Blue color matching the app theme\n      backgroundColor: '#1f2937',\n      textColor: '#ffffff',\n      arrowColor: '#1f2937',\n      overlayColor: 'rgba(0, 0, 0, 0.7)',\n      beaconSize: 36,\n      zIndex: 10000,\n    },\n    tooltip: {\n      borderRadius: '8px',\n      fontSize: '14px',\n    },\n    tooltipContainer: {\n      textAlign: 'left' as const,\n    },\n    tooltipTitle: {\n      fontSize: '18px',\n      marginBottom: '8px',\n    },\n    tooltipContent: {\n      padding: '8px 0',\n    },\n    buttonNext: {\n      backgroundColor: 'rgb(59, 130, 246)',\n      borderRadius: '6px',\n      color: '#fff',\n      fontSize: '14px',\n      padding: '8px 16px',\n    },\n    buttonBack: {\n      color: '#94a3b8',\n      fontSize: '14px',\n      marginRight: '8px',\n    },\n    buttonSkip: {\n      color: '#64748b',\n      fontSize: '14px',\n    },\n    spotlight: {\n      borderRadius: '8px',\n    },\n  };\n\n  if (!runTour) return null;\n\n  return (\n    <Joyride\n      steps={tourSteps}\n      run={runTour}\n      continuous\n      showProgress\n      showSkipButton\n      scrollToFirstStep\n      scrollOffset={100}\n      spotlightPadding={10}\n      disableOverlayClose\n      disableScrollParentFix\n      callback={handleJoyrideCallback}\n      styles={joyrideStyles}\n      locale={{\n        back: 'Back',\n        close: 'Close',\n        last: 'Finish Tour',\n        next: 'Next',\n        skip: 'Skip Tour',\n      }}\n      floaterProps={{\n        disableAnimation: false,\n        disableFlip: false,\n      }}\n    />\n  );\n}\n\n// Export function to restart tour programmatically\nexport function restartTour() {\n  localStorage.removeItem('completedTour');\n  localStorage.removeItem('skipTour');\n  localStorage.removeItem('tourCompletedDate');\n  window.location.reload();\n}","size_bytes":5052},"client/src/components/progress-indicator.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { Progress } from '@/components/ui/progress';\nimport { Card, CardContent } from '@/components/ui/card';\n\ninterface ProgressIndicatorProps {\n  isAnalyzing: boolean;\n}\n\nexport function ProgressIndicator({ isAnalyzing }: ProgressIndicatorProps) {\n  const [progress, setProgress] = useState(0);\n  const [status, setStatus] = useState('');\n\n  useEffect(() => {\n    if (!isAnalyzing) {\n      setProgress(0);\n      setStatus('');\n      return;\n    }\n\n    const stages = [\n      { progress: 10, status: 'Fetching repository data...', duration: 1000 },\n      { progress: 25, status: 'Analyzing code structure...', duration: 2000 },\n      { progress: 40, status: 'Evaluating completeness...', duration: 2000 },\n      { progress: 55, status: 'Assessing marketability...', duration: 2000 },\n      { progress: 70, status: 'Calculating monetization potential...', duration: 2000 },\n      { progress: 85, status: 'Generating recommendations...', duration: 2000 },\n      { progress: 95, status: 'Finalizing analysis...', duration: 1000 },\n    ];\n\n    let currentStage = 0;\n    \n    const updateProgress = () => {\n      if (currentStage < stages.length) {\n        setProgress(stages[currentStage].progress);\n        setStatus(stages[currentStage].status);\n        \n        setTimeout(() => {\n          currentStage++;\n          updateProgress();\n        }, stages[currentStage].duration);\n      }\n    };\n\n    updateProgress();\n  }, [isAnalyzing]);\n\n  if (!isAnalyzing) return null;\n\n  return (\n    <Card className=\"bg-card/50 border border-border backdrop-blur-sm mt-6\">\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-gray-300\">{status}</span>\n            <span className=\"text-sm text-gray-400\">{progress}%</span>\n          </div>\n          <Progress value={progress} className=\"h-2 bg-gray-800\">\n            <div \n              className=\"h-full bg-gradient-to-r from-primary to-secondary transition-all duration-500\"\n              style={{ width: `${progress}%` }}\n            />\n          </Progress>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2235},"client/src/components/ratings.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Star, ThumbsUp, Edit2, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface RatingsProps {\n  repositoryId: string;\n}\n\nexport function Ratings({ repositoryId }: RatingsProps) {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [showRatingForm, setShowRatingForm] = useState(false);\n  const [rating, setRating] = useState(0);\n  const [review, setReview] = useState(\"\");\n  const [hoveredStar, setHoveredStar] = useState(0);\n\n  // Fetch ratings\n  const { data: ratingsData, isLoading } = useQuery<any>({\n    queryKey: [`/api/repositories/${repositoryId}/ratings`],\n  });\n\n  const ratings = ratingsData?.ratings || [];\n  const averageRating = ratingsData?.average || 0;\n  const totalCount = ratingsData?.count || 0;\n\n  // Check if user has already rated\n  const userRating = ratings.find((r: any) => r.userId === user?.id);\n\n  // Add/Update rating mutation\n  const submitRatingMutation = useMutation({\n    mutationFn: async ({ rating, review }: { rating: number; review: string }) => {\n      return await apiRequest(\"POST\", `/api/repositories/${repositoryId}/ratings`, {\n        rating,\n        review,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/repositories/${repositoryId}/ratings`] });\n      setShowRatingForm(false);\n      setRating(0);\n      setReview(\"\");\n      toast({\n        title: userRating ? \"Rating updated\" : \"Rating submitted\",\n        description: \"Your rating has been saved successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to submit rating\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete rating mutation\n  const deleteRatingMutation = useMutation({\n    mutationFn: async (ratingId: number) => {\n      return await apiRequest(\"DELETE\", `/api/ratings/${ratingId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/repositories/${repositoryId}/ratings`] });\n      toast({\n        title: \"Rating deleted\",\n        description: \"Your rating has been removed successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to delete rating\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mark rating as helpful mutation\n  const markHelpfulMutation = useMutation({\n    mutationFn: async (ratingId: number) => {\n      return await apiRequest(\"POST\", `/api/ratings/${ratingId}/helpful`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/repositories/${repositoryId}/ratings`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to mark as helpful\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitRating = () => {\n    if (rating > 0) {\n      submitRatingMutation.mutate({ rating, review });\n    }\n  };\n\n  const startEditingRating = () => {\n    if (userRating) {\n      setRating(userRating.rating);\n      setReview(userRating.review || \"\");\n      setShowRatingForm(true);\n    }\n  };\n\n  const renderStars = (value: number, interactive = false, size = \"h-5 w-5\") => {\n    return (\n      <div className=\"flex items-center gap-1\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Star\n            key={star}\n            className={`${size} ${\n              star <= (interactive ? hoveredStar || value : value)\n                ? \"fill-yellow-400 text-yellow-400\"\n                : \"text-gray-400\"\n            } ${interactive ? \"cursor-pointer transition-colors\" : \"\"}`}\n            onClick={interactive ? () => setRating(star) : undefined}\n            onMouseEnter={interactive ? () => setHoveredStar(star) : undefined}\n            onMouseLeave={interactive ? () => setHoveredStar(0) : undefined}\n            data-testid={interactive ? `star-rating-${star}` : undefined}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"h-32 bg-muted rounded-lg animate-pulse\" />\n        <div className=\"h-24 bg-muted rounded-lg animate-pulse\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-xl font-semibold flex items-center gap-2\">\n          <Star className=\"h-5 w-5\" />\n          Ratings & Reviews\n        </h3>\n      </div>\n\n      {/* Average Rating Display */}\n      <Card className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"text-3xl font-bold\">{averageRating.toFixed(1)}</div>\n            <div>\n              {renderStars(Math.round(averageRating))}\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Based on {totalCount} {totalCount === 1 ? \"review\" : \"reviews\"}\n              </p>\n            </div>\n          </div>\n          {isAuthenticated && !userRating && !showRatingForm && (\n            <Button\n              onClick={() => setShowRatingForm(true)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-add-rating\"\n            >\n              <Star className=\"h-4 w-4\" />\n              Add Rating\n            </Button>\n          )}\n          {isAuthenticated && userRating && !showRatingForm && (\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={startEditingRating}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-edit-rating\"\n              >\n                <Edit2 className=\"h-4 w-4\" />\n                Edit Your Rating\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => deleteRatingMutation.mutate(userRating.id)}\n                disabled={deleteRatingMutation.isPending}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-delete-rating\"\n              >\n                <Trash2 className=\"h-4 w-4\" />\n                Delete\n              </Button>\n            </div>\n          )}\n        </div>\n      </Card>\n\n      {/* Rating Form */}\n      {showRatingForm && (\n        <Card className=\"p-6\">\n          <h4 className=\"font-semibold mb-4\">\n            {userRating ? \"Edit Your Rating\" : \"Rate This Repository\"}\n          </h4>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Your Rating</label>\n              {renderStars(rating, true, \"h-8 w-8\")}\n            </div>\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Your Review (Optional)</label>\n              <Textarea\n                placeholder=\"Share your experience with this repository...\"\n                value={review}\n                onChange={(e) => setReview(e.target.value)}\n                className=\"min-h-[100px]\"\n                data-testid=\"input-review\"\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={handleSubmitRating}\n                disabled={rating === 0 || submitRatingMutation.isPending}\n                data-testid=\"button-submit-rating\"\n              >\n                {submitRatingMutation.isPending \n                  ? \"Submitting...\" \n                  : userRating \n                  ? \"Update Rating\" \n                  : \"Submit Rating\"}\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setShowRatingForm(false);\n                  setRating(0);\n                  setReview(\"\");\n                }}\n                data-testid=\"button-cancel-rating\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Ratings List */}\n      <div className=\"space-y-4\">\n        {ratings.length === 0 ? (\n          <Card className=\"p-8 text-center text-muted-foreground\">\n            <Star className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p>No ratings yet. Be the first to rate this repository!</p>\n          </Card>\n        ) : (\n          ratings.map((rating: any) => (\n            <Card key={rating.id} className=\"p-4\">\n              <div className=\"flex items-start gap-3\">\n                <Avatar className=\"h-10 w-10\">\n                  <AvatarImage src={rating.user?.profileImageUrl} />\n                  <AvatarFallback>\n                    {rating.user?.firstName?.[0] || rating.user?.email?.[0] || \"U\"}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <span className=\"font-semibold\">\n                        {rating.user?.firstName && rating.user?.lastName\n                          ? `${rating.user.firstName} ${rating.user.lastName}`\n                          : rating.user?.email?.split(\"@\")[0] || \"Anonymous\"}\n                      </span>\n                      <span className=\"text-sm text-muted-foreground ml-2\">\n                        {formatDistanceToNow(new Date(rating.createdAt), { addSuffix: true })}\n                      </span>\n                    </div>\n                    {renderStars(rating.rating)}\n                  </div>\n                  {rating.review && (\n                    <p className=\"mt-2 text-sm\">{rating.review}</p>\n                  )}\n                  <div className=\"flex items-center gap-4 mt-3\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"flex items-center gap-1 h-auto p-1\"\n                      onClick={() => markHelpfulMutation.mutate(rating.id)}\n                      disabled={!isAuthenticated || markHelpfulMutation.isPending}\n                      data-testid={`button-helpful-${rating.id}`}\n                    >\n                      <ThumbsUp className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">\n                        Helpful ({rating.helpfulCount || 0})\n                      </span>\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":11012},"client/src/components/repository-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Repository, RepositoryAnalysis } from \"@shared/schema\";\nimport { TrackRepositoryButton } from \"@/components/track-repository-button\";\nimport { getScoreHealthIndicator, getMetricHealthIndicator } from \"@/utils/health-indicators\";\n\ninterface RepositoryCardProps {\n  repository: Repository;\n  analysis?: RepositoryAnalysis;\n  showAnalysis?: boolean;\n}\n\nexport default function RepositoryCard({ repository, analysis, showAnalysis = true }: RepositoryCardProps) {\n  const getScoreColor = (score: number) => {\n    if (score >= 8) return \"text-green-400\";\n    if (score >= 6) return \"text-yellow-400\";\n    return \"text-red-400\";\n  };\n\n  const getScoreGradient = (score: number) => {\n    if (score >= 8) return \"from-green-400 to-blue-500\";\n    if (score >= 6) return \"from-yellow-400 to-orange-500\";\n    return \"from-red-400 to-pink-500\";\n  };\n\n  const handleTrackClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  return (\n    <Link href={`/repository/${repository.id}`}>\n      <Card className=\"bg-card border border-border hover:border-primary/30 transition-all duration-300 group cursor-pointer h-full card-hover card-lift fade-in\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-start justify-between mb-4\">\n            <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n              <div className=\"w-10 h-10 rounded-lg bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center flex-shrink-0\">\n                <i className=\"fab fa-github text-white\"></i>\n              </div>\n              <div className=\"min-w-0 flex-1\">\n                <h4 className=\"font-semibold text-lg truncate\">{repository.name}</h4>\n                <p className=\"text-sm text-gray-400 truncate\">{repository.fullName}</p>\n              </div>\n            </div>\n            {showAnalysis && analysis && (\n              <div className=\"flex items-center space-x-1\">\n                <span className=\"text-xl\">{getScoreHealthIndicator(analysis.overallScore * 10).emoji}</span>\n                <div className={`text-2xl font-bold ${getScoreColor(analysis.overallScore)}`}>\n                  {analysis.overallScore.toFixed(1)}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <p className=\"text-gray-300 text-sm mb-4 line-clamp-2\">\n            {repository.description || 'No description available'}\n          </p>\n\n          {showAnalysis && analysis && (\n            <div className=\"space-y-2 mb-4\">\n              <div className=\"flex items-center justify-between text-xs\">\n                <span className=\"text-gray-400\">Originality</span>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-16 h-1.5 bg-gray-700 rounded-full overflow-hidden\">\n                    <div \n                      className={`h-full bg-gradient-to-r ${getScoreGradient(analysis.originality)}`}\n                      style={{ width: `${(analysis.originality / 10) * 100}%` }}\n                    ></div>\n                  </div>\n                  <span className={`font-semibold ${getScoreColor(analysis.originality)}`}>\n                    {analysis.originality.toFixed(1)}\n                  </span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between text-xs\">\n                <span className=\"text-gray-400\">Completeness</span>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-16 h-1.5 bg-gray-700 rounded-full overflow-hidden\">\n                    <div \n                      className={`h-full bg-gradient-to-r ${getScoreGradient(analysis.completeness)}`}\n                      style={{ width: `${(analysis.completeness / 10) * 100}%` }}\n                    ></div>\n                  </div>\n                  <span className={`font-semibold ${getScoreColor(analysis.completeness)}`}>\n                    {analysis.completeness.toFixed(1)}\n                  </span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between text-xs\">\n                <span className=\"text-gray-400\">Marketability</span>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-16 h-1.5 bg-gray-700 rounded-full overflow-hidden\">\n                    <div \n                      className={`h-full bg-gradient-to-r ${getScoreGradient(analysis.marketability)}`}\n                      style={{ width: `${(analysis.marketability / 10) * 100}%` }}\n                    ></div>\n                  </div>\n                  <span className={`font-semibold ${getScoreColor(analysis.marketability)}`}>\n                    {analysis.marketability.toFixed(1)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4 text-sm text-gray-400\">\n              <div className=\"flex items-center space-x-1\">\n                <i className=\"fas fa-star text-yellow-500\"></i>\n                <span>{repository.stars?.toLocaleString() || 0}</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <i className=\"fas fa-code-branch text-blue-400\"></i>\n                <span>{repository.forks?.toLocaleString() || 0}</span>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              {repository.language && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {repository.language}\n                </Badge>\n              )}\n              <div onClick={handleTrackClick}>\n                <TrackRepositoryButton \n                  repositoryId={repository.id} \n                  repositoryName={repository.fullName}\n                />\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}","size_bytes":6195},"client/src/components/repository-list-item.tsx":{"content":"import { Star, GitFork, Eye, Calendar, Code, ExternalLink } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion } from \"framer-motion\";\nimport { format } from \"date-fns\";\n\ninterface RepositoryListItemProps {\n  repository: any;\n  similarity?: number;\n  index: number;\n  onAnalyze?: () => void;\n}\n\nexport default function RepositoryListItem({ \n  repository, \n  similarity, \n  index,\n  onAnalyze \n}: RepositoryListItemProps) {\n  const repo = repository.repository || repository;\n  \n  const formatDate = (date: string) => {\n    try {\n      return format(new Date(date), 'MMM dd, yyyy');\n    } catch {\n      return 'N/A';\n    }\n  };\n  \n  const formatNumber = (num: number) => {\n    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;\n    if (num >= 1000) return `${(num / 1000).toFixed(1)}k`;\n    return num.toString();\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, x: -20 }}\n      animate={{ opacity: 1, x: 0 }}\n      transition={{ delay: index * 0.05 }}\n    >\n      <Card className=\"bg-card/50 border border-border hover:border-[#FF6B35]/50 transition-all duration-200 p-4\">\n        <div className=\"flex items-start justify-between gap-4\">\n          {/* Main Content */}\n          <div className=\"flex-1\">\n            <div className=\"flex items-start gap-3\">\n              {/* Similarity Score */}\n              {similarity !== undefined && (\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-[#FF6B35] to-[#FF3333] flex items-center justify-center text-white font-bold\">\n                    {similarity}%\n                  </div>\n                </div>\n              )}\n              \n              {/* Repository Info */}\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <h3 className=\"text-lg font-semibold hover:text-[#FF6B35] transition-colors\">\n                    <a href={repo.htmlUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"flex items-center gap-1\">\n                      {repo.fullName}\n                      <ExternalLink className=\"w-4 h-4\" />\n                    </a>\n                  </h3>\n                  {repo.language && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      <Code className=\"w-3 h-3 mr-1\" />\n                      {repo.language}\n                    </Badge>\n                  )}\n                </div>\n                \n                <p className=\"text-sm text-gray-400 mb-2 line-clamp-2\">\n                  {repo.description || 'No description available'}\n                </p>\n                \n                {/* Topics */}\n                {repo.topics && repo.topics.length > 0 && (\n                  <div className=\"flex flex-wrap gap-1 mb-2\">\n                    {repo.topics.slice(0, 5).map((topic: string) => (\n                      <Badge key={topic} variant=\"secondary\" className=\"text-xs bg-[#FF6B35]/10 text-[#FF6B35] border-[#FF6B35]/20\">\n                        {topic}\n                      </Badge>\n                    ))}\n                    {repo.topics.length > 5 && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        +{repo.topics.length - 5} more\n                      </Badge>\n                    )}\n                  </div>\n                )}\n                \n                {/* Stats Row */}\n                <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                  <span className=\"flex items-center gap-1\">\n                    <Star className=\"w-4 h-4 text-yellow-500\" />\n                    {formatNumber(repo.stars || 0)}\n                  </span>\n                  <span className=\"flex items-center gap-1\">\n                    <GitFork className=\"w-4 h-4\" />\n                    {formatNumber(repo.forks || 0)}\n                  </span>\n                  <span className=\"flex items-center gap-1\">\n                    <Eye className=\"w-4 h-4\" />\n                    {formatNumber(repo.watchers || 0)}\n                  </span>\n                  <span className=\"flex items-center gap-1\">\n                    <Calendar className=\"w-4 h-4\" />\n                    Updated {formatDate(repo.updatedAt)}\n                  </span>\n                  {repo.size && (\n                    <span className=\"text-xs\">\n                      {(repo.size / 1024).toFixed(1)} MB\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex flex-col gap-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"border-[#FF6B35]/30 hover:border-[#FF6B35] hover:bg-[#FF6B35]/10\"\n              onClick={onAnalyze}\n              data-testid={`button-analyze-${repo.id}`}\n            >\n              Analyze\n            </Button>\n            <a href={repo.htmlUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                className=\"w-full\"\n                data-testid={`button-view-${repo.id}`}\n              >\n                View on GitHub\n              </Button>\n            </a>\n          </div>\n        </div>\n      </Card>\n    </motion.div>\n  );\n}","size_bytes":5488},"client/src/components/search-section.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function SearchSection() {\n  const [, setLocation] = useLocation();\n  const [query, setQuery] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n\n  const handleSearch = () => {\n    if (query.trim()) {\n      setLocation(`/search?q=${encodeURIComponent(query.trim())}`);\n    }\n  };\n\n  const handleAnalyze = () => {\n    if (url.trim()) {\n      setLocation(`/analyze?url=${encodeURIComponent(url.trim())}`);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent, action: () => void) => {\n    if (e.key === 'Enter') {\n      action();\n    }\n  };\n\n  return (\n    <section className=\"py-20 bg-gradient-to-b from-dark via-card to-dark\">\n      <div className=\"max-w-4xl mx-auto px-6 text-center\">\n        <h2 className=\"text-4xl font-bold mb-4\">Discover & Analyze</h2>\n        <p className=\"text-xl text-gray-300 mb-12\">\n          Search repositories or analyze specific ones with AI-powered insights\n        </p>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          {/* Search Repositories */}\n          <Card className=\"bg-card border border-border hover-lift hover-border-glow\">\n            <CardContent className=\"p-8\">\n              <div className=\"w-12 h-12 rounded-lg bg-gradient-to-r from-primary to-secondary flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-search text-white\"></i>\n              </div>\n              <h3 className=\"text-2xl font-semibold mb-4\">Search Repositories</h3>\n              <p className=\"text-gray-400 mb-6\">\n                Discover repositories by keywords, topics, or technology\n              </p>\n              <div className=\"flex space-x-3\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search repositories...\"\n                  value={query}\n                  onChange={(e) => setQuery(e.target.value)}\n                  onKeyPress={(e) => handleKeyPress(e, handleSearch)}\n                  className=\"flex-1 bg-dark border-border text-white input-focus\"\n                  data-testid=\"input-search\"\n                  data-tour=\"search-box\"\n                />\n                <Button\n                  onClick={handleSearch}\n                  className=\"bg-primary hover:bg-primary/80 text-white button-hover hover-shine button-scale ripple\"\n                  data-testid=\"button-search\"\n                >\n                  Search\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Analyze Repository */}\n          <Card className=\"bg-card border border-border hover-lift hover-border-glow\">\n            <CardContent className=\"p-8\">\n              <div className=\"w-12 h-12 rounded-lg bg-gradient-to-r from-accent to-primary flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-robot text-white\"></i>\n              </div>\n              <h3 className=\"text-2xl font-semibold mb-4\">Analyze Repository</h3>\n              <p className=\"text-gray-400 mb-6\">\n                Get AI-powered analysis of any GitHub repository\n              </p>\n              <div className=\"flex space-x-3\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"GitHub repository URL...\"\n                  value={url}\n                  onChange={(e) => setUrl(e.target.value)}\n                  onKeyPress={(e) => handleKeyPress(e, handleAnalyze)}\n                  className=\"flex-1 bg-dark border-border text-white input-focus\"\n                  data-testid=\"input-analyze\"\n                />\n                <Button\n                  onClick={handleAnalyze}\n                  className=\"bg-gradient-to-r from-accent to-primary hover:from-primary hover:to-accent text-white button-hover hover-shine button-scale ripple\"\n                  data-testid=\"button-analyze\"\n                  data-tour=\"analyze-button\"\n                >\n                  Analyze\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":4274},"client/src/components/skeleton-loader.tsx":{"content":"import React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface SkeletonLoaderProps {\n  className?: string;\n  count?: number;\n  height?: string;\n  width?: string;\n}\n\nexport const SkeletonLoader: React.FC<SkeletonLoaderProps> = ({\n  className,\n  count = 1,\n  height = '20px',\n  width = '100%',\n}) => {\n  return (\n    <div className={cn('space-y-3 fade-in', className)}>\n      {Array.from({ length: count }).map((_, index) => (\n        <div\n          key={index}\n          className=\"skeleton\"\n          style={{\n            height,\n            width,\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport const CardSkeleton: React.FC<{ className?: string }> = ({ className }) => {\n  return (\n    <div className={cn('p-6 rounded-lg border border-border bg-card fade-in', className)}>\n      <div className=\"skeleton h-6 w-3/4 mb-4\" />\n      <div className=\"skeleton h-4 w-full mb-2\" />\n      <div className=\"skeleton h-4 w-5/6 mb-4\" />\n      <div className=\"flex gap-4 mt-4\">\n        <div className=\"skeleton h-8 w-20\" />\n        <div className=\"skeleton h-8 w-20\" />\n        <div className=\"skeleton h-8 w-20\" />\n      </div>\n    </div>\n  );\n};\n\nexport const TableSkeleton: React.FC<{ rows?: number; className?: string }> = ({ \n  rows = 5, \n  className \n}) => {\n  return (\n    <div className={cn('w-full fade-in', className)}>\n      <div className=\"skeleton h-12 w-full mb-2\" />\n      {Array.from({ length: rows }).map((_, index) => (\n        <div key={index} className=\"skeleton h-16 w-full mb-2\" />\n      ))}\n    </div>\n  );\n};\n\nexport const ButtonSkeleton: React.FC<{ className?: string }> = ({ className }) => {\n  return <div className={cn('skeleton h-10 w-24 rounded-md', className)} />;\n};","size_bytes":1708},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useTheme } from '@/contexts/theme-context';\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      onClick={toggleTheme}\n      variant=\"ghost\"\n      size=\"icon\"\n      className=\"w-10 h-10 rounded-lg bg-background/50 backdrop-blur-sm border border-border hover:bg-background/80 transition-all duration-300\"\n      aria-label=\"Toggle theme\"\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === 'dark' ? (\n        <Sun className=\"h-5 w-5 text-yellow-500 rotate-0 scale-100 transition-all dark:rotate-0 dark:scale-100\" />\n      ) : (\n        <Moon className=\"h-5 w-5 text-slate-700 rotate-0 scale-100 transition-all dark:rotate-0 dark:scale-100\" />\n      )}\n    </Button>\n  );\n}","size_bytes":836},"client/src/components/track-repository-button.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Eye, EyeOff } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface TrackRepositoryButtonProps {\n  repositoryId: string;\n  repositoryName: string;\n  className?: string;\n}\n\nexport function TrackRepositoryButton({\n  repositoryId,\n  repositoryName,\n  className = \"\",\n}: TrackRepositoryButtonProps) {\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Check if repository is tracked\n  const { data: trackedRepos = [] } = useQuery<any[]>({\n    queryKey: [\"/api/user/tracked-repositories\"],\n    enabled: isAuthenticated,\n  });\n\n  const isTracked = trackedRepos.some((t: any) => t.repositoryId === repositoryId);\n  const currentTracking = trackedRepos.find((t: any) => t.repositoryId === repositoryId);\n\n  // Track repository mutation\n  const trackMutation = useMutation({\n    mutationFn: async (trackingType: string) => {\n      await apiRequest(\"POST\", `/api/repositories/${repositoryId}/track`, {\n        trackingType,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/tracked-repositories\"] });\n      toast({\n        title: \"Repository tracked\",\n        description: `You will receive notifications for ${repositoryName}`,\n      });\n      setIsOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to track repository\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Untrack repository mutation\n  const untrackMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", `/api/repositories/${repositoryId}/track`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/tracked-repositories\"] });\n      toast({\n        title: \"Repository untracked\",\n        description: `You will no longer receive notifications for ${repositoryName}`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to untrack repository\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  if (isTracked) {\n    return (\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={() => untrackMutation.mutate()}\n        disabled={untrackMutation.isPending}\n        className={`${className} border-primary/30 hover:border-primary/50`}\n        data-testid={`button-untrack-${repositoryId}`}\n      >\n        <EyeOff className=\"h-3 w-3 mr-1\" />\n        {untrackMutation.isPending ? \"Untracking...\" : \"Tracked\"}\n      </Button>\n    );\n  }\n\n  return (\n    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className={className}\n          disabled={trackMutation.isPending}\n          data-testid={`button-track-${repositoryId}`}\n        >\n          <Eye className=\"h-3 w-3 mr-1\" />\n          {trackMutation.isPending ? \"Tracking...\" : \"Track\"}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuLabel>Choose tracking type</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem\n          onClick={() => trackMutation.mutate(\"all\")}\n          data-testid={`button-track-all-${repositoryId}`}\n        >\n          <span className=\"mr-2\">🔄</span>\n          Track All Updates\n          <span className=\"ml-auto text-xs text-muted-foreground\">\n            Stars, releases, commits\n          </span>\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onClick={() => trackMutation.mutate(\"stars\")}\n          data-testid={`button-track-stars-${repositoryId}`}\n        >\n          <span className=\"mr-2\">⭐</span>\n          Track Stars Only\n          <span className=\"ml-auto text-xs text-muted-foreground\">\n            Star milestones\n          </span>\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onClick={() => trackMutation.mutate(\"releases\")}\n          data-testid={`button-track-releases-${repositoryId}`}\n        >\n          <span className=\"mr-2\">🚀</span>\n          Track Releases\n          <span className=\"ml-auto text-xs text-muted-foreground\">\n            New versions\n          </span>\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onClick={() => trackMutation.mutate(\"commits\")}\n          data-testid={`button-track-commits-${repositoryId}`}\n        >\n          <span className=\"mr-2\">💻</span>\n          Track Commits\n          <span className=\"ml-auto text-xs text-muted-foreground\">\n            Code changes\n          </span>\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onClick={() => trackMutation.mutate(\"issues\")}\n          data-testid={`button-track-issues-${repositoryId}`}\n        >\n          <span className=\"mr-2\">🐛</span>\n          Track Issues\n          <span className=\"ml-auto text-xs text-muted-foreground\">\n            New & closed\n          </span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":5611},"client/src/components/trending-repos.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Skeleton } from '@/components/ui/skeleton';\n\nexport function TrendingRepos() {\n  const { data: trending, isLoading } = useQuery({\n    queryKey: ['/api/repositories/trending'],\n    refetchInterval: 300000, // Refresh every 5 minutes\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-card border border-border\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <i className=\"fas fa-fire text-orange-500 mr-2\"></i>\n            Trending Repositories\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <Skeleton key={i} className=\"h-20 bg-gray-800\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-card border border-border\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <i className=\"fas fa-fire text-orange-500 mr-2\"></i>\n          Trending Repositories\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {Array.isArray(trending) && trending.slice(0, 5).map((repo: any) => (\n            <div key={repo.id} className=\"p-4 bg-dark rounded-lg border border-border hover:border-primary transition-colors\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <h4 className=\"font-semibold text-white\">{repo.name}</h4>\n                    {repo.language && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {repo.language}\n                      </Badge>\n                    )}\n                  </div>\n                  <p className=\"text-sm text-gray-400 line-clamp-2\">{repo.description}</p>\n                  <div className=\"flex items-center space-x-4 mt-2\">\n                    <span className=\"flex items-center text-xs text-gray-400\">\n                      <i className=\"fas fa-star text-yellow-500 mr-1\"></i>\n                      {repo.stars?.toLocaleString()}\n                    </span>\n                    <span className=\"flex items-center text-xs text-gray-400\">\n                      <i className=\"fas fa-arrow-up text-green-500 mr-1\"></i>\n                      +{repo.starsToday || Math.floor(Math.random() * 100)} today\n                    </span>\n                  </div>\n                </div>\n                <Button\n                  onClick={() => window.location.href = `/analyze?url=${encodeURIComponent(repo.htmlUrl)}`}\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"ml-2\"\n                >\n                  <i className=\"fas fa-chart-line\"></i>\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3187},"client/src/contexts/theme-context.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Check localStorage for saved theme preference\n    const savedTheme = localStorage.getItem('theme') as Theme | null;\n    if (savedTheme) return savedTheme;\n    \n    // Check system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n    \n    return 'dark'; // Default to dark theme\n  });\n\n  useEffect(() => {\n    // Apply theme class to document element\n    const root = document.documentElement;\n    if (theme === 'dark') {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n    \n    // Save theme preference\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'dark' ? 'light' : 'dark');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}","size_bytes":1497},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":306},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/advanced-analytics.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  LineChart, Line, AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell,\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar,\n  ScatterChart, Scatter, Treemap\n} from \"recharts\";\nimport { \n  TrendingUp, TrendingDown, Activity, Users, Star, GitBranch,\n  Calendar, Clock, Target, Award, AlertCircle, Download,\n  Filter, RefreshCw, ChevronUp, ChevronDown, Minus,\n  Code, FileText, Package, Zap\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\nconst COLORS = ['#8b5cf6', '#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#ec4899', '#6366f1'];\n\nexport default function AdvancedAnalytics() {\n  const { toast } = useToast();\n  const [timeRange, setTimeRange] = useState(\"30d\");\n  const [selectedMetric, setSelectedMetric] = useState(\"all\");\n  const [comparisonMode, setComparisonMode] = useState(false);\n\n  // Fetch comprehensive analytics data\n  const { data: analyticsData, isLoading } = useQuery({\n    queryKey: [\"/api/analytics/advanced\", timeRange],\n  });\n\n  // Mock data for demonstration\n  const mockData = {\n    overview: {\n      totalAnalyses: 1247,\n      averageScore: 82.5,\n      trendsUp: 15.3,\n      activeRepositories: 89,\n      teamMembers: 12,\n      apiCalls: 45678,\n    },\n    scoreDistribution: [\n      { range: \"0-20\", count: 12, percentage: 1 },\n      { range: \"21-40\", count: 45, percentage: 4 },\n      { range: \"41-60\", count: 234, percentage: 19 },\n      { range: \"61-80\", count: 567, percentage: 45 },\n      { range: \"81-100\", count: 389, percentage: 31 },\n    ],\n    timeSeriesData: Array.from({ length: 30 }, (_, i) => ({\n      date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toLocaleDateString(),\n      analyses: Math.floor(Math.random() * 50) + 20,\n      avgScore: Math.floor(Math.random() * 20) + 70,\n      repositories: Math.floor(Math.random() * 10) + 5,\n    })),\n    languageDistribution: [\n      { name: \"JavaScript\", value: 345, percentage: 28 },\n      { name: \"Python\", value: 289, percentage: 23 },\n      { name: \"TypeScript\", value: 234, percentage: 19 },\n      { name: \"Java\", value: 156, percentage: 13 },\n      { name: \"Go\", value: 123, percentage: 10 },\n      { name: \"Other\", value: 100, percentage: 7 },\n    ],\n    metricTrends: {\n      originality: { current: 78, previous: 72, trend: \"up\" },\n      completeness: { current: 85, previous: 83, trend: \"up\" },\n      marketability: { current: 71, previous: 75, trend: \"down\" },\n      monetization: { current: 68, previous: 65, trend: \"up\" },\n      usefulness: { current: 88, previous: 86, trend: \"up\" },\n    },\n    topPerformers: [\n      { name: \"awesome-react-app\", score: 95, language: \"TypeScript\", stars: 1234 },\n      { name: \"python-ml-toolkit\", score: 92, language: \"Python\", stars: 890 },\n      { name: \"go-microservice\", score: 91, language: \"Go\", stars: 567 },\n      { name: \"vue-dashboard\", score: 89, language: \"JavaScript\", stars: 456 },\n      { name: \"rust-cli-tool\", score: 88, language: \"Rust\", stars: 234 },\n    ],\n    radarData: [\n      { metric: \"Originality\", A: 78, B: 65, fullMark: 100 },\n      { metric: \"Completeness\", A: 85, B: 90, fullMark: 100 },\n      { metric: \"Marketability\", A: 71, B: 80, fullMark: 100 },\n      { metric: \"Monetization\", A: 68, B: 55, fullMark: 100 },\n      { metric: \"Usefulness\", A: 88, B: 82, fullMark: 100 },\n    ],\n    heatmapData: Array.from({ length: 7 }, (_, dayIndex) => \n      Array.from({ length: 24 }, (_, hourIndex) => ({\n        day: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"][dayIndex],\n        hour: hourIndex,\n        value: Math.floor(Math.random() * 100),\n      }))\n    ).flat(),\n  };\n\n  const data = analyticsData || mockData;\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case \"up\": return <ChevronUp className=\"h-4 w-4 text-green-500\" />;\n      case \"down\": return <ChevronDown className=\"h-4 w-4 text-red-500\" />;\n      default: return <Minus className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const exportData = () => {\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `analytics-${new Date().toISOString()}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n    toast({ title: \"Analytics data exported successfully\" });\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-7xl\">\n      <div className=\"flex justify-between items-start mb-8\">\n        <div>\n          <h1 className=\"text-4xl font-bold mb-2 bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent\">\n            Advanced Analytics Dashboard\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Deep insights into your repository analysis patterns and trends\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7d\">Last 7 days</SelectItem>\n              <SelectItem value=\"30d\">Last 30 days</SelectItem>\n              <SelectItem value=\"90d\">Last 90 days</SelectItem>\n              <SelectItem value=\"1y\">Last year</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\" size=\"icon\">\n            <RefreshCw className=\"h-4 w-4\" />\n          </Button>\n          <Button onClick={exportData}>\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics Overview */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 mb-6\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Analyses</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{data.overview.totalAnalyses}</div>\n            <p className=\"text-xs text-muted-foreground flex items-center gap-1 mt-1\">\n              <TrendingUp className=\"h-3 w-3 text-green-500\" />\n              +{data.overview.trendsUp}% from last period\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Average Score</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{data.overview.averageScore}</div>\n            <Progress value={data.overview.averageScore} className=\"mt-2\" />\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Repos</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{data.overview.activeRepositories}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Currently tracking\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Team Members</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{data.overview.teamMembers}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Active collaborators\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">API Calls</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{data.overview.apiCalls.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              This month\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Success Rate</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">98.5%</div>\n            <p className=\"text-xs text-green-500 mt-1\">\n              All systems operational\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"metrics\">Metrics Analysis</TabsTrigger>\n          <TabsTrigger value=\"languages\">Languages</TabsTrigger>\n          <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n          <TabsTrigger value=\"predictions\">Predictions</TabsTrigger>\n          <TabsTrigger value=\"insights\">AI Insights</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Analysis Trend</CardTitle>\n                <CardDescription>Number of analyses over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={data.timeSeriesData}>\n                    <defs>\n                      <linearGradient id=\"colorAnalyses\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0}/>\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"analyses\" \n                      stroke=\"#8b5cf6\" \n                      fillOpacity={1} \n                      fill=\"url(#colorAnalyses)\" \n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Score Distribution</CardTitle>\n                <CardDescription>Analysis scores breakdown</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={data.scoreDistribution}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"range\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"count\" fill=\"#3b82f6\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Top Performing Repositories</CardTitle>\n              <CardDescription>Highest scoring repositories this period</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {data.topPerformers.map((repo, index) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-gradient-to-r from-purple-500 to-blue-500 text-white text-sm font-bold\">\n                        {index + 1}\n                      </div>\n                      <div>\n                        <p className=\"font-semibold\">{repo.name}</p>\n                        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                          <Badge variant=\"outline\">{repo.language}</Badge>\n                          <span className=\"flex items-center gap-1\">\n                            <Star className=\"h-3 w-3\" />\n                            {repo.stars}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold\">{repo.score}</div>\n                      <Progress value={repo.score} className=\"w-24\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"metrics\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Metrics Comparison</CardTitle>\n                <CardDescription>Radar chart of key metrics</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <RadarChart data={data.radarData}>\n                    <PolarGrid />\n                    <PolarAngleAxis dataKey=\"metric\" />\n                    <PolarRadiusAxis angle={90} domain={[0, 100]} />\n                    <Radar name=\"Current Period\" dataKey=\"A\" stroke=\"#8b5cf6\" fill=\"#8b5cf6\" fillOpacity={0.6} />\n                    <Radar name=\"Previous Period\" dataKey=\"B\" stroke=\"#3b82f6\" fill=\"#3b82f6\" fillOpacity={0.6} />\n                    <Legend />\n                  </RadarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Metric Trends</CardTitle>\n                <CardDescription>Performance changes over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {Object.entries(data.metricTrends).map(([metric, values]) => (\n                    <div key={metric} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"capitalize font-medium\">{metric}</span>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-2xl font-bold\">{values.current}</span>\n                          {getTrendIcon(values.trend)}\n                          <span className=\"text-sm text-muted-foreground\">\n                            vs {values.previous}\n                          </span>\n                        </div>\n                      </div>\n                      <Progress value={values.current} />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Metric Correlations</CardTitle>\n              <CardDescription>How metrics relate to each other</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <ScatterChart>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"originality\" name=\"Originality\" />\n                  <YAxis dataKey=\"usefulness\" name=\"Usefulness\" />\n                  <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n                  <Scatter \n                    name=\"Repositories\" \n                    data={Array.from({ length: 50 }, () => ({\n                      originality: Math.random() * 100,\n                      usefulness: Math.random() * 100,\n                      marketability: Math.random() * 100,\n                    }))} \n                    fill=\"#8b5cf6\"\n                  />\n                </ScatterChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"languages\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Language Distribution</CardTitle>\n                <CardDescription>Repository languages analyzed</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={data.languageDistribution}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={(entry) => `${entry.name} (${entry.percentage}%)`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {data.languageDistribution.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Language Performance</CardTitle>\n                <CardDescription>Average scores by language</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {data.languageDistribution.map((lang, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div \n                          className=\"w-3 h-3 rounded-full\" \n                          style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                        />\n                        <span className=\"font-medium\">{lang.name}</span>\n                      </div>\n                      <div className=\"flex items-center gap-4\">\n                        <span className=\"text-sm text-muted-foreground\">\n                          {lang.value} repos\n                        </span>\n                        <div className=\"text-right\">\n                          <div className=\"font-bold\">{85 - index * 2}</div>\n                          <div className=\"text-xs text-muted-foreground\">avg score</div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Language Trends</CardTitle>\n              <CardDescription>Language popularity over time</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={data.timeSeriesData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Legend />\n                  <Line type=\"monotone\" dataKey=\"analyses\" stroke=\"#8b5cf6\" name=\"JavaScript\" />\n                  <Line type=\"monotone\" dataKey=\"avgScore\" stroke=\"#3b82f6\" name=\"Python\" />\n                  <Line type=\"monotone\" dataKey=\"repositories\" stroke=\"#10b981\" name=\"TypeScript\" />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"performance\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-3\">\n            <Card>\n              <CardHeader>\n                <CardTitle>API Response Time</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\">145ms</div>\n                <p className=\"text-sm text-muted-foreground\">Average latency</p>\n                <Progress value={85} className=\"mt-2\" />\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle>Analysis Speed</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\">2.3s</div>\n                <p className=\"text-sm text-muted-foreground\">Average processing time</p>\n                <Progress value={92} className=\"mt-2\" />\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle>System Uptime</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\">99.95%</div>\n                <p className=\"text-sm text-muted-foreground\">Last 30 days</p>\n                <Badge className=\"mt-2 bg-green-100 text-green-800\">Operational</Badge>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Activity Heatmap</CardTitle>\n              <CardDescription>Analysis activity by day and hour</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-25 gap-1\">\n                {/* Simplified heatmap visualization */}\n                <div className=\"text-xs text-muted-foreground col-span-1\"></div>\n                {Array.from({ length: 24 }, (_, i) => (\n                  <div key={i} className=\"text-xs text-center text-muted-foreground\">\n                    {i}\n                  </div>\n                ))}\n                {[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].map(day => (\n                  <>\n                    <div key={day} className=\"text-xs text-muted-foreground\">{day}</div>\n                    {Array.from({ length: 24 }, (_, hour) => {\n                      const intensity = Math.random();\n                      return (\n                        <div\n                          key={`${day}-${hour}`}\n                          className=\"w-5 h-5 rounded\"\n                          style={{\n                            backgroundColor: `rgba(139, 92, 246, ${intensity})`,\n                          }}\n                          title={`${day} ${hour}:00 - ${Math.floor(intensity * 100)} analyses`}\n                        />\n                      );\n                    })}\n                  </>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"predictions\" className=\"space-y-6\">\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              AI-powered predictions based on historical data and current trends\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Growth Forecast</CardTitle>\n                <CardDescription>Predicted analysis volume</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={[\n                    ...data.timeSeriesData,\n                    ...Array.from({ length: 10 }, (_, i) => ({\n                      date: `Day ${i + 31}`,\n                      analyses: Math.floor(Math.random() * 20) + 60,\n                      predicted: true,\n                    }))\n                  ]}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"analyses\" \n                      stroke=\"#8b5cf6\" \n                      strokeDasharray={entry => entry.predicted ? \"5 5\" : \"0\"}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Predicted Trends</CardTitle>\n                <CardDescription>Next 30 days outlook</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Total Analyses</span>\n                    <div className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                      <span className=\"font-bold\">+23%</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Average Score</span>\n                    <div className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                      <span className=\"font-bold\">+5 points</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>New Repositories</span>\n                    <div className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                      <span className=\"font-bold\">+45</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>API Usage</span>\n                    <div className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                      <span className=\"font-bold\">+18%</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"insights\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>AI-Generated Insights</CardTitle>\n              <CardDescription>Smart recommendations based on your data</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-[500px]\">\n                <div className=\"space-y-4\">\n                  <Alert>\n                    <Zap className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      <strong>Opportunity Detected:</strong> JavaScript repositories show 15% higher marketability scores. Consider focusing on JavaScript projects for better commercial viability.\n                    </AlertDescription>\n                  </Alert>\n\n                  <Alert>\n                    <Target className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      <strong>Performance Pattern:</strong> Repositories analyzed on Tuesdays and Thursdays tend to score 8% higher. This might indicate better code quality from mid-week commits.\n                    </AlertDescription>\n                  </Alert>\n\n                  <Alert>\n                    <Award className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      <strong>Success Factor:</strong> Projects with comprehensive documentation score 23 points higher on average. Prioritize repos with README files over 500 words.\n                    </AlertDescription>\n                  </Alert>\n\n                  <Alert>\n                    <Users className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      <strong>Team Insight:</strong> Collaborative repositories (3+ contributors) show 30% better completeness scores. Consider team size when evaluating projects.\n                    </AlertDescription>\n                  </Alert>\n\n                  <Alert>\n                    <Activity className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      <strong>Trend Alert:</strong> Machine learning repositories are showing increased monetization potential (+12% this month). This sector presents growing opportunities.\n                    </AlertDescription>\n                  </Alert>\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":29017},"client/src/pages/analytics.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { SkeletonLoader } from \"@/components/skeleton-loader\";\nimport { Link } from \"wouter\";\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  AreaChart,\n  Area\n} from \"recharts\";\nimport { CalendarDays, TrendingUp, Code, Star, GitBranch, Activity } from \"lucide-react\";\n\nconst COLORS = ['#8b5cf6', '#ec4899', '#06b6d4', '#10b981', '#f59e0b', '#ef4444'];\n\ninterface AnalyticsData {\n  stats: {\n    totalAnalyses: number;\n    thisMonth: number;\n    growth: number;\n    avgScore: number;\n    topLanguage: string;\n    activeProjects: number;\n  };\n  activity: Array<{ date: string; count: number }>;\n  languages: Array<{ name: string; value: number }>;\n  scores: Array<{ name: string; score: number }>;\n  trends: Array<{ month: string; originality: number; completeness: number; marketability: number; monetization: number; usefulness: number }>;\n  performance: Array<{ title: string; description: string; value: string; unit: string }>;\n  recentAnalyses: Array<{\n    id: string;\n    name: string;\n    owner: string;\n    language: string;\n    score: number;\n    date: string;\n  }>;\n}\n\nexport default function Analytics() {\n  const { user, isAuthenticated } = useAuth();\n\n  const { data: analyticsData, isLoading } = useQuery<AnalyticsData>({\n    queryKey: ['/api/analytics/dashboard'],\n    enabled: isAuthenticated,\n  });\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background py-12\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <Card className=\"p-8 text-center\">\n            <h2 className=\"text-2xl font-bold mb-4\">Analytics Dashboard</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Sign in to view your analytics and insights\n            </p>\n            <Button asChild>\n              <a href=\"/api/login\">Sign In</a>\n            </Button>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background py-12\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <SkeletonLoader />\n        </div>\n      </div>\n    );\n  }\n\n  const stats = analyticsData?.stats || {\n    totalAnalyses: 0,\n    thisMonth: 0,\n    growth: 0,\n    avgScore: 0,\n    topLanguage: 'N/A',\n    activeProjects: 0\n  };\n\n  const activityData = analyticsData?.activity || [];\n  const languageData = analyticsData?.languages || [];\n  const scoreData = analyticsData?.scores || [];\n  const trendData = analyticsData?.trends || [];\n  const performanceData = analyticsData?.performance || [];\n\n  return (\n    <div className=\"min-h-screen bg-background py-12\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold gradient-text mb-4\">\n            Analytics Dashboard\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Track your repository analysis patterns and insights\n          </p>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8\">\n          <Card className=\"p-4 hover:shadow-lg transition-all duration-300 card-lift\" data-testid=\"stat-total-analyses\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <Activity className=\"w-5 h-5 text-primary\" />\n              <span className=\"text-xs text-muted-foreground\">Total</span>\n            </div>\n            <div className=\"text-2xl font-bold\">{stats.totalAnalyses}</div>\n            <p className=\"text-xs text-muted-foreground\">Analyses</p>\n          </Card>\n\n          <Card className=\"p-4 hover:shadow-lg transition-all duration-300 card-lift\" data-testid=\"stat-this-month\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <CalendarDays className=\"w-5 h-5 text-secondary\" />\n              <span className=\"text-xs text-muted-foreground\">Month</span>\n            </div>\n            <div className=\"text-2xl font-bold\">{stats.thisMonth}</div>\n            <p className=\"text-xs text-muted-foreground\">This Month</p>\n          </Card>\n\n          <Card className=\"p-4 hover:shadow-lg transition-all duration-300 card-lift\" data-testid=\"stat-growth\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <TrendingUp className=\"w-5 h-5 text-green-500\" />\n              <span className=\"text-xs text-muted-foreground\">Growth</span>\n            </div>\n            <div className=\"text-2xl font-bold text-green-500\">+{stats.growth}%</div>\n            <p className=\"text-xs text-muted-foreground\">vs Last Month</p>\n          </Card>\n\n          <Card className=\"p-4 hover:shadow-lg transition-all duration-300 card-lift\" data-testid=\"stat-avg-score\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <Star className=\"w-5 h-5 text-yellow-500\" />\n              <span className=\"text-xs text-muted-foreground\">Score</span>\n            </div>\n            <div className=\"text-2xl font-bold\">{stats.avgScore.toFixed(1)}</div>\n            <p className=\"text-xs text-muted-foreground\">Avg Score</p>\n          </Card>\n\n          <Card className=\"p-4 hover:shadow-lg transition-all duration-300 card-lift\" data-testid=\"stat-top-language\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <Code className=\"w-5 h-5 text-blue-500\" />\n              <span className=\"text-xs text-muted-foreground\">Language</span>\n            </div>\n            <div className=\"text-lg font-bold\">{stats.topLanguage}</div>\n            <p className=\"text-xs text-muted-foreground\">Most Analyzed</p>\n          </Card>\n\n          <Card className=\"p-4 hover:shadow-lg transition-all duration-300 card-lift\" data-testid=\"stat-active-projects\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <GitBranch className=\"w-5 h-5 text-orange-500\" />\n              <span className=\"text-xs text-muted-foreground\">Active</span>\n            </div>\n            <div className=\"text-2xl font-bold\">{stats.activeProjects}</div>\n            <p className=\"text-xs text-muted-foreground\">Projects</p>\n          </Card>\n        </div>\n\n        {/* Charts Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          {/* Activity Chart */}\n          <Card className=\"p-6 hover:shadow-lg transition-all duration-300\">\n            <h3 className=\"text-lg font-semibold mb-4\">Analysis Activity</h3>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <AreaChart data={activityData}>\n                <defs>\n                  <linearGradient id=\"colorActivity\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8}/>\n                    <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0}/>\n                  </linearGradient>\n                </defs>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Area \n                  type=\"monotone\" \n                  dataKey=\"count\" \n                  stroke=\"#8b5cf6\" \n                  fillOpacity={1} \n                  fill=\"url(#colorActivity)\" \n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </Card>\n\n          {/* Language Distribution */}\n          <Card className=\"p-6 hover:shadow-lg transition-all duration-300\">\n            <h3 className=\"text-lg font-semibold mb-4\">Language Distribution</h3>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={languageData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {languageData.map((entry: any, index: number) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </Card>\n\n          {/* Score Breakdown */}\n          <Card className=\"p-6 hover:shadow-lg transition-all duration-300\">\n            <h3 className=\"text-lg font-semibold mb-4\">Average Scores by Metric</h3>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={scoreData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis domain={[0, 10]} />\n                <Tooltip />\n                <Bar dataKey=\"score\" fill=\"#8b5cf6\">\n                  {scoreData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Bar>\n              </BarChart>\n            </ResponsiveContainer>\n          </Card>\n\n          {/* Trend Analysis */}\n          <Card className=\"p-6 hover:shadow-lg transition-all duration-300\">\n            <h3 className=\"text-lg font-semibold mb-4\">Score Trends</h3>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={trendData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"month\" />\n                <YAxis domain={[0, 10]} />\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey=\"originality\" stroke=\"#8b5cf6\" strokeWidth={2} />\n                <Line type=\"monotone\" dataKey=\"completeness\" stroke=\"#ec4899\" strokeWidth={2} />\n                <Line type=\"monotone\" dataKey=\"marketability\" stroke=\"#06b6d4\" strokeWidth={2} />\n                <Line type=\"monotone\" dataKey=\"monetization\" stroke=\"#10b981\" strokeWidth={2} />\n                <Line type=\"monotone\" dataKey=\"usefulness\" stroke=\"#f59e0b\" strokeWidth={2} />\n              </LineChart>\n            </ResponsiveContainer>\n          </Card>\n        </div>\n\n        {/* Recent Analyses Table */}\n        <Card className=\"p-6 hover:shadow-lg transition-all duration-300\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"text-lg font-semibold\">Recent Analyses</h3>\n            <Button variant=\"outline\" size=\"sm\" asChild>\n              <Link href=\"/analyses/recent\">View All</Link>\n            </Button>\n          </div>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left p-2\">Repository</th>\n                  <th className=\"text-left p-2\">Language</th>\n                  <th className=\"text-left p-2\">Score</th>\n                  <th className=\"text-left p-2\">Date</th>\n                  <th className=\"text-left p-2\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {analyticsData?.recentAnalyses?.slice(0, 5).map((analysis: any) => (\n                  <tr key={analysis.id} className=\"border-b hover:bg-muted/50 transition-colors\">\n                    <td className=\"p-2\">\n                      <div className=\"font-medium\">{analysis.name}</div>\n                      <div className=\"text-xs text-muted-foreground\">{analysis.owner}</div>\n                    </td>\n                    <td className=\"p-2\">\n                      <span className=\"px-2 py-1 bg-primary/10 text-primary rounded-md text-xs\">\n                        {analysis.language}\n                      </span>\n                    </td>\n                    <td className=\"p-2\">\n                      <div className=\"flex items-center\">\n                        <Star className=\"w-4 h-4 text-yellow-500 mr-1\" />\n                        <span>{analysis.score.toFixed(1)}</span>\n                      </div>\n                    </td>\n                    <td className=\"p-2 text-muted-foreground text-sm\">\n                      {new Date(analysis.date).toLocaleDateString()}\n                    </td>\n                    <td className=\"p-2\">\n                      <Button variant=\"ghost\" size=\"sm\" asChild>\n                        <Link href={`/repository/${analysis.owner}/${analysis.name}`}>\n                          View\n                        </Link>\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </Card>\n\n        {/* Performance Insights */}\n        <Card className=\"p-6 mt-6 hover:shadow-lg transition-all duration-300\">\n          <h3 className=\"text-lg font-semibold mb-4\">Performance Insights</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {performanceData.map((insight: any, index: number) => (\n              <div key={index} className=\"p-4 bg-muted/50 rounded-lg\">\n                <div className=\"flex items-center mb-2\">\n                  <div className=\"w-2 h-2 rounded-full bg-primary mr-2 pulse\"></div>\n                  <span className=\"font-medium\">{insight.title}</span>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">{insight.description}</p>\n                <div className=\"mt-2\">\n                  <span className=\"text-2xl font-bold gradient-text\">{insight.value}</span>\n                  <span className=\"text-sm text-muted-foreground ml-2\">{insight.unit}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13945},"client/src/pages/analyze.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ProgressIndicator } from \"@/components/progress-indicator\";\nimport { AnalysisRadarChart, LanguageDistributionChart } from \"@/components/analysis-chart\";\nimport { jsPDF } from \"jspdf\";\nimport html2canvas from \"html2canvas\";\n\nexport default function Analyze() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { isAuthenticated } = useAuth();\n  const [url, setUrl] = useState(\"\");\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysis, setAnalysis] = useState<any>(null);\n  const [isSaved, setIsSaved] = useState(false);\n  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);\n\n  // Get URL from query params on load\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const urlParam = urlParams.get('url');\n    if (urlParam) {\n      setUrl(decodeURIComponent(urlParam));\n    }\n  }, []);\n\n  const analyzeRepositoryMutation = useMutation({\n    mutationFn: async (repositoryUrl: string) => {\n      console.log('Mutation starting for URL:', repositoryUrl);\n      setIsAnalyzing(true);\n      const response = await apiRequest('POST', '/api/repositories/analyze', { url: repositoryUrl });\n      console.log('API Response received:', response);\n      return response;\n    },\n    onSuccess: (data: any) => {\n      console.log('Analysis SUCCESS - data received:', data);\n      \n      if (!data || !data.repository) {\n        console.log('Incomplete analysis data');\n        toast({\n          title: \"Incomplete Analysis\",\n          description: \"The analysis was incomplete. Please try again.\",\n          variant: \"destructive\",\n        });\n        setIsAnalyzing(false);\n        return;\n      }\n      \n      console.log('Setting analysis state...');\n      setAnalysis(data);\n      setIsAnalyzing(false);\n      setIsSaved(data.isSaved || false);\n      toast({\n        title: \"Analysis Complete\",\n        description: \"Repository has been analyzed successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      console.log('Analysis ERROR:', error);\n      setIsAnalyzing(false);\n      if (isUnauthorizedError(error)) {\n        console.log('Unauthorized error - redirecting to login');\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      console.log('Regular error - showing toast');\n      toast({\n        title: \"Analysis Failed\",\n        description: error.message || \"Failed to analyze repository. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAnalyze = (e: React.FormEvent) => {\n    console.log('Form submitted, preventing default...');\n    e.preventDefault();\n    \n    console.log('URL to analyze:', url.trim());\n    \n    if (!url.trim()) {\n      console.log('No URL provided');\n      toast({\n        title: \"URL Required\",\n        description: \"Please enter a GitHub repository URL.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    console.log('Starting analysis...');\n    // Clear any previous analysis\n    setAnalysis(null);\n    analyzeRepositoryMutation.mutate(url.trim());\n  };\n\n  const saveRepositoryMutation = useMutation({\n    mutationFn: async (repositoryId: string) => {\n      await apiRequest('POST', '/api/saved-repositories', { repositoryId });\n    },\n    onSuccess: () => {\n      setIsSaved(true);\n      toast({\n        title: \"Repository Saved\",\n        description: \"Repository has been added to your saved list.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/saved-repositories'] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Please Log In\",\n          description: \"You need to log in to save repositories.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to save repository. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const unsaveRepositoryMutation = useMutation({\n    mutationFn: async (repositoryId: string) => {\n      await apiRequest('DELETE', `/api/saved-repositories/${repositoryId}`);\n    },\n    onSuccess: () => {\n      setIsSaved(false);\n      toast({\n        title: \"Repository Unsaved\",\n        description: \"Repository has been removed from your saved list.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/saved-repositories'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to unsave repository. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getScoreColor = (score: number) => {\n    if (score >= 8) return \"text-green-400\";\n    if (score >= 6) return \"text-yellow-400\";\n    return \"text-red-400\";\n  };\n\n  const generatePDFReport = async () => {\n    if (!analysis) return;\n    \n    setIsGeneratingPDF(true);\n    \n    try {\n      const pdf = new jsPDF('p', 'mm', 'a4');\n      const pageWidth = pdf.internal.pageSize.getWidth();\n      const pageHeight = pdf.internal.pageSize.getHeight();\n      const margin = 20;\n      let yPosition = margin;\n      \n      // Header with gradient background\n      pdf.setFillColor(59, 130, 246); // Primary color\n      pdf.rect(0, 0, pageWidth, 40, 'F');\n      \n      // Title\n      pdf.setTextColor(255, 255, 255);\n      pdf.setFontSize(24);\n      pdf.text('Repository Analysis Report', pageWidth / 2, 20, { align: 'center' });\n      \n      // Repository name\n      pdf.setFontSize(14);\n      pdf.text(analysis.repository?.name || 'Unknown Repository', pageWidth / 2, 30, { align: 'center' });\n      \n      yPosition = 50;\n      \n      // Reset text color\n      pdf.setTextColor(0, 0, 0);\n      \n      // Repository Info Section\n      pdf.setFontSize(16);\n      pdf.setFont(undefined as any, 'bold');\n      pdf.text('Repository Information', margin, yPosition);\n      yPosition += 10;\n      \n      pdf.setFontSize(11);\n      pdf.setFont(undefined as any, 'normal');\n      \n      const repoInfo = [\n        `Name: ${analysis.repository?.name || 'N/A'}`,\n        `Description: ${analysis.repository?.description || 'No description available'}`,\n        `Language: ${analysis.repository?.language || 'N/A'}`,\n        `Stars: ${analysis.repository?.stars || 0}`,\n        `Forks: ${analysis.repository?.forks || 0}`,\n        `Last Updated: ${analysis.repository?.updatedAt ? new Date(analysis.repository.updatedAt).toLocaleDateString() : 'N/A'}`\n      ];\n      \n      repoInfo.forEach(info => {\n        const lines = pdf.splitTextToSize(info, pageWidth - 2 * margin);\n        lines.forEach((line: string) => {\n          if (yPosition > pageHeight - margin) {\n            pdf.addPage();\n            yPosition = margin;\n          }\n          pdf.text(line, margin, yPosition);\n          yPosition += 6;\n        });\n      });\n      \n      yPosition += 5;\n      \n      // Analysis Summary\n      pdf.setFontSize(16);\n      pdf.setFont(undefined as any, 'bold');\n      pdf.text('Analysis Summary', margin, yPosition);\n      yPosition += 10;\n      \n      pdf.setFontSize(11);\n      pdf.setFont(undefined as any, 'normal');\n      const summaryLines = pdf.splitTextToSize(analysis.summary || 'No summary available', pageWidth - 2 * margin);\n      summaryLines.forEach((line: string) => {\n        if (yPosition > pageHeight - margin) {\n          pdf.addPage();\n          yPosition = margin;\n        }\n        pdf.text(line, margin, yPosition);\n        yPosition += 6;\n      });\n      \n      yPosition += 10;\n      \n      // Scores Section\n      pdf.setFontSize(16);\n      pdf.setFont(undefined as any, 'bold');\n      pdf.text('Analysis Scores', margin, yPosition);\n      yPosition += 10;\n      \n      const scores = [\n        { label: 'Originality', value: analysis.originality, explanation: analysis.scoreExplanations?.originality },\n        { label: 'Completeness', value: analysis.completeness, explanation: analysis.scoreExplanations?.completeness },\n        { label: 'Marketability', value: analysis.marketability, explanation: analysis.scoreExplanations?.marketability },\n        { label: 'Monetization', value: analysis.monetization, explanation: analysis.scoreExplanations?.monetization },\n        { label: 'Usefulness', value: analysis.usefulness, explanation: analysis.scoreExplanations?.usefulness },\n        { label: 'Overall Score', value: analysis.overallScore, explanation: null }\n      ];\n      \n      scores.forEach(({ label, value, explanation }) => {\n        if (yPosition > pageHeight - 30) {\n          pdf.addPage();\n          yPosition = margin;\n        }\n        \n        // Score label and value\n        pdf.setFont(undefined as any, 'bold');\n        pdf.text(`${label}: ${value?.toFixed(1)}/10`, margin, yPosition);\n        yPosition += 6;\n        \n        // Score bar\n        const barWidth = 50;\n        const barHeight = 4;\n        pdf.setFillColor(230, 230, 230);\n        pdf.rect(margin, yPosition - 3, barWidth, barHeight, 'F');\n        \n        // Filled portion\n        const fillColor = value >= 8 ? [34, 197, 94] : value >= 6 ? [59, 130, 246] : value >= 4 ? [251, 191, 36] : [239, 68, 68];\n        pdf.setFillColor(fillColor[0], fillColor[1], fillColor[2]);\n        pdf.rect(margin, yPosition - 3, (value / 10) * barWidth, barHeight, 'F');\n        yPosition += 5;\n        \n        // Explanation if available\n        if (explanation) {\n          pdf.setFont(undefined as any, 'normal');\n          pdf.setFontSize(10);\n          pdf.setTextColor(100, 100, 100);\n          const explainLines = pdf.splitTextToSize(explanation, pageWidth - 2 * margin - 10);\n          explainLines.forEach((line: string) => {\n            if (yPosition > pageHeight - margin) {\n              pdf.addPage();\n              yPosition = margin;\n            }\n            pdf.text(line, margin + 5, yPosition);\n            yPosition += 5;\n          });\n          pdf.setTextColor(0, 0, 0);\n          pdf.setFontSize(11);\n        }\n        \n        yPosition += 3;\n      });\n      \n      // Check if we need a new page for strengths\n      if (yPosition > pageHeight - 50) {\n        pdf.addPage();\n        yPosition = margin;\n      }\n      \n      yPosition += 5;\n      \n      // Strengths Section\n      pdf.setFontSize(16);\n      pdf.setFont(undefined as any, 'bold');\n      pdf.text('Key Strengths', margin, yPosition);\n      yPosition += 10;\n      \n      pdf.setFontSize(11);\n      pdf.setFont(undefined as any, 'normal');\n      analysis.strengths?.forEach((strength: any) => {\n        const point = typeof strength === 'string' ? strength : strength.point;\n        const reason = typeof strength === 'object' ? strength.reason : null;\n        \n        if (yPosition > pageHeight - 20) {\n          pdf.addPage();\n          yPosition = margin;\n        }\n        \n        pdf.setFont(undefined as any, 'bold');\n        pdf.text('• ', margin, yPosition);\n        const pointLines = pdf.splitTextToSize(point, pageWidth - 2 * margin - 10);\n        pointLines.forEach((line: string, index: number) => {\n          if (yPosition > pageHeight - margin) {\n            pdf.addPage();\n            yPosition = margin;\n          }\n          pdf.text(line, margin + (index === 0 ? 5 : 0), yPosition);\n          yPosition += 6;\n        });\n        \n        if (reason) {\n          pdf.setFont(undefined as any, 'normal');\n          pdf.setFontSize(10);\n          pdf.setTextColor(100, 100, 100);\n          const reasonLines = pdf.splitTextToSize(reason, pageWidth - 2 * margin - 10);\n          reasonLines.forEach((line: string) => {\n            if (yPosition > pageHeight - margin) {\n              pdf.addPage();\n              yPosition = margin;\n            }\n            pdf.text(line, margin + 5, yPosition);\n            yPosition += 5;\n          });\n          pdf.setTextColor(0, 0, 0);\n          pdf.setFontSize(11);\n        }\n        \n        yPosition += 2;\n      });\n      \n      // Check if we need a new page for weaknesses\n      if (yPosition > pageHeight - 50) {\n        pdf.addPage();\n        yPosition = margin;\n      }\n      \n      yPosition += 5;\n      \n      // Weaknesses Section\n      pdf.setFontSize(16);\n      pdf.setFont(undefined as any, 'bold');\n      pdf.text('Areas for Improvement', margin, yPosition);\n      yPosition += 10;\n      \n      pdf.setFontSize(11);\n      pdf.setFont(undefined as any, 'normal');\n      analysis.weaknesses?.forEach((weakness: any) => {\n        const point = typeof weakness === 'string' ? weakness : weakness.point;\n        const reason = typeof weakness === 'object' ? weakness.reason : null;\n        \n        if (yPosition > pageHeight - 20) {\n          pdf.addPage();\n          yPosition = margin;\n        }\n        \n        pdf.setFont(undefined as any, 'bold');\n        pdf.text('• ', margin, yPosition);\n        const pointLines = pdf.splitTextToSize(point, pageWidth - 2 * margin - 10);\n        pointLines.forEach((line: string, index: number) => {\n          if (yPosition > pageHeight - margin) {\n            pdf.addPage();\n            yPosition = margin;\n          }\n          pdf.text(line, margin + (index === 0 ? 5 : 0), yPosition);\n          yPosition += 6;\n        });\n        \n        if (reason) {\n          pdf.setFont(undefined as any, 'normal');\n          pdf.setFontSize(10);\n          pdf.setTextColor(100, 100, 100);\n          const reasonLines = pdf.splitTextToSize(reason, pageWidth - 2 * margin - 10);\n          reasonLines.forEach((line: string) => {\n            if (yPosition > pageHeight - margin) {\n              pdf.addPage();\n              yPosition = margin;\n            }\n            pdf.text(line, margin + 5, yPosition);\n            yPosition += 5;\n          });\n          pdf.setTextColor(0, 0, 0);\n          pdf.setFontSize(11);\n        }\n        \n        yPosition += 2;\n      });\n      \n      // Check if we need a new page for recommendations\n      if (yPosition > pageHeight - 50) {\n        pdf.addPage();\n        yPosition = margin;\n      }\n      \n      yPosition += 5;\n      \n      // Recommendations Section\n      pdf.setFontSize(16);\n      pdf.setFont(undefined as any, 'bold');\n      pdf.text('Recommendations', margin, yPosition);\n      yPosition += 10;\n      \n      pdf.setFontSize(11);\n      pdf.setFont(undefined as any, 'normal');\n      analysis.recommendations?.forEach((rec: any) => {\n        const suggestion = typeof rec === 'string' ? rec : rec.suggestion;\n        const reason = typeof rec === 'object' ? rec.reason : null;\n        const impact = typeof rec === 'object' ? rec.impact : null;\n        \n        if (yPosition > pageHeight - 30) {\n          pdf.addPage();\n          yPosition = margin;\n        }\n        \n        pdf.setFont(undefined as any, 'bold');\n        pdf.text('• ', margin, yPosition);\n        const suggestionLines = pdf.splitTextToSize(suggestion, pageWidth - 2 * margin - 10);\n        suggestionLines.forEach((line: string, index: number) => {\n          if (yPosition > pageHeight - margin) {\n            pdf.addPage();\n            yPosition = margin;\n          }\n          pdf.text(line, margin + (index === 0 ? 5 : 0), yPosition);\n          yPosition += 6;\n        });\n        \n        if (reason) {\n          pdf.setFont(undefined as any, 'normal');\n          pdf.setFontSize(10);\n          pdf.setTextColor(100, 100, 100);\n          const reasonLines = pdf.splitTextToSize(`Why: ${reason}`, pageWidth - 2 * margin - 10);\n          reasonLines.forEach((line: string) => {\n            if (yPosition > pageHeight - margin) {\n              pdf.addPage();\n              yPosition = margin;\n            }\n            pdf.text(line, margin + 5, yPosition);\n            yPosition += 5;\n          });\n        }\n        \n        if (impact) {\n          pdf.setTextColor(34, 197, 94);\n          const impactLines = pdf.splitTextToSize(`Impact: ${impact}`, pageWidth - 2 * margin - 10);\n          impactLines.forEach((line: string) => {\n            if (yPosition > pageHeight - margin) {\n              pdf.addPage();\n              yPosition = margin;\n            }\n            pdf.text(line, margin + 5, yPosition);\n            yPosition += 5;\n          });\n        }\n        \n        pdf.setTextColor(0, 0, 0);\n        pdf.setFontSize(11);\n        yPosition += 2;\n      });\n      \n      // Footer on last page\n      pdf.setFontSize(10);\n      pdf.setTextColor(150, 150, 150);\n      pdf.text(`Generated on ${new Date().toLocaleDateString()} by RepoAnalyzer`, pageWidth / 2, pageHeight - 10, { align: 'center' });\n      \n      // Save the PDF\n      const fileName = `${analysis.repository?.name || 'repository'}-analysis-${new Date().toISOString().split('T')[0]}.pdf`;\n      pdf.save(fileName);\n      \n      toast({\n        title: \"PDF Generated\",\n        description: `Report saved as ${fileName}`,\n      });\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      toast({\n        title: \"PDF Generation Failed\",\n        description: \"Unable to generate PDF report. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGeneratingPDF(false);\n    }\n  };\n\n  const getScoreGradient = (score: number) => {\n    if (score >= 8) return \"from-green-400 to-blue-500\";\n    if (score >= 6) return \"from-yellow-400 to-orange-500\";\n    return \"from-red-400 to-pink-500\";\n  };\n\n  const exportToPDF = async () => {\n    if (!analysis) return;\n    \n    const pdf = new jsPDF();\n    const pageWidth = pdf.internal.pageSize.getWidth();\n    \n    // Title\n    pdf.setFontSize(20);\n    pdf.text('Repository Analysis Report', pageWidth / 2, 20, { align: 'center' });\n    \n    // Repository Info\n    pdf.setFontSize(16);\n    pdf.text(analysis.repository?.fullName || 'Unknown Repository', 20, 40);\n    \n    pdf.setFontSize(12);\n    pdf.text(`Overall Score: ${analysis?.overallScore?.toFixed(1) || 'N/A'}`, 20, 50);\n    pdf.text(`Language: ${analysis.repository?.language || 'Unknown'}`, 20, 60);\n    pdf.text(`Stars: ${analysis.repository?.stars?.toLocaleString() || 0}`, 20, 70);\n    \n    // Scores\n    pdf.setFontSize(14);\n    pdf.text('Analysis Scores:', 20, 90);\n    pdf.setFontSize(12);\n    pdf.text(`Originality: ${analysis?.originality || 0}/10`, 30, 100);\n    pdf.text(`Completeness: ${analysis?.completeness || 0}/10`, 30, 110);\n    pdf.text(`Marketability: ${analysis?.marketability || 0}/10`, 30, 120);\n    pdf.text(`Monetization: ${analysis?.monetization || 0}/10`, 30, 130);\n    pdf.text(`Usefulness: ${analysis?.usefulness || 0}/10`, 30, 140);\n    \n    // Summary\n    pdf.setFontSize(14);\n    pdf.text('Summary:', 20, 160);\n    pdf.setFontSize(10);\n    const summary = pdf.splitTextToSize(analysis?.summary || 'No summary available', pageWidth - 40);\n    pdf.text(summary, 20, 170);\n    \n    // Save the PDF\n    pdf.save(`${analysis.repository?.name || 'repository'}-analysis.pdf`);\n    \n    toast({\n      title: \"Export Successful\",\n      description: \"Analysis report has been downloaded as PDF.\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-dark text-white\">\n      <Header />\n      \n      {/* Analysis Section */}\n      <section className=\"py-12 bg-gradient-to-r from-dark via-card to-dark\">\n        <div className=\"max-w-4xl mx-auto px-6\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl font-bold mb-4\">\n              <span className=\"gradient-text\">AI-Powered</span> Repository Analysis\n            </h1>\n            <p className=\"text-xl text-gray-300\">Get comprehensive insights into any GitHub repository</p>\n          </div>\n          \n          <Card className=\"bg-card/50 border border-border backdrop-blur-sm\">\n            <CardContent className=\"p-6\">\n              <form onSubmit={handleAnalyze} className=\"flex items-center space-x-4\">\n                <div className=\"flex-1\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Enter GitHub repository URL (e.g., https://github.com/owner/repo)\"\n                    value={url}\n                    onChange={(e) => setUrl(e.target.value)}\n                    className=\"w-full bg-dark border border-border text-white placeholder-gray-400\"\n                    data-testid=\"input-analyze-url\"\n                    disabled={isAnalyzing}\n                  />\n                </div>\n                <Button\n                  type=\"submit\"\n                  disabled={!url.trim() || isAnalyzing}\n                  className=\"bg-gradient-to-r from-accent to-primary hover:from-primary hover:to-accent px-8 py-2 rounded-lg font-semibold transition-all duration-300 disabled:opacity-50\"\n                  data-testid=\"button-analyze\"\n                >\n                  {isAnalyzing ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Analyzing...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-robot mr-2\"></i>\n                      Analyze\n                    </>\n                  )}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n          \n          {/* Progress Indicator */}\n          <ProgressIndicator isAnalyzing={isAnalyzing} />\n        </div>\n      </section>\n\n      {/* Results Section */}\n      {analysis && (\n        <section className=\"py-16 bg-dark\">\n          <div className=\"max-w-6xl mx-auto px-6\">\n            {/* Repository Info */}\n            <Card className=\"bg-card border border-border mb-8\">\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-start justify-between mb-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 rounded-xl bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center\">\n                      <i className=\"fab fa-github text-white text-2xl\"></i>\n                    </div>\n                    <div>\n                      <h2 className=\"text-3xl font-bold\" data-testid=\"text-repo-name\">\n                        {analysis.repository?.name}\n                      </h2>\n                      <p className=\"text-lg text-gray-400\" data-testid=\"text-repo-fullname\">\n                        {analysis.repository?.fullName}\n                      </p>\n                      <div className=\"flex items-center space-x-4 mt-2\">\n                        <div className=\"flex items-center space-x-1\">\n                          <i className=\"fas fa-star text-yellow-500\"></i>\n                          <span>{analysis.repository?.stars?.toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <i className=\"fas fa-code-branch text-blue-400\"></i>\n                          <span>{analysis.repository?.forks?.toLocaleString()}</span>\n                        </div>\n                        {analysis.repository?.language && (\n                          <Badge variant=\"secondary\">{analysis.repository.language}</Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className={`text-4xl font-bold ${getScoreColor(analysis?.overallScore || 0)} mb-2`}>\n                      {analysis?.overallScore?.toFixed(1) || 'N/A'}\n                    </div>\n                    <p className=\"text-gray-400\">Overall Score</p>\n                    <div className=\"flex items-center justify-end space-x-2 mt-4\">\n                      <Button\n                        onClick={exportToPDF}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"border-border text-gray-300 hover:bg-gray-800\"\n                        data-testid=\"button-export-pdf\"\n                      >\n                        <i className=\"fas fa-download mr-2\"></i>\n                        Export PDF\n                      </Button>\n                      {isAuthenticated && analysis?.repository?.id && (\n                        <Button\n                          onClick={() => {\n                            if (isSaved) {\n                              unsaveRepositoryMutation.mutate(analysis.repository.id);\n                            } else {\n                              saveRepositoryMutation.mutate(analysis.repository.id);\n                            }\n                          }}\n                          variant={isSaved ? \"secondary\" : \"default\"}\n                          size=\"sm\"\n                          data-testid={isSaved ? \"button-unsave\" : \"button-save\"}\n                        >\n                          {isSaved ? (\n                            <>\n                              <i className=\"fas fa-bookmark mr-2\"></i>\n                              Saved\n                            </>\n                          ) : (\n                            <>\n                              <i className=\"far fa-bookmark mr-2\"></i>\n                              Save\n                            </>\n                          )}\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                <p className=\"text-gray-300 leading-relaxed\" data-testid=\"text-repo-description\">\n                  {analysis.repository?.description || 'No description available'}\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Enhanced Charts */}\n            {analysis && (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n                <AnalysisRadarChart analysis={analysis} />\n                <LanguageDistributionChart languages={analysis.repository?.languages} />\n              </div>\n            )}\n            \n            {/* Analysis Results */}\n            {analysis && (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                {/* Scores with Explanations */}\n                <Card className=\"bg-card border border-border\">\n                  <CardContent className=\"p-8\">\n                    <h3 className=\"text-2xl font-semibold mb-6\">Analysis Scores</h3>\n                    \n                    <div className=\"space-y-6\">\n                      {[\n                        { label: 'Originality', score: analysis?.originality, key: 'originality' },\n                        { label: 'Completeness', score: analysis?.completeness, key: 'completeness' },\n                        { label: 'Marketability', score: analysis?.marketability, key: 'marketability' },\n                        { label: 'Monetization', score: analysis?.monetization, key: 'monetization' },\n                        { label: 'Usefulness', score: analysis?.usefulness, key: 'usefulness' },\n                      ].map(({ label, score, key }) => (\n                        <div key={label} className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-gray-300 font-medium\">{label}</span>\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-32 h-3 bg-gray-700 rounded-full overflow-hidden\">\n                                <div \n                                  className={`h-full bg-gradient-to-r ${getScoreGradient(score)}`}\n                                  style={{ width: `${(score / 10) * 100}%` }}\n                                ></div>\n                              </div>\n                              <span className={`font-bold text-lg ${getScoreColor(score)} min-w-[3rem] text-right`}>\n                                {score?.toFixed(1)}\n                              </span>\n                            </div>\n                          </div>\n                          {analysis?.scoreExplanations?.[key] && (\n                            <p className=\"text-sm text-gray-400 pl-4 border-l-2 border-gray-700\">\n                              {analysis.scoreExplanations[key]}\n                            </p>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Insights */}\n                <Card className=\"bg-card border border-border\">\n                  <CardContent className=\"p-8\">\n                    <h3 className=\"text-2xl font-semibold mb-6\">AI Insights</h3>\n                    \n                    <div className=\"space-y-6\">\n                      <div>\n                        <h4 className=\"text-lg font-semibold text-green-400 mb-3\">Strengths</h4>\n                        <ul className=\"space-y-4\">\n                          {analysis?.strengths?.map((strength: any, index: number) => (\n                            <li key={index} className=\"space-y-1\">\n                              <div className=\"flex items-start space-x-3\">\n                                <i className=\"fas fa-check text-green-400 mt-1\"></i>\n                                <span className=\"text-gray-300 font-medium\">\n                                  {typeof strength === 'string' ? strength : strength.point}\n                                </span>\n                              </div>\n                              {typeof strength === 'object' && strength.reason && (\n                                <p className=\"text-sm text-gray-400 ml-8 pl-3 border-l-2 border-green-400/30\">\n                                  {strength.reason}\n                                </p>\n                              )}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n\n                      <div>\n                        <h4 className=\"text-lg font-semibold text-yellow-400 mb-3\">Areas for Improvement</h4>\n                        <ul className=\"space-y-4\">\n                          {analysis?.weaknesses?.map((weakness: any, index: number) => (\n                            <li key={index} className=\"space-y-1\">\n                              <div className=\"flex items-start space-x-3\">\n                                <i className=\"fas fa-exclamation-triangle text-yellow-400 mt-1\"></i>\n                                <span className=\"text-gray-300 font-medium\">\n                                  {typeof weakness === 'string' ? weakness : weakness.point}\n                                </span>\n                              </div>\n                              {typeof weakness === 'object' && weakness.reason && (\n                                <p className=\"text-sm text-gray-400 ml-8 pl-3 border-l-2 border-yellow-400/30\">\n                                  {weakness.reason}\n                                </p>\n                              )}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Summary and Recommendations */}\n                <Card className=\"bg-card border border-border lg:col-span-2\">\n                  <CardContent className=\"p-8\">\n                    <h3 className=\"text-2xl font-semibold mb-6\">Summary & Recommendations</h3>\n                    \n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                      <div>\n                        <h4 className=\"text-lg font-semibold mb-3\">Summary</h4>\n                        <p className=\"text-gray-300 leading-relaxed\">\n                          {analysis?.summary}\n                        </p>\n                      </div>\n                      \n                      <div>\n                        <h4 className=\"text-lg font-semibold mb-3\">Recommendations</h4>\n                        <ul className=\"space-y-4\">\n                          {analysis?.recommendations?.map((recommendation: any, index: number) => (\n                            <li key={index} className=\"space-y-2\">\n                              <div className=\"flex items-start space-x-3\">\n                                <i className=\"fas fa-lightbulb text-blue-400 mt-1\"></i>\n                                <div className=\"flex-1\">\n                                  <span className=\"text-gray-300 font-medium block\">\n                                    {typeof recommendation === 'string' ? recommendation : recommendation.suggestion}\n                                  </span>\n                                  {typeof recommendation === 'object' && recommendation.reason && (\n                                    <p className=\"text-sm text-gray-400 mt-1\">\n                                      <strong>Why:</strong> {recommendation.reason}\n                                    </p>\n                                  )}\n                                  {typeof recommendation === 'object' && recommendation.impact && (\n                                    <p className=\"text-sm text-green-400 mt-1\">\n                                      <strong>Impact:</strong> {recommendation.impact}\n                                    </p>\n                                  )}\n                                </div>\n                              </div>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-center space-x-4 mt-8 pt-6 border-t border-border\">\n                      {analysis.repository?.id && (\n                        <Button\n                          onClick={() => {\n                            const repoId = analysis.repository?.id;\n                            if (repoId) {\n                              setLocation(`/repository/${repoId}`);\n                            } else {\n                              toast({\n                                title: \"Navigation Error\",\n                                description: \"Unable to navigate to repository details.\",\n                                variant: \"destructive\",\n                              });\n                            }\n                          }}\n                          className=\"bg-primary hover:bg-primary/80 text-white\"\n                          data-testid=\"button-view-details\"\n                        >\n                          <i className=\"fas fa-eye mr-2\"></i>\n                          View Full Details\n                        </Button>\n                      )}\n                      <Button\n                        onClick={generatePDFReport}\n                        disabled={isGeneratingPDF}\n                        className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white\"\n                        data-testid=\"button-export-pdf\"\n                      >\n                        {isGeneratingPDF ? (\n                          <>\n                            <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                            Generating...\n                          </>\n                        ) : (\n                          <>\n                            <i className=\"fas fa-file-pdf mr-2\"></i>\n                            Export PDF\n                          </>\n                        )}\n                      </Button>\n                      <Button\n                        onClick={() => {\n                          const repoId = analysis.repository?.id;\n                          const repoUrl = analysis.repository?.htmlUrl;\n                          if (repoId && repoUrl) {\n                            window.location.href = `/discover?repoId=${repoId}&repoUrl=${encodeURIComponent(repoUrl)}`;\n                          } else {\n                            toast({\n                              title: \"Navigation Error\", \n                              description: \"Unable to find similar repositories.\",\n                              variant: \"destructive\",\n                            });\n                          }\n                        }}\n                        className=\"bg-gradient-to-r from-primary to-secondary hover:from-secondary hover:to-primary text-white\"\n                        data-testid=\"button-find-similar\"\n                      >\n                        <i className=\"fas fa-search mr-2\"></i>\n                        Find Similar\n                      </Button>\n                      <Button\n                        onClick={() => {\n                          setAnalysis(null);\n                          setUrl(\"\");\n                        }}\n                        variant=\"outline\"\n                        className=\"border-border text-gray-300 hover:bg-gray-800\"\n                        data-testid=\"button-analyze-another\"\n                      >\n                        <i className=\"fas fa-plus mr-2\"></i>\n                        Analyze Another\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n        </section>\n      )}\n    </div>\n  );\n}","size_bytes":37883},"client/src/pages/batch-analyze.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Zap, X, CheckCircle, AlertCircle, Upload, Download, FileText } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { exportBatchSummary, exportToCSV } from \"@/utils/export-utils\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface BatchRepository {\n  url: string;\n  status: 'pending' | 'analyzing' | 'completed' | 'error';\n  error?: string;\n  analysis?: any;\n}\n\nexport default function BatchAnalyze() {\n  const [repoUrls, setRepoUrls] = useState(\"\");\n  const [repositories, setRepositories] = useState<BatchRepository[]>([]);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const analyzeMutation = useMutation({\n    mutationFn: async (url: string) => {\n      const repoMatch = url.match(/github\\.com\\/([^\\/]+)\\/([^\\/\\s]+)/);\n      if (!repoMatch) throw new Error('Invalid GitHub URL');\n      \n      const [, owner, repo] = repoMatch;\n      return apiRequest(\"POST\", \"/api/repositories/analyze\", {\n        owner,\n        repo: repo.replace(/\\.git$/, '')\n      });\n    }\n  });\n\n  const handleParse = () => {\n    const urls = repoUrls\n      .split(/[\\n,]/)\n      .map(url => url.trim())\n      .filter(url => url.includes('github.com'))\n      .map(url => ({\n        url,\n        status: 'pending' as const,\n      }));\n\n    if (urls.length === 0) {\n      toast({\n        title: \"No valid URLs\",\n        description: \"Please enter at least one valid GitHub repository URL\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (!user && urls.length > 3) {\n      toast({\n        title: \"Sign in required\",\n        description: \"Free users can analyze up to 3 repositories at once. Sign in for unlimited batch analysis.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setRepositories(urls);\n  };\n\n  const handleAnalyze = async () => {\n    if (repositories.length === 0) return;\n\n    setIsAnalyzing(true);\n    \n    // Process repositories sequentially to avoid overwhelming the API\n    for (let i = 0; i < repositories.length; i++) {\n      const repo = repositories[i];\n      \n      // Update status to analyzing\n      setRepositories(prev => prev.map((r, idx) => \n        idx === i ? { ...r, status: 'analyzing' } : r\n      ));\n\n      try {\n        const result = await analyzeMutation.mutateAsync(repo.url);\n        \n        // Update with completed analysis\n        setRepositories(prev => prev.map((r, idx) => \n          idx === i ? { \n            ...r, \n            status: 'completed', \n            analysis: result \n          } : r\n        ));\n      } catch (error) {\n        // Update with error\n        setRepositories(prev => prev.map((r, idx) => \n          idx === i ? { \n            ...r, \n            status: 'error', \n            error: error instanceof Error ? error.message : 'Analysis failed' \n          } : r\n        ));\n      }\n    }\n\n    setIsAnalyzing(false);\n    \n    const completed = repositories.filter(r => r.status === 'completed').length;\n    const failed = repositories.filter(r => r.status === 'error').length;\n    \n    toast({\n      title: \"Batch analysis complete\",\n      description: `Successfully analyzed ${completed} repositories${failed > 0 ? `, ${failed} failed` : ''}`,\n    });\n  };\n\n  const handleExportCSV = () => {\n    const completedRepos = repositories.filter(r => r.status === 'completed' && r.analysis);\n    \n    if (completedRepos.length === 0) {\n      toast({\n        title: \"No data to export\",\n        description: \"Complete at least one analysis before exporting\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Transform data for export utility\n    const exportData = completedRepos.map(repo => {\n      const repoInfo = repo.url.split('/');\n      const repoName = repoInfo[repoInfo.length - 1];\n      const repoOwner = repoInfo[repoInfo.length - 2];\n      \n      return {\n        id: 'batch-' + Date.now(),\n        repositoryId: repo.url,\n        originality: repo.analysis.scores?.originality || 0,\n        completeness: repo.analysis.scores?.completeness || 0,\n        marketability: repo.analysis.scores?.marketability || 0,\n        monetization: repo.analysis.scores?.monetization || 0,\n        usefulness: repo.analysis.scores?.usefulness || 0,\n        overallScore: repo.analysis.overall_score || 0,\n        summary: repo.analysis.summary || '',\n        strengths: repo.analysis.key_findings || [],\n        weaknesses: repo.analysis.weaknesses || [],\n        recommendations: repo.analysis.recommendations || [],\n        createdAt: new Date().toISOString(),\n        repository: {\n          name: repoName,\n          full_name: `${repoOwner}/${repoName}`,\n          description: repo.analysis.description || '',\n          language: repo.analysis.language || '',\n          stargazers_count: repo.analysis.stars || 0,\n          forks_count: repo.analysis.forks || 0,\n        },\n        // For backward compatibility\n        originality_score: repo.analysis.scores?.originality || 0,\n        completeness_score: repo.analysis.scores?.completeness || 0,\n        marketability_score: repo.analysis.scores?.marketability || 0,\n        monetization_score: repo.analysis.scores?.monetization || 0,\n        usefulness_score: repo.analysis.scores?.usefulness || 0,\n        overall_score: repo.analysis.overall_score || 0,\n        key_findings: repo.analysis.key_findings || [],\n      };\n    });\n\n    exportToCSV(exportData);\n    toast({\n      title: \"Export Successful\",\n      description: \"Batch analysis results exported as CSV\",\n    });\n  };\n\n  const handleExportPDF = () => {\n    const completedRepos = repositories.filter(r => r.status === 'completed' && r.analysis);\n    \n    if (completedRepos.length === 0) {\n      toast({\n        title: \"No data to export\",\n        description: \"Complete at least one analysis before exporting\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Transform data for export utility\n    const exportData = completedRepos.map(repo => {\n      const repoInfo = repo.url.split('/');\n      const repoName = repoInfo[repoInfo.length - 1];\n      const repoOwner = repoInfo[repoInfo.length - 2];\n      \n      return {\n        id: 'batch-' + Date.now(),\n        repositoryId: repo.url,\n        originality: repo.analysis.scores?.originality || 0,\n        completeness: repo.analysis.scores?.completeness || 0,\n        marketability: repo.analysis.scores?.marketability || 0,\n        monetization: repo.analysis.scores?.monetization || 0,\n        usefulness: repo.analysis.scores?.usefulness || 0,\n        overallScore: repo.analysis.overall_score || 0,\n        summary: repo.analysis.summary || '',\n        strengths: repo.analysis.key_findings || [],\n        weaknesses: repo.analysis.weaknesses || [],\n        recommendations: repo.analysis.recommendations || [],\n        createdAt: new Date().toISOString(),\n        repository: {\n          name: repoName,\n          full_name: `${repoOwner}/${repoName}`,\n          description: repo.analysis.description || '',\n          language: repo.analysis.language || '',\n          stargazers_count: repo.analysis.stars || 0,\n          forks_count: repo.analysis.forks || 0,\n        },\n        // For backward compatibility\n        originality_score: repo.analysis.scores?.originality || 0,\n        completeness_score: repo.analysis.scores?.completeness || 0,\n        marketability_score: repo.analysis.scores?.marketability || 0,\n        monetization_score: repo.analysis.scores?.monetization || 0,\n        usefulness_score: repo.analysis.scores?.usefulness || 0,\n        overall_score: repo.analysis.overall_score || 0,\n        key_findings: repo.analysis.key_findings || [],\n      };\n    });\n\n    exportBatchSummary(exportData);\n    toast({\n      title: \"Export Successful\",\n      description: \"Batch analysis results exported as PDF\",\n    });\n  };\n\n\n\n  const handleRemove = (index: number) => {\n    setRepositories(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const completedCount = repositories.filter(r => r.status === 'completed').length;\n  const errorCount = repositories.filter(r => r.status === 'error').length;\n  const progress = repositories.length > 0 \n    ? ((completedCount + errorCount) / repositories.length) * 100 \n    : 0;\n\n  return (\n    <div className=\"min-h-screen bg-dark text-white\">\n      <Header />\n\n      {/* Hero Section */}\n      <section className=\"py-12 bg-gradient-to-r from-dark via-card to-dark\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl font-bold mb-4\">\n              <Zap className=\"inline w-10 h-10 mr-2 text-yellow-400\" />\n              Batch <span className=\"gradient-text\">Repository Analysis</span>\n            </h1>\n            <p className=\"text-xl text-gray-300\">Analyze multiple repositories at once with AI-powered insights</p>\n          </div>\n        </div>\n      </section>\n\n      {/* Main Content */}\n      <section className=\"py-16 bg-dark\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-card border border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-xl flex items-center\">\n                  <Upload className=\"mr-2 w-5 h-5\" />\n                  Add Repositories\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm text-gray-400 mb-2\">\n                    Enter GitHub repository URLs (one per line or comma-separated)\n                  </label>\n                  <Textarea\n                    placeholder=\"https://github.com/owner/repo1&#10;https://github.com/owner/repo2&#10;https://github.com/owner/repo3\"\n                    value={repoUrls}\n                    onChange={(e) => setRepoUrls(e.target.value)}\n                    className=\"min-h-[200px] bg-dark border-border text-white placeholder-gray-500\"\n                    disabled={isAnalyzing}\n                  />\n                </div>\n                \n                <div className=\"flex space-x-4\">\n                  <Button\n                    onClick={handleParse}\n                    variant=\"outline\"\n                    className=\"flex-1\"\n                    disabled={isAnalyzing || !repoUrls}\n                  >\n                    Parse URLs\n                  </Button>\n                  <Button\n                    onClick={handleAnalyze}\n                    className=\"flex-1 bg-primary hover:bg-primary/80\"\n                    disabled={isAnalyzing || repositories.length === 0}\n                  >\n                    {isAnalyzing ? 'Analyzing...' : 'Start Analysis'}\n                  </Button>\n                </div>\n\n                {!user && (\n                  <Alert className=\"bg-yellow-900/20 border-yellow-600\">\n                    <AlertCircle className=\"h-4 w-4 text-yellow-600\" />\n                    <AlertDescription className=\"text-yellow-100\">\n                      Free users can analyze up to 3 repositories at once. \n                      <Link href=\"/pricing\" className=\"underline ml-1\">Upgrade to Pro</Link> for unlimited batch analysis.\n                    </AlertDescription>\n                  </Alert>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-card border border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-xl flex items-center justify-between\">\n                  <span className=\"flex items-center\">\n                    <FileText className=\"mr-2 w-5 h-5\" />\n                    Analysis Queue ({repositories.length})\n                  </span>\n                  {completedCount > 0 && (\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={handleExportCSV}\n                      >\n                        <Download className=\"w-4 h-4 mr-1\" />\n                        CSV\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={handleExportPDF}\n                      >\n                        <Download className=\"w-4 h-4 mr-1\" />\n                        PDF\n                      </Button>\n                    </div>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {repositories.length > 0 && (\n                  <div className=\"space-y-4\">\n                    <Progress value={progress} className=\"h-2\" />\n                    \n                    <div className=\"space-y-2 max-h-[400px] overflow-y-auto\">\n                      {repositories.map((repo, index) => (\n                        <div\n                          key={index}\n                          className=\"flex items-center justify-between p-3 bg-dark rounded-lg border border-border\"\n                        >\n                          <div className=\"flex items-center space-x-3 flex-1\">\n                            {repo.status === 'pending' && (\n                              <div className=\"w-4 h-4 rounded-full bg-gray-500\"></div>\n                            )}\n                            {repo.status === 'analyzing' && (\n                              <div className=\"w-4 h-4 rounded-full bg-yellow-500 animate-pulse\"></div>\n                            )}\n                            {repo.status === 'completed' && (\n                              <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                            )}\n                            {repo.status === 'error' && (\n                              <AlertCircle className=\"w-4 h-4 text-red-500\" />\n                            )}\n                            \n                            <div className=\"flex-1\">\n                              <p className=\"text-sm font-mono truncate\">\n                                {repo.url.split('/').slice(-2).join('/')}\n                              </p>\n                              {repo.status === 'completed' && repo.analysis && (\n                                <div className=\"flex items-center space-x-2 mt-1\">\n                                  <Badge variant=\"secondary\" className=\"text-xs\">\n                                    Score: {repo.analysis.overall_score}/100\n                                  </Badge>\n                                  <Link\n                                    href={`/repository/${repo.analysis.repository_id}`}\n                                    className=\"text-xs text-primary hover:underline\"\n                                  >\n                                    View Details →\n                                  </Link>\n                                </div>\n                              )}\n                              {repo.status === 'error' && (\n                                <p className=\"text-xs text-red-400 mt-1\">{repo.error}</p>\n                              )}\n                            </div>\n                          </div>\n                          \n                          {!isAnalyzing && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => handleRemove(index)}\n                            >\n                              <X className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                \n                {repositories.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-400\">\n                    <p>No repositories added yet</p>\n                    <p className=\"text-sm mt-2\">Add GitHub URLs and click \"Parse URLs\" to begin</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Statistics */}\n          {repositories.length > 0 && (\n            <Card className=\"bg-card border border-border mt-8\">\n              <CardContent className=\"py-6\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-white\">{repositories.length}</p>\n                    <p className=\"text-sm text-gray-400\">Total</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-yellow-400\">\n                      {repositories.filter(r => r.status === 'analyzing').length}\n                    </p>\n                    <p className=\"text-sm text-gray-400\">Analyzing</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-green-400\">{completedCount}</p>\n                    <p className=\"text-sm text-gray-400\">Completed</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-red-400\">{errorCount}</p>\n                    <p className=\"text-sm text-gray-400\">Failed</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":18074},"client/src/pages/checkout.tsx":{"content":"import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Loader2 } from \"lucide-react\";\n\n// Stripe public key will be provided by user\nconst stripePromise = import.meta.env.VITE_STRIPE_PUBLIC_KEY \n  ? loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY)\n  : null;\n\nconst CheckoutForm = ({ plan }: { plan: string }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: `${window.location.origin}/payment-success?plan=${plan}`,\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <PaymentElement />\n      <Button \n        type=\"submit\" \n        disabled={!stripe || isProcessing}\n        className=\"w-full bg-gradient-to-r from-[#FF6B35] to-[#FF3333] hover:from-[#FF6B35]/90 hover:to-[#FF3333]/90\"\n        data-testid=\"button-submit-payment\"\n      >\n        {isProcessing ? (\n          <>\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            Processing...\n          </>\n        ) : (\n          `Subscribe to ${plan.charAt(0).toUpperCase() + plan.slice(1)} Plan`\n        )}\n      </Button>\n    </form>\n  );\n};\n\nexport default function Checkout() {\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Extract plan from query params\n  const params = new URLSearchParams(location.split('?')[1]);\n  const plan = params.get('plan') || 'pro';\n\n  useEffect(() => {\n    if (!stripePromise) {\n      toast({\n        title: \"Configuration Error\",\n        description: \"Payment system is not configured. Please contact support.\",\n        variant: \"destructive\",\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    // Create subscription intent\n    apiRequest(\"POST\", \"/api/create-subscription\", { plan })\n      .then(async (response) => {\n        const data = await response.json();\n        setClientSecret(data.clientSecret);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Error creating subscription:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to initialize payment. Please try again.\",\n          variant: \"destructive\",\n        });\n        setIsLoading(false);\n      });\n  }, [plan, toast]);\n\n  if (!stripePromise) {\n    return (\n      <div className=\"container mx-auto px-4 py-16 max-w-2xl\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Payment System Not Configured</CardTitle>\n            <CardDescription>\n              The payment system is currently being set up. Please check back later or contact support.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button \n              onClick={() => setLocation(\"/pricing\")}\n              variant=\"outline\"\n              className=\"w-full\"\n              data-testid=\"button-back-pricing\"\n            >\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Pricing\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-16 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4 text-[#FF6B35]\" />\n          <p className=\"text-muted-foreground\">Preparing checkout...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!clientSecret) {\n    return (\n      <div className=\"container mx-auto px-4 py-16 max-w-2xl\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Unable to Process Payment</CardTitle>\n            <CardDescription>\n              There was an error setting up your subscription. Please try again.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button \n              onClick={() => setLocation(\"/pricing\")}\n              variant=\"outline\"\n              className=\"w-full\"\n              data-testid=\"button-retry-pricing\"\n            >\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Pricing\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-16 max-w-2xl\">\n      <Button\n        onClick={() => setLocation(\"/pricing\")}\n        variant=\"ghost\"\n        className=\"mb-6\"\n        data-testid=\"button-back\"\n      >\n        <ArrowLeft className=\"mr-2 h-4 w-4\" />\n        Back to Pricing\n      </Button>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Complete Your Subscription</CardTitle>\n          <CardDescription>\n            You're subscribing to the {plan.charAt(0).toUpperCase() + plan.slice(1)} plan\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Elements stripe={stripePromise} options={{ clientSecret }}>\n            <CheckoutForm plan={plan} />\n          </Elements>\n        </CardContent>\n      </Card>\n\n      <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n        <p>Your subscription will renew automatically each month.</p>\n        <p>You can cancel anytime from your profile settings.</p>\n      </div>\n    </div>\n  );\n}","size_bytes":6215},"client/src/pages/code-review.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Code, FileCode, GitBranch, AlertTriangle, CheckCircle, \n  XCircle, Info, Lightbulb, Shield, Zap, Clock, \n  TrendingUp, Bug, Lock, Sparkles, FileText, Search\n} from \"lucide-react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\n\ninterface CodeIssue {\n  type: 'error' | 'warning' | 'suggestion' | 'security';\n  severity: 'critical' | 'high' | 'medium' | 'low';\n  line: number;\n  column: number;\n  message: string;\n  suggestion?: string;\n  file: string;\n  category: string;\n}\n\ninterface ReviewResult {\n  overallScore: number;\n  codeQuality: number;\n  security: number;\n  performance: number;\n  maintainability: number;\n  testCoverage: number;\n  issues: CodeIssue[];\n  suggestions: string[];\n  positives: string[];\n  metrics: {\n    linesOfCode: number;\n    complexity: number;\n    duplications: number;\n    technicalDebt: string;\n  };\n}\n\nexport default function CodeReview() {\n  const { toast } = useToast();\n  const [repoUrl, setRepoUrl] = useState(\"\");\n  const [codeSnippet, setCodeSnippet] = useState(\"\");\n  const [reviewResult, setReviewResult] = useState<ReviewResult | null>(null);\n  const [activeTab, setActiveTab] = useState(\"repository\");\n\n  const reviewMutation = useMutation({\n    mutationFn: async (data: { type: string; content: string }) => {\n      // Simulate AI code review\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // Mock result for demonstration\n      return {\n        overallScore: 78,\n        codeQuality: 82,\n        security: 75,\n        performance: 71,\n        maintainability: 85,\n        testCoverage: 68,\n        issues: [\n          {\n            type: 'security' as const,\n            severity: 'high' as const,\n            line: 42,\n            column: 15,\n            message: 'SQL injection vulnerability detected in user input handling',\n            suggestion: 'Use parameterized queries or prepared statements',\n            file: 'src/api/database.js',\n            category: 'Security'\n          },\n          {\n            type: 'error' as const,\n            severity: 'critical' as const,\n            line: 156,\n            column: 8,\n            message: 'Potential null pointer exception',\n            suggestion: 'Add null check before accessing object properties',\n            file: 'src/utils/helpers.js',\n            category: 'Runtime Error'\n          },\n          {\n            type: 'warning' as const,\n            severity: 'medium' as const,\n            line: 89,\n            column: 12,\n            message: 'Unused variable \"tempData\"',\n            suggestion: 'Remove unused variable to improve code clarity',\n            file: 'src/components/Dashboard.jsx',\n            category: 'Code Quality'\n          },\n          {\n            type: 'suggestion' as const,\n            severity: 'low' as const,\n            line: 234,\n            column: 4,\n            message: 'Function complexity is too high (cyclomatic complexity: 15)',\n            suggestion: 'Consider breaking this function into smaller, more focused functions',\n            file: 'src/services/analyzer.js',\n            category: 'Maintainability'\n          },\n        ],\n        suggestions: [\n          'Implement comprehensive error handling throughout the application',\n          'Add unit tests to increase code coverage from 68% to at least 80%',\n          'Refactor complex functions to improve maintainability',\n          'Update dependencies to latest stable versions for security patches',\n          'Add input validation for all user-facing endpoints',\n        ],\n        positives: [\n          'Good separation of concerns with clear module boundaries',\n          'Consistent coding style across the project',\n          'Efficient use of modern JavaScript features',\n          'Well-documented API endpoints',\n          'Proper use of environment variables for configuration',\n        ],\n        metrics: {\n          linesOfCode: 12458,\n          complexity: 145,\n          duplications: 23,\n          technicalDebt: '3.5 days',\n        }\n      };\n    },\n    onSuccess: (data) => {\n      setReviewResult(data);\n      toast({ \n        title: \"Code review completed\", \n        description: `Found ${data.issues.length} issues to address` \n      });\n    },\n    onError: () => {\n      toast({ \n        title: \"Review failed\", \n        description: \"Unable to complete code review\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const startReview = () => {\n    if (activeTab === \"repository\" && repoUrl) {\n      reviewMutation.mutate({ type: \"repository\", content: repoUrl });\n    } else if (activeTab === \"snippet\" && codeSnippet) {\n      reviewMutation.mutate({ type: \"snippet\", content: codeSnippet });\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'text-red-600 bg-red-100';\n      case 'high': return 'text-orange-600 bg-orange-100';\n      case 'medium': return 'text-yellow-600 bg-yellow-100';\n      case 'low': return 'text-blue-600 bg-blue-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'error': return <XCircle className=\"h-4 w-4\" />;\n      case 'warning': return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'suggestion': return <Lightbulb className=\"h-4 w-4\" />;\n      case 'security': return <Shield className=\"h-4 w-4\" />;\n      default: return <Info className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-7xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold mb-2 bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\">\n          AI-Powered Code Review\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Get comprehensive code analysis with AI-driven insights and recommendations\n        </p>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-3\">\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Start Review</CardTitle>\n              <CardDescription>\n                Analyze a repository or code snippet\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Tabs value={activeTab} onValueChange={setActiveTab}>\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"repository\">Repository</TabsTrigger>\n                  <TabsTrigger value=\"snippet\">Code Snippet</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"repository\" className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"repo-url\">Repository URL</Label>\n                    <Input\n                      id=\"repo-url\"\n                      type=\"url\"\n                      placeholder=\"https://github.com/user/repo\"\n                      value={repoUrl}\n                      onChange={(e) => setRepoUrl(e.target.value)}\n                    />\n                  </div>\n                  <Alert>\n                    <Info className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      Enter a public GitHub repository URL for comprehensive analysis\n                    </AlertDescription>\n                  </Alert>\n                </TabsContent>\n                \n                <TabsContent value=\"snippet\" className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"code\">Code Snippet</Label>\n                    <Textarea\n                      id=\"code\"\n                      placeholder=\"Paste your code here...\"\n                      value={codeSnippet}\n                      onChange={(e) => setCodeSnippet(e.target.value)}\n                      className=\"h-64 font-mono text-sm\"\n                    />\n                  </div>\n                  <Alert>\n                    <Info className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      Paste code for quick analysis and suggestions\n                    </AlertDescription>\n                  </Alert>\n                </TabsContent>\n              </Tabs>\n              \n              <Button \n                className=\"w-full mt-4\"\n                onClick={startReview}\n                disabled={reviewMutation.isPending || (!repoUrl && !codeSnippet)}\n              >\n                {reviewMutation.isPending ? (\n                  <>\n                    <Clock className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Analyzing...\n                  </>\n                ) : (\n                  <>\n                    <Sparkles className=\"h-4 w-4 mr-2\" />\n                    Start AI Review\n                  </>\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {reviewResult && (\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle>Review Metrics</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <div className=\"flex justify-between mb-1\">\n                    <span className=\"text-sm\">Overall Score</span>\n                    <span className=\"font-bold\">{reviewResult.overallScore}/100</span>\n                  </div>\n                  <Progress value={reviewResult.overallScore} />\n                </div>\n                <div>\n                  <div className=\"flex justify-between mb-1\">\n                    <span className=\"text-sm\">Code Quality</span>\n                    <span className=\"font-bold\">{reviewResult.codeQuality}/100</span>\n                  </div>\n                  <Progress value={reviewResult.codeQuality} />\n                </div>\n                <div>\n                  <div className=\"flex justify-between mb-1\">\n                    <span className=\"text-sm\">Security</span>\n                    <span className=\"font-bold\">{reviewResult.security}/100</span>\n                  </div>\n                  <Progress value={reviewResult.security} />\n                </div>\n                <div>\n                  <div className=\"flex justify-between mb-1\">\n                    <span className=\"text-sm\">Performance</span>\n                    <span className=\"font-bold\">{reviewResult.performance}/100</span>\n                  </div>\n                  <Progress value={reviewResult.performance} />\n                </div>\n                <div>\n                  <div className=\"flex justify-between mb-1\">\n                    <span className=\"text-sm\">Maintainability</span>\n                    <span className=\"font-bold\">{reviewResult.maintainability}/100</span>\n                  </div>\n                  <Progress value={reviewResult.maintainability} />\n                </div>\n                <div>\n                  <div className=\"flex justify-between mb-1\">\n                    <span className=\"text-sm\">Test Coverage</span>\n                    <span className=\"font-bold\">{reviewResult.testCoverage}%</span>\n                  </div>\n                  <Progress value={reviewResult.testCoverage} />\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        <div className=\"lg:col-span-2\">\n          {reviewResult ? (\n            <Tabs defaultValue=\"issues\" className=\"space-y-4\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"issues\">\n                  Issues ({reviewResult.issues.length})\n                </TabsTrigger>\n                <TabsTrigger value=\"suggestions\">Suggestions</TabsTrigger>\n                <TabsTrigger value=\"positives\">Positives</TabsTrigger>\n                <TabsTrigger value=\"metrics\">Metrics</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"issues\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Code Issues</CardTitle>\n                    <CardDescription>\n                      Problems and improvements found in your code\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ScrollArea className=\"h-[600px]\">\n                      <Accordion type=\"single\" collapsible className=\"space-y-2\">\n                        {reviewResult.issues.map((issue, index) => (\n                          <AccordionItem key={index} value={`issue-${index}`}>\n                            <AccordionTrigger>\n                              <div className=\"flex items-center gap-3 text-left\">\n                                {getTypeIcon(issue.type)}\n                                <div className=\"flex-1\">\n                                  <div className=\"font-medium\">{issue.message}</div>\n                                  <div className=\"flex items-center gap-2 mt-1\">\n                                    <Badge className={getSeverityColor(issue.severity)}>\n                                      {issue.severity}\n                                    </Badge>\n                                    <span className=\"text-xs text-muted-foreground\">\n                                      {issue.file}:{issue.line}:{issue.column}\n                                    </span>\n                                  </div>\n                                </div>\n                              </div>\n                            </AccordionTrigger>\n                            <AccordionContent>\n                              <div className=\"space-y-3 pt-3\">\n                                <div>\n                                  <p className=\"text-sm font-medium mb-1\">Category</p>\n                                  <Badge variant=\"outline\">{issue.category}</Badge>\n                                </div>\n                                {issue.suggestion && (\n                                  <div>\n                                    <p className=\"text-sm font-medium mb-1\">Suggestion</p>\n                                    <p className=\"text-sm text-muted-foreground\">\n                                      {issue.suggestion}\n                                    </p>\n                                  </div>\n                                )}\n                                <div className=\"flex gap-2\">\n                                  <Button size=\"sm\" variant=\"outline\">\n                                    <FileCode className=\"h-4 w-4 mr-2\" />\n                                    View Code\n                                  </Button>\n                                  <Button size=\"sm\" variant=\"outline\">\n                                    <GitBranch className=\"h-4 w-4 mr-2\" />\n                                    Create Fix\n                                  </Button>\n                                </div>\n                              </div>\n                            </AccordionContent>\n                          </AccordionItem>\n                        ))}\n                      </Accordion>\n                    </ScrollArea>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"suggestions\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>AI Recommendations</CardTitle>\n                    <CardDescription>\n                      Suggestions to improve your codebase\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {reviewResult.suggestions.map((suggestion, index) => (\n                        <Alert key={index}>\n                          <Lightbulb className=\"h-4 w-4\" />\n                          <AlertDescription>{suggestion}</AlertDescription>\n                        </Alert>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"positives\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>What's Working Well</CardTitle>\n                    <CardDescription>\n                      Positive aspects of your code\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {reviewResult.positives.map((positive, index) => (\n                        <Alert key={index}>\n                          <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                          <AlertDescription>{positive}</AlertDescription>\n                        </Alert>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"metrics\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Code Metrics</CardTitle>\n                    <CardDescription>\n                      Detailed metrics about your codebase\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid gap-4 md:grid-cols-2\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-sm font-medium\">Lines of Code</span>\n                        </div>\n                        <p className=\"text-2xl font-bold\">\n                          {reviewResult.metrics.linesOfCode.toLocaleString()}\n                        </p>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <Zap className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-sm font-medium\">Complexity</span>\n                        </div>\n                        <p className=\"text-2xl font-bold\">{reviewResult.metrics.complexity}</p>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <Bug className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-sm font-medium\">Code Duplications</span>\n                        </div>\n                        <p className=\"text-2xl font-bold\">{reviewResult.metrics.duplications}</p>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-sm font-medium\">Technical Debt</span>\n                        </div>\n                        <p className=\"text-2xl font-bold\">{reviewResult.metrics.technicalDebt}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          ) : (\n            <Card className=\"h-full flex items-center justify-center\">\n              <CardContent className=\"text-center py-16\">\n                <Code className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No Review Yet</h3>\n                <p className=\"text-muted-foreground\">\n                  Enter a repository URL or code snippet to start the AI-powered review\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20522},"client/src/pages/collections.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { CollectionsManager } from \"@/components/collections-manager\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Folder } from \"lucide-react\";\n\nexport default function Collections() {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-dark text-white\">\n        <Header />\n        <div className=\"flex items-center justify-center h-[calc(100vh-80px)]\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-dark text-white\">\n        <Header />\n        <div className=\"flex items-center justify-center h-[calc(100vh-80px)]\">\n          <Card className=\"bg-card border border-border p-8 max-w-md w-full\">\n            <CardContent className=\"text-center\">\n              <Folder className=\"w-16 h-16 text-gray-600 mx-auto mb-4\" />\n              <h2 className=\"text-2xl font-bold mb-2\">Sign in Required</h2>\n              <p className=\"text-gray-400 mb-6\">\n                You need to be signed in to create and manage collections.\n              </p>\n              <Button\n                onClick={() => window.location.href = '/api/login'}\n                className=\"bg-gradient-to-r from-primary to-secondary hover:from-secondary hover:to-primary\"\n                data-testid=\"button-sign-in\"\n              >\n                Sign In\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-dark text-white\">\n      <Header />\n      \n      <div className=\"max-w-6xl mx-auto px-6 py-8\">\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold gradient-text mb-2\">My Collections</h1>\n          <p className=\"text-gray-400\">\n            Organize your favorite repositories into themed collections for easy access and management.\n          </p>\n        </div>\n\n        {/* Collections Manager */}\n        <CollectionsManager \n          userId={user.id}\n          showCreateButton={true}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":2344},"client/src/pages/compare.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Compare() {\n  const { toast } = useToast();\n  const [urlA, setUrlA] = useState(\"\");\n  const [urlB, setUrlB] = useState(\"\");\n  const [repoA, setRepoA] = useState<any>(null);\n  const [repoB, setRepoB] = useState<any>(null);\n  const [isAnalyzingA, setIsAnalyzingA] = useState(false);\n  const [isAnalyzingB, setIsAnalyzingB] = useState(false);\n\n  const analyzeRepositoryA = useMutation({\n    mutationFn: async (url: string) => {\n      setIsAnalyzingA(true);\n      const response = await apiRequest('POST', '/api/repositories/analyze', { url });\n      return response;\n    },\n    onSuccess: (data: any) => {\n      setRepoA(data);\n      setIsAnalyzingA(false);\n      toast({\n        title: \"Repository A Analyzed\",\n        description: \"First repository has been analyzed successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      setIsAnalyzingA(false);\n      toast({\n        title: \"Analysis Failed\",\n        description: error.message || \"Failed to analyze repository A.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const analyzeRepositoryB = useMutation({\n    mutationFn: async (url: string) => {\n      setIsAnalyzingB(true);\n      const response = await apiRequest('POST', '/api/repositories/analyze', { url });\n      return response;\n    },\n    onSuccess: (data: any) => {\n      setRepoB(data);\n      setIsAnalyzingB(false);\n      toast({\n        title: \"Repository B Analyzed\",\n        description: \"Second repository has been analyzed successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      setIsAnalyzingB(false);\n      toast({\n        title: \"Analysis Failed\",\n        description: error.message || \"Failed to analyze repository B.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <div className=\"min-h-screen bg-dark text-white\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold gradient-text mb-4\">Repository Comparison</h1>\n          <p className=\"text-xl text-gray-400\">Compare repositories side-by-side to make informed decisions</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          {/* Repository A */}\n          <Card className=\"bg-card border border-border\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold mb-4\">Repository A</h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex space-x-2\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Enter GitHub repository URL\"\n                    value={urlA}\n                    onChange={(e) => setUrlA(e.target.value)}\n                    className=\"flex-1 bg-dark border border-border\"\n                    data-testid=\"input-repo-a\"\n                  />\n                  <Button\n                    onClick={() => urlA && analyzeRepositoryA.mutate(urlA)}\n                    disabled={!urlA || isAnalyzingA}\n                    data-testid=\"button-analyze-a\"\n                  >\n                    {isAnalyzingA ? \"Analyzing...\" : \"Analyze\"}\n                  </Button>\n                </div>\n\n                {repoA && (\n                  <div className=\"bg-dark rounded-lg p-4 border border-border\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 rounded-lg bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center\">\n                          <i className=\"fab fa-github text-white\"></i>\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium\" data-testid=\"text-repo-a-name\">{repoA.repository?.name}</h4>\n                          <p className=\"text-sm text-gray-400\">{repoA.repository?.fullName}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-2xl font-bold text-green-400\">\n                        {repoA.analysis?.overallScore?.toFixed(1) || 'N/A'}\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-gray-300 line-clamp-2\">{repoA.repository?.description}</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Repository B */}\n          <Card className=\"bg-card border border-border\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold mb-4\">Repository B</h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex space-x-2\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Enter GitHub repository URL\"\n                    value={urlB}\n                    onChange={(e) => setUrlB(e.target.value)}\n                    className=\"flex-1 bg-dark border border-border\"\n                    data-testid=\"input-repo-b\"\n                  />\n                  <Button\n                    onClick={() => urlB && analyzeRepositoryB.mutate(urlB)}\n                    disabled={!urlB || isAnalyzingB}\n                    data-testid=\"button-analyze-b\"\n                  >\n                    {isAnalyzingB ? \"Analyzing...\" : \"Analyze\"}\n                  </Button>\n                </div>\n\n                {repoB && (\n                  <div className=\"bg-dark rounded-lg p-4 border border-border\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 rounded-lg bg-gradient-to-r from-green-500 to-teal-600 flex items-center justify-center\">\n                          <i className=\"fab fa-github text-white\"></i>\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium\" data-testid=\"text-repo-b-name\">{repoB.repository?.name}</h4>\n                          <p className=\"text-sm text-gray-400\">{repoB.repository?.fullName}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-2xl font-bold text-green-400\">\n                        {repoB.analysis?.overallScore?.toFixed(1) || 'N/A'}\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-gray-300 line-clamp-2\">{repoB.repository?.description}</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Comparison Table */}\n        {repoA && repoB && (\n          <Card className=\"bg-card border border-border\">\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-2xl font-bold mb-6\">Side-by-Side Comparison</h2>\n              \n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-border\">\n                      <th className=\"text-left py-3 px-4\">Metric</th>\n                      <th className=\"text-center py-3 px-4\">{repoA.repository?.name}</th>\n                      <th className=\"text-center py-3 px-4\">{repoB.repository?.name}</th>\n                      <th className=\"text-center py-3 px-4\">Winner</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {[\n                      { label: 'Overall Score', keyA: repoA.analysis?.overallScore, keyB: repoB.analysis?.overallScore },\n                      { label: 'Originality', keyA: repoA.analysis?.originality, keyB: repoB.analysis?.originality },\n                      { label: 'Completeness', keyA: repoA.analysis?.completeness, keyB: repoB.analysis?.completeness },\n                      { label: 'Marketability', keyA: repoA.analysis?.marketability, keyB: repoB.analysis?.marketability },\n                      { label: 'Monetization', keyA: repoA.analysis?.monetization, keyB: repoB.analysis?.monetization },\n                      { label: 'Usefulness', keyA: repoA.analysis?.usefulness, keyB: repoB.analysis?.usefulness },\n                      { label: 'Stars', keyA: repoA.repository?.stars, keyB: repoB.repository?.stars },\n                      { label: 'Forks', keyA: repoA.repository?.forks, keyB: repoB.repository?.forks },\n                    ].map(({ label, keyA, keyB }) => {\n                      const winner = keyA > keyB ? 'A' : keyB > keyA ? 'B' : 'Tie';\n                      return (\n                        <tr key={label} className=\"border-b border-border/50\">\n                          <td className=\"py-3 px-4 font-medium\">{label}</td>\n                          <td className={`text-center py-3 px-4 ${winner === 'A' ? 'text-green-400 font-bold' : ''}`}>\n                            {typeof keyA === 'number' ? (keyA < 100 ? keyA.toFixed(1) : keyA.toLocaleString()) : 'N/A'}\n                          </td>\n                          <td className={`text-center py-3 px-4 ${winner === 'B' ? 'text-green-400 font-bold' : ''}`}>\n                            {typeof keyB === 'number' ? (keyB < 100 ? keyB.toFixed(1) : keyB.toLocaleString()) : 'N/A'}\n                          </td>\n                          <td className=\"text-center py-3 px-4\">\n                            {winner === 'Tie' ? (\n                              <Badge variant=\"secondary\">Tie</Badge>\n                            ) : (\n                              <Badge variant={winner === 'A' ? 'default' : 'default'} className={winner === 'A' ? 'bg-blue-600' : 'bg-green-600'}>\n                                Repo {winner}\n                              </Badge>\n                            )}\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10532},"client/src/pages/developer.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Code, Key, Webhook, Copy, Trash2, Plus, Check, AlertCircle, Book, Rocket, Shield, Clock } from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\nexport default function Developer() {\n  const { toast } = useToast();\n  const [copied, setCopied] = useState<string | null>(null);\n  const [newKeyName, setNewKeyName] = useState(\"\");\n  const [newKeyDescription, setNewKeyDescription] = useState(\"\");\n  const [newKeyPermissions, setNewKeyPermissions] = useState<string[]>([\"read\"]);\n  const [newWebhookUrl, setNewWebhookUrl] = useState(\"\");\n  const [newWebhookEvents, setNewWebhookEvents] = useState<string[]>([\"repository.analyzed\"]);\n\n  // Fetch API keys\n  const { data: apiKeys = [], isLoading: keysLoading } = useQuery({\n    queryKey: [\"/api/developer/keys\"],\n  });\n\n  // Fetch webhooks\n  const { data: webhooks = [], isLoading: webhooksLoading } = useQuery({\n    queryKey: [\"/api/developer/webhooks\"],\n  });\n\n  // Create API key mutation\n  const createKeyMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/developer/keys\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/developer/keys\"] });\n      toast({ title: \"API key created successfully\" });\n      setNewKeyName(\"\");\n      setNewKeyDescription(\"\");\n    },\n    onError: () => {\n      toast({ title: \"Failed to create API key\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete API key mutation\n  const deleteKeyMutation = useMutation({\n    mutationFn: async (keyId: number) => {\n      return await apiRequest(\"DELETE\", `/api/developer/keys/${keyId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/developer/keys\"] });\n      toast({ title: \"API key deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete API key\", variant: \"destructive\" });\n    },\n  });\n\n  // Create webhook mutation\n  const createWebhookMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/developer/webhooks\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/developer/webhooks\"] });\n      toast({ title: \"Webhook created successfully\" });\n      setNewWebhookUrl(\"\");\n    },\n    onError: () => {\n      toast({ title: \"Failed to create webhook\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete webhook mutation\n  const deleteWebhookMutation = useMutation({\n    mutationFn: async (webhookId: number) => {\n      return await apiRequest(\"DELETE\", `/api/developer/webhooks/${webhookId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/developer/webhooks\"] });\n      toast({ title: \"Webhook deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete webhook\", variant: \"destructive\" });\n    },\n  });\n\n  const copyToClipboard = (text: string, id: string) => {\n    navigator.clipboard.writeText(text);\n    setCopied(id);\n    setTimeout(() => setCopied(null), 2000);\n  };\n\n  const formatDate = (date: string | null) => {\n    if (!date) return \"Never\";\n    return new Date(date).toLocaleDateString();\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-7xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold mb-2 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n          Developer API\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Integrate RepoAnalyzer into your applications with our powerful API\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"keys\">API Keys</TabsTrigger>\n          <TabsTrigger value=\"webhooks\">Webhooks</TabsTrigger>\n          <TabsTrigger value=\"docs\">Documentation</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Rocket className=\"h-5 w-5\" />\n                  Quick Start\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ol className=\"space-y-3 text-sm\">\n                  <li className=\"flex gap-2\">\n                    <span className=\"font-semibold\">1.</span>\n                    Create an API key in the API Keys tab\n                  </li>\n                  <li className=\"flex gap-2\">\n                    <span className=\"font-semibold\">2.</span>\n                    Include the key in your request headers\n                  </li>\n                  <li className=\"flex gap-2\">\n                    <span className=\"font-semibold\">3.</span>\n                    Make requests to our API endpoints\n                  </li>\n                  <li className=\"flex gap-2\">\n                    <span className=\"font-semibold\">4.</span>\n                    Monitor usage and set up webhooks\n                  </li>\n                </ol>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Shield className=\"h-5 w-5\" />\n                  Security Best Practices\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2 text-sm\">\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-green-500\">•</span>\n                    Never expose API keys in client-side code\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-green-500\">•</span>\n                    Use environment variables for key storage\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-green-500\">•</span>\n                    Rotate keys regularly for security\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-green-500\">•</span>\n                    Use webhook signatures for verification\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>API Base URL</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-2\">\n                <code className=\"flex-1 p-3 bg-muted rounded-md font-mono text-sm\">\n                  {window.location.origin}/api/v1\n                </code>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => copyToClipboard(`${window.location.origin}/api/v1`, \"base-url\")}\n                >\n                  {copied === \"base-url\" ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"keys\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>API Keys</CardTitle>\n              <CardDescription>\n                Manage your API keys for programmatic access to RepoAnalyzer\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button className=\"w-full sm:w-auto\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Create New Key\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Create API Key</DialogTitle>\n                      <DialogDescription>\n                        Generate a new API key for accessing RepoAnalyzer API\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"key-name\">Key Name</Label>\n                        <Input\n                          id=\"key-name\"\n                          value={newKeyName}\n                          onChange={(e) => setNewKeyName(e.target.value)}\n                          placeholder=\"Production API Key\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"key-description\">Description (Optional)</Label>\n                        <Textarea\n                          id=\"key-description\"\n                          value={newKeyDescription}\n                          onChange={(e) => setNewKeyDescription(e.target.value)}\n                          placeholder=\"Used for production deployments\"\n                        />\n                      </div>\n                      <div>\n                        <Label>Permissions</Label>\n                        <Select\n                          value={newKeyPermissions.join(\",\")}\n                          onValueChange={(value) => setNewKeyPermissions(value.split(\",\"))}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"read\">Read Only</SelectItem>\n                            <SelectItem value=\"read,write\">Read & Write</SelectItem>\n                            <SelectItem value=\"read,write,delete\">Full Access</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    <DialogFooter>\n                      <Button\n                        onClick={() => {\n                          createKeyMutation.mutate({\n                            name: newKeyName,\n                            description: newKeyDescription,\n                            permissions: newKeyPermissions,\n                          });\n                        }}\n                        disabled={!newKeyName || createKeyMutation.isPending}\n                      >\n                        Create Key\n                      </Button>\n                    </DialogFooter>\n                  </DialogContent>\n                </Dialog>\n\n                {keysLoading ? (\n                  <div className=\"text-center py-8\">Loading API keys...</div>\n                ) : apiKeys.length === 0 ? (\n                  <Alert>\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      No API keys yet. Create your first key to get started.\n                    </AlertDescription>\n                  </Alert>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {apiKeys.map((key: any) => (\n                      <Card key={key.id}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"space-y-2 flex-1\">\n                              <div className=\"flex items-center gap-2\">\n                                <h3 className=\"font-semibold\">{key.name}</h3>\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {key.permissions?.join(\", \") || \"read\"}\n                                </Badge>\n                              </div>\n                              {key.description && (\n                                <p className=\"text-sm text-muted-foreground\">{key.description}</p>\n                              )}\n                              <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                                <span>Created: {formatDate(key.createdAt)}</span>\n                                <span>Last used: {formatDate(key.lastUsedAt)}</span>\n                                {key.expiresAt && (\n                                  <span className=\"text-orange-500\">\n                                    Expires: {formatDate(key.expiresAt)}\n                                  </span>\n                                )}\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <code className=\"p-2 bg-muted rounded text-xs font-mono flex-1\">\n                                  {key.key}\n                                </code>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => copyToClipboard(key.key, `key-${key.id}`)}\n                                >\n                                  {copied === `key-${key.id}` ? (\n                                    <Check className=\"h-4 w-4\" />\n                                  ) : (\n                                    <Copy className=\"h-4 w-4\" />\n                                  )}\n                                </Button>\n                              </div>\n                            </div>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => deleteKeyMutation.mutate(key.id)}\n                              disabled={deleteKeyMutation.isPending}\n                            >\n                              <Trash2 className=\"h-4 w-4 text-destructive\" />\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"webhooks\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Webhooks</CardTitle>\n              <CardDescription>\n                Receive real-time notifications when events occur\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button className=\"w-full sm:w-auto\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Webhook\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Add Webhook</DialogTitle>\n                      <DialogDescription>\n                        Configure a webhook endpoint to receive event notifications\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"webhook-url\">Endpoint URL</Label>\n                        <Input\n                          id=\"webhook-url\"\n                          type=\"url\"\n                          value={newWebhookUrl}\n                          onChange={(e) => setNewWebhookUrl(e.target.value)}\n                          placeholder=\"https://api.example.com/webhook\"\n                        />\n                      </div>\n                      <div>\n                        <Label>Events</Label>\n                        <Select\n                          value={newWebhookEvents.join(\",\")}\n                          onValueChange={(value) => setNewWebhookEvents(value.split(\",\"))}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"repository.analyzed\">Repository Analyzed</SelectItem>\n                            <SelectItem value=\"repository.tracked\">Repository Tracked</SelectItem>\n                            <SelectItem value=\"analysis.shared\">Analysis Shared</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    <DialogFooter>\n                      <Button\n                        onClick={() => {\n                          createWebhookMutation.mutate({\n                            url: newWebhookUrl,\n                            events: newWebhookEvents,\n                          });\n                        }}\n                        disabled={!newWebhookUrl || createWebhookMutation.isPending}\n                      >\n                        Add Webhook\n                      </Button>\n                    </DialogFooter>\n                  </DialogContent>\n                </Dialog>\n\n                {webhooksLoading ? (\n                  <div className=\"text-center py-8\">Loading webhooks...</div>\n                ) : webhooks.length === 0 ? (\n                  <Alert>\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      No webhooks configured. Add a webhook to receive event notifications.\n                    </AlertDescription>\n                  </Alert>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {webhooks.map((webhook: any) => (\n                      <Card key={webhook.id}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"space-y-2 flex-1\">\n                              <div className=\"flex items-center gap-2\">\n                                <code className=\"text-sm font-mono\">{webhook.url}</code>\n                                <Badge variant={webhook.active ? \"default\" : \"secondary\"}>\n                                  {webhook.active ? \"Active\" : \"Inactive\"}\n                                </Badge>\n                              </div>\n                              <div className=\"flex flex-wrap gap-2\">\n                                {webhook.events?.map((event: string) => (\n                                  <Badge key={event} variant=\"outline\" className=\"text-xs\">\n                                    {event}\n                                  </Badge>\n                                ))}\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                <span>Secret: </span>\n                                <code className=\"font-mono\">{webhook.secret}</code>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  className=\"ml-2 h-6 w-6 p-0\"\n                                  onClick={() => copyToClipboard(webhook.secret, `webhook-${webhook.id}`)}\n                                >\n                                  {copied === `webhook-${webhook.id}` ? (\n                                    <Check className=\"h-3 w-3\" />\n                                  ) : (\n                                    <Copy className=\"h-3 w-3\" />\n                                  )}\n                                </Button>\n                              </div>\n                            </div>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => deleteWebhookMutation.mutate(webhook.id)}\n                              disabled={deleteWebhookMutation.isPending}\n                            >\n                              <Trash2 className=\"h-4 w-4 text-destructive\" />\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"docs\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Book className=\"h-5 w-5\" />\n                API Documentation\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-[600px] pr-4\">\n                <div className=\"space-y-8\">\n                  {/* Authentication */}\n                  <section>\n                    <h3 className=\"text-lg font-semibold mb-3\">Authentication</h3>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      All API requests require authentication using an API key in the request headers.\n                    </p>\n                    <div className=\"bg-muted p-3 rounded-md\">\n                      <code className=\"text-sm\">\n                        X-API-Key: your_api_key_here\n                      </code>\n                    </div>\n                  </section>\n\n                  {/* Endpoints */}\n                  <section>\n                    <h3 className=\"text-lg font-semibold mb-3\">Endpoints</h3>\n                    \n                    {/* Search Repositories */}\n                    <div className=\"space-y-3 mb-6\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge className=\"bg-green-100 text-green-800\">GET</Badge>\n                        <code className=\"text-sm font-mono\">/api/v1/repositories/search</code>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Search for repositories by query string\n                      </p>\n                      <div className=\"bg-muted p-3 rounded-md\">\n                        <p className=\"text-xs font-semibold mb-2\">Query Parameters:</p>\n                        <ul className=\"text-xs space-y-1\">\n                          <li><code>q</code> - Search query (required)</li>\n                          <li><code>limit</code> - Number of results (default: 10)</li>\n                        </ul>\n                      </div>\n                      <div className=\"bg-muted p-3 rounded-md\">\n                        <p className=\"text-xs font-semibold mb-2\">Example Request:</p>\n                        <code className=\"text-xs\">\n                          curl -H \"X-API-Key: your_key\" \\<br />\n                          \"{window.location.origin}/api/v1/repositories/search?q=react\"\n                        </code>\n                      </div>\n                    </div>\n\n                    {/* Get Repository */}\n                    <div className=\"space-y-3 mb-6\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge className=\"bg-green-100 text-green-800\">GET</Badge>\n                        <code className=\"text-sm font-mono\">/api/v1/repositories/:id</code>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Get detailed information about a specific repository\n                      </p>\n                      <div className=\"bg-muted p-3 rounded-md\">\n                        <p className=\"text-xs font-semibold mb-2\">Path Parameters:</p>\n                        <ul className=\"text-xs\">\n                          <li><code>id</code> - Repository ID</li>\n                        </ul>\n                      </div>\n                    </div>\n\n                    {/* Get Analysis */}\n                    <div className=\"space-y-3 mb-6\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge className=\"bg-green-100 text-green-800\">GET</Badge>\n                        <code className=\"text-sm font-mono\">/api/v1/repositories/:id/analysis</code>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Get analysis results for a repository\n                      </p>\n                      <div className=\"bg-muted p-3 rounded-md\">\n                        <p className=\"text-xs font-semibold mb-2\">Response Example:</p>\n                        <pre className=\"text-xs overflow-x-auto\">{`{\n  \"data\": {\n    \"originality\": 85,\n    \"completeness\": 92,\n    \"marketability\": 78,\n    \"monetization\": 65,\n    \"usefulness\": 88,\n    \"overallScore\": 82,\n    \"summary\": \"Analysis summary...\",\n    \"strengths\": [\"...\"],\n    \"weaknesses\": [\"...\"],\n    \"recommendations\": [\"...\"]\n  }\n}`}</pre>\n                      </div>\n                    </div>\n\n                    {/* Analyze Repository */}\n                    <div className=\"space-y-3 mb-6\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge className=\"bg-blue-100 text-blue-800\">POST</Badge>\n                        <code className=\"text-sm font-mono\">/api/v1/repositories/analyze</code>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Analyze a new repository (requires write permission)\n                      </p>\n                      <div className=\"bg-muted p-3 rounded-md\">\n                        <p className=\"text-xs font-semibold mb-2\">Request Body:</p>\n                        <pre className=\"text-xs\">{`{\n  \"repositoryUrl\": \"https://github.com/owner/repo\"\n}`}</pre>\n                      </div>\n                    </div>\n                  </section>\n\n                  {/* Rate Limiting */}\n                  <section>\n                    <h3 className=\"text-lg font-semibold mb-3\">Rate Limiting</h3>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      API requests are rate limited based on your subscription tier:\n                    </p>\n                    <ul className=\"text-sm space-y-2\">\n                      <li className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4\" />\n                        Free tier: 100 requests/hour\n                      </li>\n                      <li className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4\" />\n                        Pro tier: 1,000 requests/hour\n                      </li>\n                      <li className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4\" />\n                        Enterprise tier: 10,000 requests/hour\n                      </li>\n                    </ul>\n                  </section>\n\n                  {/* Webhooks */}\n                  <section>\n                    <h3 className=\"text-lg font-semibold mb-3\">Webhook Events</h3>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Webhooks send POST requests to your endpoint with event data:\n                    </p>\n                    <div className=\"space-y-3\">\n                      <div>\n                        <p className=\"text-sm font-semibold\">repository.analyzed</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Triggered when a repository analysis is completed\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-semibold\">repository.tracked</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Triggered when a repository is added to tracking\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-semibold\">analysis.shared</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Triggered when an analysis is shared with a team\n                        </p>\n                      </div>\n                    </div>\n                  </section>\n\n                  {/* Error Handling */}\n                  <section>\n                    <h3 className=\"text-lg font-semibold mb-3\">Error Handling</h3>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      API errors are returned with appropriate HTTP status codes:\n                    </p>\n                    <ul className=\"text-sm space-y-2\">\n                      <li><code>400</code> - Bad Request (invalid parameters)</li>\n                      <li><code>401</code> - Unauthorized (invalid API key)</li>\n                      <li><code>403</code> - Forbidden (insufficient permissions)</li>\n                      <li><code>404</code> - Not Found</li>\n                      <li><code>429</code> - Too Many Requests (rate limit exceeded)</li>\n                      <li><code>500</code> - Internal Server Error</li>\n                    </ul>\n                  </section>\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":30323},"client/src/pages/discover.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/header\";\nimport RepositoryCard from \"@/components/repository-card\";\nimport RepositoryListItem from \"@/components/repository-list-item\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Plus, Grid3x3, List, Filter, Star, Calendar, Code } from \"lucide-react\";\n\nexport default function Discover() {\n  const { toast } = useToast();\n  const [location] = useLocation();\n  const [functionality, setFunctionality] = useState(\"\");\n  const [useCase, setUseCase] = useState(\"\");\n  const [technologies, setTechnologies] = useState(\"\");\n  const [repositoryUrl, setRepositoryUrl] = useState(\"\");\n  const [similarRepos, setSimilarRepos] = useState<any[]>([]);\n  const [reasoning, setReasoning] = useState(\"\");\n  const [availableTags, setAvailableTags] = useState([\n    \"React\", \"Vue.js\", \"Angular\", \"Next.js\", \"Svelte\",\n    \"Node.js\", \"Express\", \"FastAPI\", \"Django\", \"Flask\",\n    \"PostgreSQL\", \"MongoDB\", \"MySQL\", \"Redis\", \"GraphQL\",\n    \"TypeScript\", \"JavaScript\", \"Python\", \"Go\", \"Rust\",\n    \"Docker\", \"Kubernetes\", \"AWS\", \"GCP\", \"Azure\",\n    \"TailwindCSS\", \"Material-UI\", \"REST API\", \"WebSocket\", \"OAuth\",\n    \"Machine Learning\", \"AI\", \"Blockchain\", \"Web3\", \"NFT\",\n    \"E-commerce\", \"CMS\", \"Chat\", \"Video\", \"Analytics\"\n  ]);\n  \n  // New state for advanced filters\n  const [minStars, setMinStars] = useState<number>(0);\n  const [maxAge, setMaxAge] = useState<string>(\"any\");\n  const [maxResults, setMaxResults] = useState<number>(20);\n  const [viewMode, setViewMode] = useState<\"tiles\" | \"list\">(\"tiles\");\n  const [autoViewMode, setAutoViewMode] = useState(true);\n  const [showFilters, setShowFilters] = useState(false);\n  \n  // Filter state\n  const [filteredRepos, setFilteredRepos] = useState<any[]>([]);\n  const [filterLanguage, setFilterLanguage] = useState<string>(\"all\");\n  const [filterMinStars, setFilterMinStars] = useState<number>(0);\n\n\n\n  const findSimilarMutation = useMutation({\n    mutationFn: async (params: any) => {\n      const response = await apiRequest('POST', '/api/repositories/find-similar', params);\n      return response;\n    },\n    onSuccess: (data: any) => {\n      const repos = data.similar || [];\n      setSimilarRepos(repos);\n      setFilteredRepos(repos);\n      setReasoning(data.reasoning || \"\");\n      \n      // Auto-switch to list view if more than 10 results and auto mode is on\n      if (autoViewMode && repos.length > 10) {\n        setViewMode(\"list\");\n      }\n      \n      toast({\n        title: \"Similar Repositories Found\",\n        description: `Found ${repos.length} similar repositories based on your criteria.`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Search Failed\",\n        description: error.message || \"Failed to find similar repositories.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFunctionalitySearch = () => {\n    // No mandatory fields - allow search with any combination\n    if (!functionality && !useCase && technologies.trim().length === 0) {\n      toast({\n        title: \"Missing Information\", \n        description: \"Please provide at least one search criteria (functionality, use case, or technologies).\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const techArray = technologies\n      .split(',')\n      .map(t => t.trim())\n      .filter(t => t.length > 0);\n\n    findSimilarMutation.mutate({\n      functionality: functionality.trim() || undefined,\n      useCase: useCase.trim() || undefined,\n      technologies: techArray.length > 0 ? techArray : undefined,\n      minStars,\n      maxAge,\n      maxResults\n    });\n  };\n  \n  // Apply filters to results\n  useEffect(() => {\n    let filtered = [...similarRepos];\n    \n    // Filter by language\n    if (filterLanguage !== \"all\") {\n      filtered = filtered.filter(item => \n        item.repository?.language?.toLowerCase() === filterLanguage.toLowerCase()\n      );\n    }\n    \n    // Filter by minimum stars\n    if (filterMinStars > 0) {\n      filtered = filtered.filter(item => \n        (item.repository?.stars || 0) >= filterMinStars\n      );\n    }\n    \n    setFilteredRepos(filtered);\n  }, [similarRepos, filterLanguage, filterMinStars]);\n  \n  // Get unique languages from results\n  const getUniqueLanguages = () => {\n    const languages = new Set<string>();\n    similarRepos.forEach(item => {\n      if (item.repository?.language) {\n        languages.add(item.repository.language);\n      }\n    });\n    return Array.from(languages).sort();\n  };\n\n  const handleRepositorySearchWithUrl = async (url: string) => {\n    if (!url) return;\n\n    try {\n      // Show loading toast\n      toast({\n        title: \"Analyzing Repository\",\n        description: \"Finding similar repositories based on functionality...\",\n      });\n\n      // First, analyze the repository if not already in our system\n      const analyzeResponse: any = await apiRequest('POST', '/api/repositories/analyze', { url });\n      \n      if (analyzeResponse?.repository?.id) {\n        findSimilarMutation.mutate({\n          repositoryId: analyzeResponse.repository.id,\n          functionality,\n          useCase,\n          maxResults\n        });\n      } else {\n        throw new Error(\"Could not analyze repository\");\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to analyze the repository. Please check the URL and try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRepositorySearch = () => {\n    if (!repositoryUrl) {\n      toast({\n        title: \"Missing URL\",\n        description: \"Please provide a repository URL.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    handleRepositorySearchWithUrl(repositoryUrl);\n  };\n\n  const handleTagClick = (tag: string) => {\n    // Add tag to technologies input\n    const currentTechs = technologies.split(',').map(t => t.trim()).filter(t => t);\n    if (!currentTechs.includes(tag)) {\n      const newTechs = [...currentTechs, tag].join(', ');\n      setTechnologies(newTechs);\n    }\n    \n    // Remove tag from available tags with animation\n    setAvailableTags(prev => prev.filter(t => t !== tag));\n  };\n\n  // Check if repo was passed as query parameter and auto-search\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const repoId = params.get('repoId');\n    const repoUrl = params.get('repoUrl');\n    \n    if (repoId && repoUrl) {\n      // Repository is already analyzed, use the ID directly\n      setRepositoryUrl(decodeURIComponent(repoUrl));\n      \n      // Directly search using the repository ID\n      setTimeout(() => {\n        toast({\n          title: \"Finding Similar Repositories\",\n          description: \"Searching for repositories with similar functionality...\",\n        });\n        \n        findSimilarMutation.mutate({\n          repositoryId: repoId,\n          functionality: \"\",\n          useCase: \"\",\n          maxResults\n        });\n      }, 100);\n    } else if (params.get('repo')) {\n      // Legacy support for just URL parameter\n      const repoParam = params.get('repo');\n      if (repoParam && repoParam !== repositoryUrl) {\n        setRepositoryUrl(repoParam);\n        setTimeout(() => {\n          handleRepositorySearchWithUrl(repoParam);\n        }, 100);\n      }\n    }\n  }, [location]);\n\n  return (\n    <div className=\"min-h-screen bg-dark text-white\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold gradient-text mb-4\">Discover Similar Repositories</h1>\n          <p className=\"text-xl text-gray-400\">Find repositories that match your functionality needs and use cases</p>\n        </div>\n\n        <Tabs defaultValue=\"functionality\" className=\"mb-8\">\n          <TabsList className=\"grid w-full grid-cols-2 bg-card\">\n            <TabsTrigger value=\"functionality\">Search by Functionality</TabsTrigger>\n            <TabsTrigger value=\"repository\">Find Similar to Repository</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"functionality\">\n            <Card className=\"bg-card border border-border\">\n              <CardHeader>\n                <CardTitle>Describe What You're Looking For</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Core Functionality\n                  </label>\n                  <Textarea\n                    placeholder=\"Describe the main functionality you need (e.g., 'Real-time chat application with video calling', 'E-commerce platform with inventory management')\"\n                    value={functionality}\n                    onChange={(e) => setFunctionality(e.target.value)}\n                    className=\"bg-dark border border-border min-h-[100px]\"\n                    data-testid=\"textarea-functionality\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Use Case</label>\n                  <Textarea\n                    placeholder=\"Describe your specific use case (e.g., 'Building a marketplace for handmade crafts', 'Creating an internal tool for team collaboration')\"\n                    value={useCase}\n                    onChange={(e) => setUseCase(e.target.value)}\n                    className=\"bg-dark border border-border min-h-[80px]\"\n                    data-testid=\"textarea-usecase\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Technologies (comma-separated)</label>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"React, Node.js, PostgreSQL, GraphQL...\"\n                    value={technologies}\n                    onChange={(e) => setTechnologies(e.target.value)}\n                    className=\"bg-dark border border-border\"\n                    data-testid=\"input-technologies\"\n                  />\n                  \n                  {/* Clickable Technology Tags */}\n                  <div className=\"mt-3\">\n                    <p className=\"text-xs text-gray-500 mb-2\">Click to add popular technologies:</p>\n                    <div className=\"flex flex-wrap gap-2\">\n                      <AnimatePresence mode=\"popLayout\">\n                        {availableTags.map((tag) => (\n                          <motion.div\n                            key={tag}\n                            layout\n                            initial={{ opacity: 1, scale: 1 }}\n                            exit={{ \n                              opacity: 0, \n                              scale: 0.5,\n                              filter: \"blur(4px)\",\n                              transition: { \n                                duration: 0.3,\n                                ease: \"easeOut\"\n                              }\n                            }}\n                            whileHover={{ \n                              scale: 1.05,\n                              boxShadow: \"0 0 20px rgba(255, 107, 53, 0.3)\"\n                            }}\n                            whileTap={{ scale: 0.95 }}\n                          >\n                            <Badge\n                              variant=\"outline\"\n                              className=\"cursor-pointer border-[#FF6B35]/30 hover:border-[#FF6B35] hover:bg-[#FF6B35]/10 transition-all duration-200 flex items-center gap-1\"\n                              onClick={() => handleTagClick(tag)}\n                              data-testid={`tag-${tag.toLowerCase().replace(/\\s+/g, '-')}`}\n                            >\n                              <Plus className=\"w-3 h-3\" />\n                              {tag}\n                            </Badge>\n                          </motion.div>\n                        ))}\n                      </AnimatePresence>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Advanced Filters */}\n                <div className=\"space-y-4 border-t border-border pt-4\">\n                  <h4 className=\"text-sm font-semibold text-gray-400\">Advanced Filters</h4>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">\n                      Minimum Stars: {minStars.toLocaleString()}\n                    </label>\n                    <Slider\n                      value={[minStars]}\n                      onValueChange={(value) => setMinStars(value[0])}\n                      max={10000}\n                      step={100}\n                      className=\"w-full\"\n                      data-testid=\"slider-min-stars\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                      <span>0</span>\n                      <span>5,000</span>\n                      <span>10,000+</span>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Repository Age</label>\n                    <Select value={maxAge} onValueChange={setMaxAge}>\n                      <SelectTrigger className=\"bg-dark border border-border\" data-testid=\"select-age\">\n                        <SelectValue placeholder=\"Any age\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"any\">Any age</SelectItem>\n                        <SelectItem value=\"1month\">Last month</SelectItem>\n                        <SelectItem value=\"3months\">Last 3 months</SelectItem>\n                        <SelectItem value=\"6months\">Last 6 months</SelectItem>\n                        <SelectItem value=\"1year\">Last year</SelectItem>\n                        <SelectItem value=\"2years\">Last 2 years</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">\n                      Max Results: {maxResults}\n                    </label>\n                    <Slider\n                      value={[maxResults]}\n                      onValueChange={(value) => setMaxResults(value[0])}\n                      min={5}\n                      max={100}\n                      step={5}\n                      className=\"w-full\"\n                      data-testid=\"slider-max-results\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                      <span>5</span>\n                      <span>50</span>\n                      <span>100</span>\n                    </div>\n                  </div>\n                </div>\n\n                <Button\n                  onClick={handleFunctionalitySearch}\n                  disabled={findSimilarMutation.isPending}\n                  className=\"w-full bg-gradient-to-r from-primary to-secondary hover:from-secondary hover:to-primary\"\n                  data-testid=\"button-search-functionality\"\n                >\n                  {findSimilarMutation.isPending ? \"Searching...\" : \"Find Similar Repositories\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"repository\">\n            <Card className=\"bg-card border border-border\">\n              <CardHeader>\n                <CardTitle>Find Repositories Similar To</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Repository URL\n                  </label>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"https://github.com/owner/repository\"\n                    value={repositoryUrl}\n                    onChange={(e) => setRepositoryUrl(e.target.value)}\n                    className=\"bg-dark border border-border\"\n                    data-testid=\"input-repository-url\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Additional Context (Optional)\n                  </label>\n                  <Textarea\n                    placeholder=\"Add any specific aspects you want to match (e.g., 'Focus on repositories with similar API design' or 'Find alternatives with better performance')\"\n                    value={functionality}\n                    onChange={(e) => setFunctionality(e.target.value)}\n                    className=\"bg-dark border border-border min-h-[80px]\"\n                    data-testid=\"textarea-context\"\n                  />\n                </div>\n\n                <Button\n                  onClick={handleRepositorySearch}\n                  disabled={findSimilarMutation.isPending}\n                  className=\"w-full bg-gradient-to-r from-primary to-secondary hover:from-secondary hover:to-primary\"\n                  data-testid=\"button-search-repository\"\n                >\n                  {findSimilarMutation.isPending ? \"Searching...\" : \"Find Similar Repositories\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Reasoning Section */}\n        {reasoning && (\n          <Card className=\"bg-card/50 border border-border mb-8\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n                <i className=\"fas fa-lightbulb text-yellow-400 mr-2\"></i>\n                Why These Repositories Match\n              </h3>\n              <p className=\"text-gray-300 whitespace-pre-line\">{reasoning}</p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Results Section */}\n        {similarRepos.length > 0 && (\n          <div className=\"space-y-6\">\n            {/* Results Header with Controls */}\n            <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n              <div>\n                <h2 className=\"text-2xl font-bold\">\n                  Similar Repositories ({filteredRepos.length})\n                </h2>\n                {filteredRepos.length < similarRepos.length && (\n                  <p className=\"text-sm text-gray-400 mt-1\">\n                    Showing {filteredRepos.length} of {similarRepos.length} repositories after filtering\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"flex flex-wrap gap-3\">\n                {/* View Mode Toggle */}\n                <div className=\"flex items-center gap-2 bg-card rounded-lg p-1\">\n                  <Button\n                    size=\"sm\"\n                    variant={viewMode === \"tiles\" ? \"default\" : \"ghost\"}\n                    onClick={() => setViewMode(\"tiles\")}\n                    className=\"flex items-center gap-1\"\n                    data-testid=\"button-view-tiles\"\n                  >\n                    <Grid3x3 className=\"w-4 h-4\" />\n                    Tiles\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                    onClick={() => setViewMode(\"list\")}\n                    className=\"flex items-center gap-1\"\n                    data-testid=\"button-view-list\"\n                  >\n                    <List className=\"w-4 h-4\" />\n                    List\n                  </Button>\n                </div>\n                \n                {/* Auto Switch Toggle */}\n                <div className=\"flex items-center gap-2\">\n                  <Switch\n                    checked={autoViewMode}\n                    onCheckedChange={setAutoViewMode}\n                    id=\"auto-view-mode\"\n                  />\n                  <Label htmlFor=\"auto-view-mode\" className=\"text-sm\">\n                    Auto-switch view\n                  </Label>\n                </div>\n                \n                {/* Filter Button */}\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => setShowFilters(!showFilters)}\n                  className=\"flex items-center gap-1\"\n                  data-testid=\"button-toggle-filters\"\n                >\n                  <Filter className=\"w-4 h-4\" />\n                  Filters\n                  {(filterLanguage !== \"all\" || filterMinStars > 0) && (\n                    <Badge variant=\"secondary\" className=\"ml-1\">Active</Badge>\n                  )}\n                </Button>\n              </div>\n            </div>\n            \n            {/* Filter Controls */}\n            {showFilters && (\n              <Card className=\"bg-card/50 border border-border p-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label className=\"text-sm mb-2\">Language</Label>\n                    <Select value={filterLanguage} onValueChange={setFilterLanguage}>\n                      <SelectTrigger className=\"bg-dark border border-border\" data-testid=\"select-filter-language\">\n                        <SelectValue placeholder=\"All languages\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All languages</SelectItem>\n                        {getUniqueLanguages().map(lang => (\n                          <SelectItem key={lang} value={lang}>{lang}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-sm mb-2\">\n                      Minimum Stars: {filterMinStars.toLocaleString()}\n                    </Label>\n                    <Slider\n                      value={[filterMinStars]}\n                      onValueChange={(value) => setFilterMinStars(value[0])}\n                      max={Math.max(...similarRepos.map(r => r.repository?.stars || 0))}\n                      step={100}\n                      className=\"w-full\"\n                      data-testid=\"slider-filter-stars\"\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-end\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => {\n                        setFilterLanguage(\"all\");\n                        setFilterMinStars(0);\n                      }}\n                      className=\"w-full\"\n                      data-testid=\"button-clear-filters\"\n                    >\n                      Clear Filters\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            )}\n            \n            {/* Results Display */}\n            {viewMode === \"tiles\" ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredRepos.map((item: any, index: number) => (\n                  <div key={item.repository?.id || index} className=\"relative\">\n                    {item.similarity && (\n                      <div className=\"absolute top-4 right-4 z-10\">\n                        <Badge \n                          className={`\n                            ${item.similarity >= 80 ? 'bg-green-600' : \n                              item.similarity >= 60 ? 'bg-yellow-600' : 'bg-orange-600'}\n                            text-white font-bold\n                          `}\n                        >\n                          {item.similarity}% Match\n                        </Badge>\n                      </div>\n                    )}\n                    <RepositoryCard\n                      repository={item.repository}\n                      showAnalysis={false}\n                    />\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {filteredRepos.map((item: any, index: number) => (\n                  <RepositoryListItem\n                    key={item.repository?.id || index}\n                    repository={item.repository}\n                    similarity={item.similarity}\n                    index={index}\n                    onAnalyze={() => {\n                      window.location.href = `/analyze?url=${encodeURIComponent(item.repository.htmlUrl)}`;\n                    }}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Empty State */}\n        {!findSimilarMutation.isPending && similarRepos.length === 0 && !reasoning && (\n          <div className=\"text-center py-16\">\n            <div className=\"w-20 h-20 rounded-full bg-gradient-to-r from-primary to-secondary flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-search text-white text-3xl\"></i>\n            </div>\n            <h3 className=\"text-2xl font-semibold mb-3\">Start Your Discovery</h3>\n            <p className=\"text-gray-400 max-w-md mx-auto\">\n              Describe the functionality you need or provide a repository URL to find similar projects that match your requirements.\n            </p>\n          </div>\n        )}\n\n        {/* Loading State */}\n        {findSimilarMutation.isPending && (\n          <div className=\"flex items-center justify-center py-16\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-16 w-16 border-b-2 border-primary mx-auto mb-4\"></div>\n              <p className=\"text-gray-400\">Analyzing repositories and finding matches...</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":26766},"client/src/pages/docs.tsx":{"content":"import { useState } from \"react\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\n\nconst docSections = {\n  overview: {\n    title: \"Overview\",\n    icon: \"fas fa-home\",\n    content: `\n# RepoAnalyzer Documentation\n\n## Welcome to RepoAnalyzer\n\nRepoAnalyzer is a cutting-edge GitHub repository analysis platform that leverages Google's Gemini 2.5 Pro AI to provide comprehensive insights into code repositories. Our platform helps developers, investors, and teams make informed decisions about software projects.\n\n## Key Features\n\n### 🔍 Smart Repository Analysis\n- **AI-Powered Evaluation**: Uses advanced machine learning to analyze repositories across 5 key metrics\n- **Real-time Processing**: Get instant insights with our optimized analysis pipeline\n- **Comprehensive Scoring**: Detailed breakdown of originality, completeness, marketability, monetization potential, and usefulness\n\n### 📊 Data Visualizations\n- **Interactive Charts**: Radar charts and language distribution graphs\n- **Progress Tracking**: Real-time analysis progress indicators\n- **Export Capabilities**: Download professional PDF reports\n\n### 🚀 Discovery Features\n- **Find Similar Repositories**: AI-powered similarity matching\n- **Trending Repositories**: Discover what's hot in the GitHub ecosystem\n- **Advanced Search**: Comprehensive filtering with 15+ filter options\n- **Batch Analysis**: Analyze multiple repositories simultaneously\n\n## Getting Started\n\n1. **Sign In**: Use Replit authentication for secure access\n2. **Analyze**: Enter any GitHub repository URL\n3. **Explore**: Browse insights, charts, and recommendations\n4. **Compare**: Analyze multiple repositories side-by-side\n5. **Export**: Download reports for offline review\n    `\n  },\n  analysis: {\n    title: \"Analysis Metrics\",\n    icon: \"fas fa-chart-line\",\n    content: `\n# Analysis Metrics Explained\n\n## Our 5-Factor Scoring System\n\n### 1. Originality (0-10)\n**What it measures**: How unique and innovative the repository is\n- Novel approaches to problem-solving\n- Unique features not found in similar projects\n- Creative implementation techniques\n- Innovation in the problem space\n\n**High Score Indicators**:\n- Introduces new concepts or methodologies\n- Solves problems in unprecedented ways\n- Creates new standards or patterns\n\n### 2. Completeness (0-10)\n**What it measures**: How feature-complete and production-ready the code is\n- Documentation quality\n- Test coverage\n- Error handling\n- Configuration options\n- Build and deployment setup\n\n**High Score Indicators**:\n- Comprehensive README and documentation\n- Extensive test suites\n- CI/CD pipeline configuration\n- Clear setup instructions\n\n### 3. Marketability (0-10)\n**What it measures**: Commercial potential and market appeal\n- Target audience size\n- Problem significance\n- Competition analysis\n- Growth potential\n- Community engagement\n\n**High Score Indicators**:\n- Addresses significant market need\n- Strong community adoption\n- Active issue discussions\n- Regular updates and releases\n\n### 4. Monetization Potential (0-10)\n**What it measures**: Revenue generation possibilities\n- Business model viability\n- Enterprise appeal\n- SaaS potential\n- Licensing opportunities\n- Support and consulting possibilities\n\n**High Score Indicators**:\n- Clear path to revenue\n- Enterprise-friendly features\n- Professional support options\n- Scalable architecture\n\n### 5. Usefulness (0-10)\n**What it measures**: Practical value and real-world applicability\n- Problem-solving effectiveness\n- Developer experience\n- Integration ease\n- Performance and efficiency\n- Maintenance simplicity\n\n**High Score Indicators**:\n- Solves real problems effectively\n- Easy to integrate and use\n- Well-maintained and updated\n- Good performance characteristics\n\n## Overall Score Calculation\n\nThe overall score is calculated as a weighted average of all five metrics, with each metric contributing equally to the final score. Scores above 8.0 indicate exceptional repositories, while scores below 5.0 suggest areas for improvement.\n    `\n  },\n  features: {\n    title: \"Features Guide\",\n    icon: \"fas fa-rocket\",\n    content: `\n# Features Guide\n\n## Repository Analysis\n\n### Basic Analysis\n1. Navigate to the Analyze page\n2. Enter a GitHub repository URL (e.g., https://github.com/facebook/react)\n3. Click \"Analyze Repository\"\n4. View comprehensive insights and scores\n\n### Understanding Results\n- **Score Cards**: Individual metric breakdowns with detailed explanations\n- **Visualizations**: Interactive charts showing metric distribution\n- **AI Summary**: Natural language description of strengths and weaknesses\n- **Recommendations**: Actionable suggestions for improvement\n\n## Discovery Features\n\n### Find Similar Repositories\nAfter analyzing a repository, click \"Find Similar\" to discover:\n- Repositories with similar technology stacks\n- Projects solving related problems\n- Alternative implementations\n- Competing solutions\n\n### Trending Repositories\n- View repositories gaining traction\n- Filter by time period and language\n- See what's popular in different categories\n- Track emerging technologies\n\n## Comparison Tools\n\n### Side-by-Side Comparison\n1. Analyze multiple repositories\n2. Navigate to Compare page\n3. Select repositories to compare\n4. View detailed metric comparisons\n5. Export comparison reports\n\n### Key Comparison Features\n- Visual diff charts\n- Strength/weakness analysis\n- Technology stack comparison\n- Community metrics comparison\n\n## Export and Reporting\n\n### PDF Reports\n- Click \"Export PDF\" on any analysis\n- Includes all metrics and visualizations\n- Professional formatting for presentations\n- Shareable with teams and stakeholders\n\n### Data Export\n- Export raw analysis data as JSON\n- Integrate with other tools\n- Build custom dashboards\n- Track metrics over time\n\n## Advanced Search & Filtering\n\n### Comprehensive Search Filters\nOur advanced search system provides powerful filtering capabilities:\n\n**Language Filters**\n- JavaScript, TypeScript, Python, Java, Go, Rust\n- C++, C#, Ruby, PHP, Swift, Kotlin\n- Filter for specific programming languages\n\n**Repository Metrics**\n- **Star Range**: Set minimum and maximum star counts\n- **Date Range**: Filter by creation date (today, week, month, year)\n- **License Types**: MIT, Apache 2.0, GPL 3.0, BSD 3-Clause, Unlicense\n\n**Content Filters**\n- **Topics**: Add specific repository topics\n- **Include Archived**: Toggle archived repositories\n- **Include Forked**: Toggle forked repositories  \n- **Has Open Issues**: Filter repositories with active issues\n\n**Sorting Options**\n- Best Match (relevance-based)\n- Most Stars\n- Most Forks\n- Recently Updated\n- Newest First\n\n### How to Use Advanced Search\n1. Navigate to the Search page\n2. Enter your search query\n3. Click \"Filters\" to expand filter options\n4. Configure desired filters\n5. Search results update automatically\n6. Use \"Reset All Filters\" to clear selections\n\n## Batch Analysis\n\n### Analyze Multiple Repositories\nProcess multiple repositories simultaneously for comprehensive analysis:\n\n**Supported Input Formats**\n- GitHub repository URLs (one per line)\n- Comma-separated URLs\n- Mixed format input\n\n**Batch Processing Features**\n- **Queue Management**: Add, remove, and monitor repositories\n- **Progress Tracking**: Real-time status updates\n- **Error Handling**: Individual repository error tracking\n- **Statistics Dashboard**: Completion and failure rates\n\n### Batch Analysis Workflow\n1. Navigate to Batch Analysis page\n2. Enter repository URLs in the text area\n3. Click \"Parse URLs\" to validate and queue repositories\n4. Click \"Start Analysis\" to begin batch processing\n5. Monitor progress in real-time\n6. Export results when complete\n\n**Tier Limitations**\n- **Free Users**: Up to 3 repositories per batch\n- **Pro/Enterprise Users**: Unlimited batch analysis\n\n### Export Batch Results\n**CSV Export**: Includes all metrics and scores in spreadsheet format\n**PDF Export**: Professional reports with comprehensive analysis details\n\n**CSV Data Fields**:\n- Repository URL\n- All 5 metric scores (Originality, Completeness, etc.)\n- Overall score\n- AI summary\n\n**PDF Report Includes**:\n- Batch statistics\n- Individual repository breakdowns\n- Score summaries\n- Analysis timestamps\n    `\n  },\n  api: {\n    title: \"API Reference\",\n    icon: \"fas fa-code\",\n    content: `\n# API Reference\n\n## Authentication\n\nAll API requests require authentication via session cookies. Ensure you're logged in through the web interface or use API tokens for programmatic access.\n\n## Endpoints\n\n### Analysis Endpoints\n\n#### POST /api/analyze\nAnalyze a GitHub repository\n\n**Request Body:**\n\\`\\`\\`json\n{\n  \"url\": \"https://github.com/owner/repo\"\n}\n\\`\\`\\`\n\n**Response:**\n\\`\\`\\`json\n{\n  \"id\": \"analysis-id\",\n  \"repository\": {\n    \"id\": \"repo-id\",\n    \"name\": \"repo-name\",\n    \"fullName\": \"owner/repo\",\n    \"stars\": 1000,\n    \"language\": \"TypeScript\"\n  },\n  \"scores\": {\n    \"originality\": 8.5,\n    \"completeness\": 9.0,\n    \"marketability\": 7.5,\n    \"monetization\": 6.0,\n    \"usefulness\": 9.5,\n    \"overall\": 8.1\n  },\n  \"summary\": \"AI-generated summary...\",\n  \"recommendations\": [\"...\"],\n  \"createdAt\": \"2024-01-01T00:00:00Z\"\n}\n\\`\\`\\`\n\n#### GET /api/analyses/recent\nGet recent analyses\n\n**Query Parameters:**\n- \\`limit\\`: Number of results (default: 10)\n- \\`offset\\`: Pagination offset (default: 0)\n\n#### GET /api/analysis/:id\nGet specific analysis by ID\n\n#### POST /api/analyze/batch\nAnalyze multiple repositories in batch\n\n**Request Body:**\n\\`\\`\\`json\n{\n  \"urls\": [\n    \"https://github.com/owner/repo1\",\n    \"https://github.com/owner/repo2\",\n    \"https://github.com/owner/repo3\"\n  ]\n}\n\\`\\`\\`\n\n**Response:**\n\\`\\`\\`json\n{\n  \"batchId\": \"batch-uuid\",\n  \"status\": \"processing\",\n  \"progress\": {\n    \"total\": 3,\n    \"completed\": 0,\n    \"failed\": 0,\n    \"pending\": 3\n  },\n  \"results\": [],\n  \"createdAt\": \"2024-01-01T00:00:00Z\"\n}\n\\`\\`\\`\n\n#### GET /api/analyze/batch/:batchId\nGet batch analysis status and results\n\n**Response:**\n\\`\\`\\`json\n{\n  \"batchId\": \"batch-uuid\",\n  \"status\": \"completed\",\n  \"progress\": {\n    \"total\": 3,\n    \"completed\": 2,\n    \"failed\": 1,\n    \"pending\": 0\n  },\n  \"results\": [\n    { /* analysis object */ },\n    { /* analysis object */ }\n  ],\n  \"errors\": [\n    {\n      \"url\": \"https://github.com/invalid/repo\",\n      \"error\": \"Repository not found\"\n    }\n  ]\n}\n\\`\\`\\`\n\n### Export Endpoints\n\n#### POST /api/export/batch/csv\nExport batch results as CSV\n\n**Request Body:**\n\\`\\`\\`json\n{\n  \"batchId\": \"batch-uuid\"\n}\n\\`\\`\\`\n\n**Response:** CSV file download\n\n#### POST /api/export/batch/pdf\nExport batch results as PDF\n\n**Request Body:**\n\\`\\`\\`json\n{\n  \"batchId\": \"batch-uuid\"\n}\n\\`\\`\\`\n\n**Response:** PDF file download\n\n### Repository Endpoints\n\n#### GET /api/repositories/trending\nGet trending repositories\n\n**Query Parameters:**\n- \\`period\\`: Time period (day, week, month)\n- \\`language\\`: Filter by language\n\n#### GET /api/repositories/search\nAdvanced repository search with comprehensive filtering\n\n**Query Parameters:**\n- \\`q\\`: Search query (supports GitHub search syntax)\n- \\`sort\\`: Sort by (best-match, stars, forks, updated, created)\n- \\`language\\`: Programming language filter\n- \\`license\\`: License type filter\n- \\`stars\\`: Star range filter (e.g., \">=100\", \"<=1000\")\n- \\`created\\`: Creation date filter (e.g., \">=2023-01-01\")\n- \\`archived\\`: Include archived repos (true/false)\n- \\`fork\\`: Include forked repos (true/false)\n- \\`has_issues\\`: Repos with open issues (true/false)\n- \\`topic\\`: Filter by topics\n\n**Example:**\n\\`GET /api/repositories/search?q=machine+learning&language=python&sort=stars&stars=%3E%3D1000\\`\n\n#### GET /api/repositories/:id/similar\nFind similar repositories\n\n**Query Parameters:**\n- \\`limit\\`: Number of results (default: 10)\n\n### User Endpoints\n\n#### GET /api/auth/user\nGet current user information\n\n#### GET /api/user/saved\nGet saved repositories\n\n#### POST /api/user/save\nSave a repository\n\n**Request Body:**\n\\`\\`\\`json\n{\n  \"repositoryId\": \"repo-id\"\n}\n\\`\\`\\`\n\n## Rate Limiting\n\n- **Authenticated Users**: 1000 requests per hour\n- **Analysis Requests**: 100 per hour\n- **Search Requests**: 500 per hour\n\n## Error Codes\n\n- \\`400\\`: Bad Request - Invalid parameters\n- \\`401\\`: Unauthorized - Authentication required\n- \\`403\\`: Forbidden - Insufficient permissions\n- \\`404\\`: Not Found - Resource doesn't exist\n- \\`429\\`: Too Many Requests - Rate limit exceeded\n- \\`500\\`: Internal Server Error\n    `\n  },\n  faq: {\n    title: \"FAQ\",\n    icon: \"fas fa-question-circle\",\n    content: `\n# Frequently Asked Questions\n\n## General Questions\n\n### What is RepoAnalyzer?\nRepoAnalyzer is an AI-powered platform that provides comprehensive analysis of GitHub repositories, helping developers and teams make informed decisions about software projects.\n\n### How does the AI analysis work?\nWe use Google's Gemini 2.5 Pro model to analyze repository code, structure, documentation, and community engagement. The AI evaluates multiple factors to provide actionable insights.\n\n### Is my data secure?\nYes! We use industry-standard encryption and never store repository code. Analysis is performed in real-time and only metadata is retained.\n\n## Analysis Questions\n\n### How long does analysis take?\nMost repositories are analyzed within 10-30 seconds. Larger repositories may take up to 1 minute.\n\n### What repositories can be analyzed?\nAny public GitHub repository can be analyzed. Private repositories require GitHub authentication and appropriate permissions.\n\n### How accurate are the scores?\nOur AI model has been trained on thousands of repositories and provides consistent, objective scoring. However, scores should be used as guidance alongside human judgment.\n\n### Can I re-analyze a repository?\nYes! Repositories can be re-analyzed at any time to get updated scores based on recent changes.\n\n## Feature Questions\n\n### What's included in the free tier?\n- Up to 10 analyses per month\n- Basic visualizations\n- Search and discovery features\n- PDF export (watermarked)\n\n### What are the premium features?\n- Unlimited analyses\n- Advanced visualizations\n- Team collaboration\n- API access\n- Priority support\n- Custom analysis templates\n\n### How do I export reports?\nClick the \"Export PDF\" button on any analysis page to download a professional report.\n\n### Can I compare multiple repositories?\nYes! The comparison feature allows side-by-side analysis of up to 4 repositories simultaneously.\n\n## Technical Questions\n\n### Is there an API?\nYes! Premium users have access to our RESTful API for programmatic analysis and data retrieval.\n\n### What languages are supported?\nWe support all programming languages recognized by GitHub, with enhanced analysis for popular languages like JavaScript, Python, Java, Go, and Rust.\n\n### Can I integrate with CI/CD?\nYes! Our API can be integrated into CI/CD pipelines to automatically analyze code on commits or pull requests.\n\n### Is there a rate limit?\nFree users: 10 analyses per month\nPremium users: 1000 analyses per month\nEnterprise: Unlimited\n\n## Troubleshooting\n\n### Analysis failed - what should I do?\n1. Verify the repository URL is correct\n2. Ensure the repository is public or you have access\n3. Check if GitHub is accessible\n4. Try again in a few moments\n5. Contact support if issues persist\n\n### Scores seem incorrect\nOur AI continuously improves. If you believe scores are inaccurate:\n1. Check if the repository has recent updates\n2. Review our scoring methodology\n3. Provide feedback through the feedback button\n4. Contact support with specific concerns\n\n### Can't find a repository\n1. Ensure correct spelling and format\n2. Check if repository is public\n3. Try using the full GitHub URL\n4. Use advanced search filters\n    `\n  },\n  changelog: {\n    title: \"Changelog\",\n    icon: \"fas fa-history\",\n    content: `\n# Changelog\n\n## Version 2.4.0 - January 2025\n### 🎉 Interactive Onboarding & Enhanced UX\n\n#### New Features\n- 🚀 **Interactive Onboarding Tour**: Step-by-step guide for new users\n  - 5-step focused tour covering core features\n  - Auto-starts for new users with localStorage tracking\n  - Restart option available in profile preferences\n  - Smart targeting with fallback for missing elements\n- ✨ **Micro-interactions**: Smooth animations and transitions\n  - Button scaling and ripple effects\n  - Input focus animations with shadow effects\n  - Pulse animations on notification badges\n  - Card lift effects with fade-in transitions\n  - Skeleton loaders for loading states\n  - Bounce, shake, spin, and slide-in animations\n\n#### Improvements\n- 🎨 Enhanced visual feedback for all interactions\n- 🔄 Smoother transitions between states\n- 📱 Better responsive animations\n- 🎯 Improved user engagement with visual cues\n\n## Version 2.3.0 - January 2025\n### 🎉 Advanced Search & Batch Analysis\n\n#### New Features\n- 🔍 **Advanced Search System**: Comprehensive filtering with 15+ filter options\n  - Language, star range, date range, license filtering\n  - Topic-based search and archived/forked repo toggles\n  - Advanced sorting options (best match, stars, forks, updated, created)\n- 📊 **Batch Analysis**: Analyze multiple repositories simultaneously\n  - Queue management with add/remove capabilities\n  - Real-time progress tracking and error handling\n  - CSV and PDF export for batch results\n  - Tier-based limitations (3 for free, unlimited for Pro)\n- 📤 **Enhanced Export System**: Professional batch reporting capabilities\n\n#### Improvements\n- 🚀 Enhanced search performance with intelligent caching\n- 🎯 Improved filter UI with collapsible panels and sliders\n- 📈 Better progress visualization for long-running operations\n- 🔧 Strengthened TypeScript type safety across PDF exports\n\n#### Technical Updates\n- Fixed all TypeScript compilation errors in PDF functionality\n- Added comprehensive API endpoints for batch operations\n- Enhanced error handling for repository validation\n- Updated documentation with detailed feature guides\n\n## Version 2.0.0 - January 2025\n### 🎉 Major Release: Premium Features\n\n#### New Features\n- ✨ Advanced data visualizations with interactive charts\n- 📊 Real-time analysis progress indicators\n- 🔥 Trending repositories dashboard\n- 📥 PDF export functionality\n- 🤖 AI-powered help system with holographic interface\n- 📚 Comprehensive documentation\n\n#### Improvements\n- 🚀 3x faster analysis processing\n- 💾 Reduced memory usage by 40%\n- 🎨 Redesigned UI with Linear-inspired aesthetics\n- 🔍 Enhanced search capabilities\n- 📱 Improved mobile responsiveness\n\n#### Bug Fixes\n- Fixed routing issues with analysis redirects\n- Resolved authentication state persistence\n- Corrected score calculation edge cases\n- Fixed chart rendering on Safari\n\n## Version 1.5.0 - December 2024\n### Feature Update\n\n#### New Features\n- 🔄 Find Similar Repositories\n- 📈 Historical analysis tracking\n- 🏷️ Repository tagging system\n- 💬 Comments on analyses\n\n#### Improvements\n- Better error handling\n- Faster initial load times\n- Improved caching strategy\n\n## Version 1.0.0 - November 2024\n### Initial Release\n\n#### Core Features\n- GitHub repository analysis\n- 5-factor scoring system\n- Basic visualizations\n- User authentication\n- Repository search\n- Save favorites\n- Basic comparison tools\n\n## Upcoming Features (Roadmap)\n\n### Q1 2025\n- 🤝 Team collaboration features\n- 📧 Email notifications\n- 🔄 Webhook integrations\n- 📊 Custom analysis templates\n\n### Q2 2025\n- 🌍 Multi-language support\n- 📱 Mobile app\n- 🔗 GitLab and Bitbucket support\n- 🤖 AI code review suggestions\n\n### Q3 2025\n- 🏢 Enterprise features\n- 📊 Advanced analytics dashboard\n- 🔐 SSO integration\n- 🚀 Self-hosted option\n\nStay tuned for more exciting updates!\n    `\n  }\n};\n\nexport default function Docs() {\n  const [activeSection, setActiveSection] = useState(\"overview\");\n\n  return (\n    <div className=\"min-h-screen bg-dark text-white\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        {/* Hero Section */}\n        <div className=\"mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n            Documentation\n          </h1>\n          <p className=\"text-gray-400 text-lg\">\n            Everything you need to know about RepoAnalyzer\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Sidebar Navigation */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"bg-card border-border sticky top-8\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Navigation</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <ScrollArea className=\"h-[600px]\">\n                  <div className=\"space-y-1 p-4\">\n                    {Object.entries(docSections).map(([key, section]) => (\n                      <Button\n                        key={key}\n                        variant={activeSection === key ? \"secondary\" : \"ghost\"}\n                        className=\"w-full justify-start\"\n                        onClick={() => setActiveSection(key)}\n                        data-testid={`nav-${key}`}\n                      >\n                        <i className={`${section.icon} mr-2`}></i>\n                        {section.title}\n                      </Button>\n                    ))}\n                  </div>\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Content Area */}\n          <div className=\"lg:col-span-3\">\n            <Card className=\"bg-card border-border\">\n              <CardContent className=\"p-8\">\n                <div className=\"prose prose-invert max-w-none\">\n                  <div \n                    className=\"markdown-content\"\n                    dangerouslySetInnerHTML={{ \n                      __html: docSections[activeSection as keyof typeof docSections].content\n                        .split('\\n')\n                        .map(line => {\n                          // Convert markdown headers\n                          if (line.startsWith('# ')) {\n                            return `<h1 class=\"text-3xl font-bold mb-6 text-white\">${line.substring(2)}</h1>`;\n                          }\n                          if (line.startsWith('## ')) {\n                            return `<h2 class=\"text-2xl font-semibold mb-4 mt-8 text-white\">${line.substring(3)}</h2>`;\n                          }\n                          if (line.startsWith('### ')) {\n                            return `<h3 class=\"text-xl font-semibold mb-3 mt-6 text-gray-200\">${line.substring(4)}</h3>`;\n                          }\n                          if (line.startsWith('#### ')) {\n                            return `<h4 class=\"text-lg font-semibold mb-2 mt-4 text-gray-300\">${line.substring(5)}</h4>`;\n                          }\n                          // Convert bold text\n                          line = line.replace(/\\*\\*(.*?)\\*\\*/g, '<strong class=\"text-primary\">$1</strong>');\n                          // Convert bullet points\n                          if (line.startsWith('- ')) {\n                            return `<li class=\"ml-6 mb-2 text-gray-300\">${line.substring(2)}</li>`;\n                          }\n                          // Convert numbered lists\n                          if (/^\\d+\\.\\s/.test(line)) {\n                            return `<li class=\"ml-6 mb-2 text-gray-300\">${line.substring(line.indexOf('.') + 2)}</li>`;\n                          }\n                          // Convert code blocks\n                          if (line.startsWith('```')) {\n                            return line === '```' ? '</pre>' : `<pre class=\"bg-gray-900 p-4 rounded-lg overflow-x-auto\"><code class=\"text-green-400\">`;\n                          }\n                          // Convert inline code\n                          line = line.replace(/`([^`]+)`/g, '<code class=\"bg-gray-800 px-2 py-1 rounded text-blue-400\">$1</code>');\n                          // Regular paragraphs\n                          if (line.trim()) {\n                            return `<p class=\"mb-4 text-gray-300 leading-relaxed\">${line}</p>`;\n                          }\n                          return '<br/>';\n                        })\n                        .join('')\n                    }}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":24707},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Header from \"@/components/header\";\nimport SearchSection from \"@/components/search-section\";\nimport RepositoryCard from \"@/components/repository-card\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { TrendingRepos } from \"@/components/trending-repos\";\nimport { CardSkeleton } from \"@/components/skeleton-loader\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: recentAnalyses, isLoading: loadingAnalyses } = useQuery<any[]>({\n    queryKey: ['/api/analyses/recent'],\n    enabled: isAuthenticated,\n  });\n\n  const { data: trendingRepos, isLoading: loadingTrending } = useQuery<any[]>({\n    queryKey: ['/api/repositories/recent'],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-dark flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-dark text-white\">\n      <Header />\n      \n      <SearchSection />\n\n      {/* Dashboard Grid */}\n      <section className=\"py-16 bg-dark\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Trending Repositories - Left Column */}\n            <div className=\"lg:col-span-1\">\n              <TrendingRepos />\n            </div>\n            \n            {/* Recent Analyses - Right Column */}\n            <div className=\"lg:col-span-2\">\n              <div className=\"flex items-center justify-between mb-12\">\n                <h3 className=\"text-3xl font-bold\">Recent Analysis</h3>\n                <button className=\"text-primary hover:text-secondary transition-colors font-medium\" data-testid=\"button-view-all\">\n                  View All\n                </button>\n              </div>\n\n              {loadingAnalyses ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {[...Array(4)].map((_, i) => (\n                    <div key={i} className=\"bg-card border border-border rounded-xl p-6 animate-pulse\">\n                      <div className=\"h-4 bg-gray-700 rounded mb-4\"></div>\n                      <div className=\"h-3 bg-gray-700 rounded mb-2\"></div>\n                      <div className=\"h-3 bg-gray-700 rounded\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : recentAnalyses && recentAnalyses.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {recentAnalyses.slice(0, 4).map((analysis: any) => (\n                    <RepositoryCard\n                      key={analysis.id}\n                      repository={analysis.repository}\n                      analysis={analysis}\n                    />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <div className=\"w-16 h-16 rounded-full bg-gradient-to-r from-primary to-secondary flex items-center justify-center mx-auto mb-4\">\n                    <i className=\"fas fa-chart-line text-white text-2xl\"></i>\n                  </div>\n                  <h4 className=\"text-xl font-semibold mb-2\">No Recent Analysis</h4>\n                  <p className=\"text-gray-400 mb-4\">Start analyzing repositories to see them here</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":4129},"client/src/pages/integrations.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  GitBranch, Slack, Github, Gitlab, \n  MessageCircle, Calendar, Users, Zap,\n  Settings, Check, X, AlertCircle, ExternalLink,\n  Monitor, Package, Database, Cloud\n} from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface Integration {\n  id: string;\n  name: string;\n  icon: any;\n  description: string;\n  category: string;\n  connected: boolean;\n  configurable: boolean;\n  premium?: boolean;\n}\n\nconst availableIntegrations: Integration[] = [\n  {\n    id: \"github\",\n    name: \"GitHub\",\n    icon: Github,\n    description: \"Sync repositories and automate analysis workflows\",\n    category: \"version-control\",\n    connected: false,\n    configurable: true,\n  },\n  {\n    id: \"gitlab\",\n    name: \"GitLab\",\n    icon: Gitlab,\n    description: \"Integrate with GitLab repositories and CI/CD\",\n    category: \"version-control\",\n    connected: false,\n    configurable: true,\n  },\n  {\n    id: \"slack\",\n    name: \"Slack\",\n    icon: Slack,\n    description: \"Get analysis notifications in your Slack channels\",\n    category: \"communication\",\n    connected: false,\n    configurable: true,\n  },\n  {\n    id: \"discord\",\n    name: \"Discord\",\n    icon: MessageCircle,\n    description: \"Share analysis results to Discord servers\",\n    category: \"communication\",\n    connected: false,\n    configurable: true,\n  },\n  {\n    id: \"jira\",\n    name: \"Jira\",\n    icon: Package,\n    description: \"Create issues from analysis recommendations\",\n    category: \"project-management\",\n    connected: false,\n    configurable: true,\n    premium: true,\n  },\n  {\n    id: \"jenkins\",\n    name: \"Jenkins\",\n    icon: Monitor,\n    description: \"Trigger analysis from Jenkins pipelines\",\n    category: \"ci-cd\",\n    connected: false,\n    configurable: true,\n  },\n  {\n    id: \"circleci\",\n    name: \"CircleCI\",\n    icon: Zap,\n    description: \"Integrate with CircleCI workflows\",\n    category: \"ci-cd\",\n    connected: false,\n    configurable: true,\n  },\n  {\n    id: \"aws\",\n    name: \"AWS CodeCommit\",\n    icon: Cloud,\n    description: \"Analyze AWS CodeCommit repositories\",\n    category: \"cloud\",\n    connected: false,\n    configurable: true,\n    premium: true,\n  },\n];\n\nexport default function Integrations() {\n  const { toast } = useToast();\n  const [selectedIntegration, setSelectedIntegration] = useState<Integration | null>(null);\n  const [configData, setConfigData] = useState<Record<string, any>>({});\n  const [testingConnection, setTestingConnection] = useState<string | null>(null);\n\n  // Fetch connected integrations\n  const { data: connectedIntegrations = [], isLoading } = useQuery({\n    queryKey: [\"/api/integrations\"],\n  });\n\n  // Connect integration mutation\n  const connectMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", `/api/integrations/${data.id}/connect`, data.config);\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/integrations\"] });\n      toast({ \n        title: \"Integration connected\", \n        description: `${variables.name} has been connected successfully` \n      });\n      setSelectedIntegration(null);\n      setConfigData({});\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Connection failed\", \n        description: error.message || \"Failed to connect integration\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Disconnect integration mutation\n  const disconnectMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/integrations/${id}/disconnect`);\n    },\n    onSuccess: (_, id) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/integrations\"] });\n      toast({ title: \"Integration disconnected\" });\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to disconnect\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Test connection\n  const testConnection = async (integration: Integration) => {\n    setTestingConnection(integration.id);\n    try {\n      await apiRequest(\"POST\", `/api/integrations/${integration.id}/test`, configData[integration.id]);\n      toast({ \n        title: \"Connection successful\", \n        description: \"The integration is configured correctly\" \n      });\n    } catch (error) {\n      toast({ \n        title: \"Connection test failed\", \n        description: \"Please check your configuration\",\n        variant: \"destructive\" \n      });\n    } finally {\n      setTestingConnection(null);\n    }\n  };\n\n  const isConnected = (id: string) => {\n    return connectedIntegrations.some((int: any) => int.id === id);\n  };\n\n  const getIntegrationsByCategory = (category: string) => {\n    return availableIntegrations.filter(int => int.category === category);\n  };\n\n  const categories = [\n    { id: \"version-control\", name: \"Version Control\", icon: GitBranch },\n    { id: \"communication\", name: \"Communication\", icon: MessageCircle },\n    { id: \"project-management\", name: \"Project Management\", icon: Calendar },\n    { id: \"ci-cd\", name: \"CI/CD\", icon: Zap },\n    { id: \"cloud\", name: \"Cloud Providers\", icon: Cloud },\n  ];\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-7xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold mb-2 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n          Integration Hub\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Connect RepoAnalyzer with your favorite development tools\n        </p>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-3 mb-6\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-2xl\">{connectedIntegrations.length}</CardTitle>\n            <CardDescription>Active Integrations</CardDescription>\n          </CardHeader>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-2xl\">{availableIntegrations.length}</CardTitle>\n            <CardDescription>Available Integrations</CardDescription>\n          </CardHeader>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-2xl\">Real-time</CardTitle>\n            <CardDescription>Sync Status</CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"all\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"all\">All</TabsTrigger>\n          {categories.map(cat => (\n            <TabsTrigger key={cat.id} value={cat.id}>\n              <cat.icon className=\"h-4 w-4 mr-1\" />\n              {cat.name}\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        <TabsContent value=\"all\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {availableIntegrations.map(integration => {\n              const Icon = integration.icon;\n              const connected = isConnected(integration.id);\n              \n              return (\n                <Card key={integration.id} className=\"relative overflow-hidden\">\n                  {integration.premium && (\n                    <Badge className=\"absolute top-2 right-2 bg-gradient-to-r from-purple-500 to-pink-500\">\n                      Premium\n                    </Badge>\n                  )}\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Icon className=\"h-5 w-5\" />\n                      {integration.name}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      {integration.description}\n                    </p>\n                    <div className=\"flex items-center justify-between\">\n                      <Badge variant={connected ? \"default\" : \"secondary\"}>\n                        {connected ? \"Connected\" : \"Not Connected\"}\n                      </Badge>\n                      {connected ? (\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => disconnectMutation.mutate(integration.id)}\n                          disabled={disconnectMutation.isPending}\n                        >\n                          Disconnect\n                        </Button>\n                      ) : (\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button\n                              size=\"sm\"\n                              onClick={() => setSelectedIntegration(integration)}\n                            >\n                              Connect\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent>\n                            <DialogHeader>\n                              <DialogTitle className=\"flex items-center gap-2\">\n                                <Icon className=\"h-5 w-5\" />\n                                Connect {integration.name}\n                              </DialogTitle>\n                              <DialogDescription>\n                                Configure your {integration.name} integration\n                              </DialogDescription>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              {integration.id === \"github\" && (\n                                <>\n                                  <div>\n                                    <Label htmlFor=\"github-token\">Personal Access Token</Label>\n                                    <Input\n                                      id=\"github-token\"\n                                      type=\"password\"\n                                      placeholder=\"ghp_...\"\n                                      value={configData.github?.token || \"\"}\n                                      onChange={(e) => setConfigData({\n                                        ...configData,\n                                        github: { ...configData.github, token: e.target.value }\n                                      })}\n                                    />\n                                    <p className=\"text-xs text-muted-foreground mt-1\">\n                                      Generate a token at GitHub Settings → Developer settings\n                                    </p>\n                                  </div>\n                                  <div>\n                                    <Label htmlFor=\"github-org\">Organization (Optional)</Label>\n                                    <Input\n                                      id=\"github-org\"\n                                      placeholder=\"my-org\"\n                                      value={configData.github?.organization || \"\"}\n                                      onChange={(e) => setConfigData({\n                                        ...configData,\n                                        github: { ...configData.github, organization: e.target.value }\n                                      })}\n                                    />\n                                  </div>\n                                </>\n                              )}\n                              {integration.id === \"slack\" && (\n                                <>\n                                  <div>\n                                    <Label htmlFor=\"slack-webhook\">Webhook URL</Label>\n                                    <Input\n                                      id=\"slack-webhook\"\n                                      type=\"url\"\n                                      placeholder=\"https://hooks.slack.com/services/...\"\n                                      value={configData.slack?.webhookUrl || \"\"}\n                                      onChange={(e) => setConfigData({\n                                        ...configData,\n                                        slack: { ...configData.slack, webhookUrl: e.target.value }\n                                      })}\n                                    />\n                                    <p className=\"text-xs text-muted-foreground mt-1\">\n                                      Create an incoming webhook in your Slack workspace\n                                    </p>\n                                  </div>\n                                  <div>\n                                    <Label htmlFor=\"slack-channel\">Default Channel</Label>\n                                    <Input\n                                      id=\"slack-channel\"\n                                      placeholder=\"#repo-analysis\"\n                                      value={configData.slack?.channel || \"\"}\n                                      onChange={(e) => setConfigData({\n                                        ...configData,\n                                        slack: { ...configData.slack, channel: e.target.value }\n                                      })}\n                                    />\n                                  </div>\n                                </>\n                              )}\n                              {integration.id === \"jira\" && (\n                                <>\n                                  <div>\n                                    <Label htmlFor=\"jira-url\">Jira URL</Label>\n                                    <Input\n                                      id=\"jira-url\"\n                                      type=\"url\"\n                                      placeholder=\"https://yourcompany.atlassian.net\"\n                                      value={configData.jira?.url || \"\"}\n                                      onChange={(e) => setConfigData({\n                                        ...configData,\n                                        jira: { ...configData.jira, url: e.target.value }\n                                      })}\n                                    />\n                                  </div>\n                                  <div>\n                                    <Label htmlFor=\"jira-email\">Email</Label>\n                                    <Input\n                                      id=\"jira-email\"\n                                      type=\"email\"\n                                      placeholder=\"you@company.com\"\n                                      value={configData.jira?.email || \"\"}\n                                      onChange={(e) => setConfigData({\n                                        ...configData,\n                                        jira: { ...configData.jira, email: e.target.value }\n                                      })}\n                                    />\n                                  </div>\n                                  <div>\n                                    <Label htmlFor=\"jira-token\">API Token</Label>\n                                    <Input\n                                      id=\"jira-token\"\n                                      type=\"password\"\n                                      placeholder=\"Your API token\"\n                                      value={configData.jira?.token || \"\"}\n                                      onChange={(e) => setConfigData({\n                                        ...configData,\n                                        jira: { ...configData.jira, token: e.target.value }\n                                      })}\n                                    />\n                                  </div>\n                                </>\n                              )}\n                              <div className=\"flex items-center space-x-2\">\n                                <Switch\n                                  id=\"notifications\"\n                                  checked={configData[integration.id]?.notifications || false}\n                                  onCheckedChange={(checked) => setConfigData({\n                                    ...configData,\n                                    [integration.id]: { \n                                      ...configData[integration.id], \n                                      notifications: checked \n                                    }\n                                  })}\n                                />\n                                <Label htmlFor=\"notifications\">\n                                  Enable notifications\n                                </Label>\n                              </div>\n                            </div>\n                            <DialogFooter>\n                              <Button\n                                variant=\"outline\"\n                                onClick={() => testConnection(integration)}\n                                disabled={testingConnection === integration.id}\n                              >\n                                {testingConnection === integration.id ? \"Testing...\" : \"Test Connection\"}\n                              </Button>\n                              <Button\n                                onClick={() => connectMutation.mutate({\n                                  id: integration.id,\n                                  name: integration.name,\n                                  config: configData[integration.id]\n                                })}\n                                disabled={connectMutation.isPending}\n                              >\n                                Connect\n                              </Button>\n                            </DialogFooter>\n                          </DialogContent>\n                        </Dialog>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n\n        {categories.map(category => (\n          <TabsContent key={category.id} value={category.id}>\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {getIntegrationsByCategory(category.id).map(integration => {\n                const Icon = integration.icon;\n                const connected = isConnected(integration.id);\n                \n                return (\n                  <Card key={integration.id} className=\"relative overflow-hidden\">\n                    {integration.premium && (\n                      <Badge className=\"absolute top-2 right-2 bg-gradient-to-r from-purple-500 to-pink-500\">\n                        Premium\n                      </Badge>\n                    )}\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Icon className=\"h-5 w-5\" />\n                        {integration.name}\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-muted-foreground mb-4\">\n                        {integration.description}\n                      </p>\n                      <div className=\"flex items-center justify-between\">\n                        <Badge variant={connected ? \"default\" : \"secondary\"}>\n                          {connected ? \"Connected\" : \"Not Connected\"}\n                        </Badge>\n                        {connected ? (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => disconnectMutation.mutate(integration.id)}\n                          >\n                            Disconnect\n                          </Button>\n                        ) : (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => setSelectedIntegration(integration)}\n                          >\n                            Connect\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </TabsContent>\n        ))}\n      </Tabs>\n\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle>Integration Activity</CardTitle>\n          <CardDescription>Recent integration events and webhooks</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ScrollArea className=\"h-[200px]\">\n            <div className=\"space-y-2\">\n              {[1, 2, 3, 4, 5].map(i => (\n                <div key={i} className=\"flex items-center justify-between py-2 border-b\">\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {i % 2 === 0 ? \"Webhook\" : \"Sync\"}\n                    </Badge>\n                    <span className=\"text-sm\">\n                      {i % 2 === 0 \n                        ? \"Analysis result sent to Slack #dev-team\" \n                        : \"GitHub repository sync completed\"}\n                    </span>\n                  </div>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {i} minutes ago\n                  </span>\n                </div>\n              ))}\n            </div>\n          </ScrollArea>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":22177},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-dark text-white\">\n      {/* Hero Section */}\n      <section className=\"relative py-32 bg-gradient-to-b from-dark via-card to-dark overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-primary/10 via-secondary/10 to-accent/10 animate-glow\"></div>\n        <div className=\"relative max-w-6xl mx-auto px-6 text-center\">\n          <div className=\"flex items-center justify-center space-x-3 mb-8\">\n            <div className=\"w-16 h-16 rounded-2xl bg-gradient-to-r from-primary to-secondary flex items-center justify-center animate-float\">\n              <i className=\"fas fa-code text-white text-2xl\"></i>\n            </div>\n            <h1 className=\"text-6xl font-bold gradient-text\">RepoRadar</h1>\n          </div>\n          \n          <h2 className=\"text-5xl font-bold mb-8 leading-tight\">\n            Discover & Analyze\n            <br />\n            <span className=\"gradient-text\">GitHub Repositories</span>\n          </h2>\n          \n          <p className=\"text-xl text-gray-300 mb-12 max-w-3xl mx-auto leading-relaxed\">\n            AI-powered analysis of originality, completeness, marketability, and monetization potential. \n            Make informed decisions about repositories with comprehensive insights powered by Gemini 2.5 Pro.\n          </p>\n          \n          <div className=\"flex items-center justify-center space-x-6 mb-16\">\n            <Button\n              onClick={() => window.location.href = '/api/login'}\n              className=\"bg-gradient-to-r from-primary to-secondary hover:from-secondary hover:to-primary text-white px-12 py-4 rounded-xl text-lg font-semibold transition-all duration-300 neon-glow\"\n              data-testid=\"button-login\"\n            >\n              Get Started Free\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"border-2 border-primary/30 text-primary hover:bg-primary/10 px-8 py-4 rounded-xl text-lg font-medium transition-all duration-300\"\n              data-testid=\"button-learn-more\"\n            >\n              Learn More\n            </Button>\n          </div>\n\n          {/* Feature highlights */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n            <Card className=\"bg-card/50 border-border backdrop-blur-sm\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 rounded-lg bg-gradient-to-r from-primary to-secondary flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-brain text-white\"></i>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">AI-Powered Analysis</h3>\n                <p className=\"text-gray-400\">Gemini 2.5 Pro evaluates repositories across 5 key metrics</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-card/50 border-border backdrop-blur-sm\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 rounded-lg bg-gradient-to-r from-accent to-primary flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-chart-line text-white\"></i>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">Comprehensive Metrics</h3>\n                <p className=\"text-gray-400\">Analyze originality, completeness, marketability, and more</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-card/50 border-border backdrop-blur-sm\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 rounded-lg bg-gradient-to-r from-secondary to-accent flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-balance-scale text-white\"></i>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">Smart Comparison</h3>\n                <p className=\"text-gray-400\">Compare repositories side-by-side with detailed breakdowns</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-24 bg-gradient-to-b from-card to-dark\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold gradient-text mb-4\">Powerful Analysis Tools</h2>\n            <p className=\"text-xl text-gray-400 max-w-2xl mx-auto\">\n              Everything you need to make informed decisions about GitHub repositories\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-8\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 rounded-lg bg-gradient-to-r from-primary to-secondary flex items-center justify-center flex-shrink-0\">\n                  <i className=\"fas fa-search text-white\"></i>\n                </div>\n                <div>\n                  <h3 className=\"text-2xl font-semibold mb-2\">Repository Discovery</h3>\n                  <p className=\"text-gray-400\">\n                    Search and discover repositories with advanced filtering and trending insights.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 rounded-lg bg-gradient-to-r from-accent to-primary flex items-center justify-center flex-shrink-0\">\n                  <i className=\"fas fa-robot text-white\"></i>\n                </div>\n                <div>\n                  <h3 className=\"text-2xl font-semibold mb-2\">AI Evaluation</h3>\n                  <p className=\"text-gray-400\">\n                    Get comprehensive analysis with scores for originality, completeness, and market potential.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 rounded-lg bg-gradient-to-r from-secondary to-accent flex items-center justify-center flex-shrink-0\">\n                  <i className=\"fas fa-bookmark text-white\"></i>\n                </div>\n                <div>\n                  <h3 className=\"text-2xl font-semibold mb-2\">Save & Organize</h3>\n                  <p className=\"text-gray-400\">\n                    Bookmark interesting repositories and track your analysis history.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"gradient-border\">\n              <div className=\"bg-card rounded-xl p-8 space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"text-lg font-semibold\">Sample Analysis</h4>\n                  <div className=\"text-2xl font-bold gradient-text\">8.9</div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-400\">Originality</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-20 h-2 bg-gray-700 rounded-full overflow-hidden\">\n                        <div className=\"w-5/6 h-full bg-gradient-to-r from-primary to-secondary\"></div>\n                      </div>\n                      <span className=\"text-primary font-semibold\">8.7</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-400\">Completeness</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-20 h-2 bg-gray-700 rounded-full overflow-hidden\">\n                        <div className=\"w-full h-full bg-gradient-to-r from-green-400 to-blue-500\"></div>\n                      </div>\n                      <span className=\"text-green-400 font-semibold\">9.4</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-400\">Marketability</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-20 h-2 bg-gray-700 rounded-full overflow-hidden\">\n                        <div className=\"w-11/12 h-full bg-gradient-to-r from-accent to-primary\"></div>\n                      </div>\n                      <span className=\"text-accent font-semibold\">9.1</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-24 bg-gradient-to-r from-dark via-card to-dark\">\n        <div className=\"max-w-4xl mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Get Started?</h2>\n          <p className=\"text-xl text-gray-300 mb-10\">\n            Join thousands of developers making smarter repository decisions\n          </p>\n          <Button\n            onClick={() => window.location.href = '/api/login'}\n            className=\"bg-gradient-to-r from-primary to-secondary hover:from-secondary hover:to-primary text-white px-12 py-4 rounded-xl text-lg font-semibold transition-all duration-300 neon-glow\"\n            data-testid=\"button-get-started\"\n          >\n            Start Analyzing Now\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-12\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-8 h-8 rounded-lg bg-gradient-to-r from-primary to-secondary flex items-center justify-center\">\n                  <i className=\"fas fa-code text-white text-sm\"></i>\n                </div>\n                <h3 className=\"text-xl font-bold gradient-text\">RepoAnalyzer</h3>\n              </div>\n              <p className=\"text-gray-400 text-sm\">AI-powered GitHub repository analysis platform.</p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Features</h4>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li>Repository Search</li>\n                <li>AI Analysis</li>\n                <li>Comparison Tool</li>\n                <li>Similar Repos</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Resources</h4>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li>Documentation</li>\n                <li>API Reference</li>\n                <li>Community</li>\n                <li>Support</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Company</h4>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li>About</li>\n                <li>Blog</li>\n                <li>Privacy</li>\n                <li>Terms</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-border pt-8 mt-8 text-center text-gray-400 text-sm\">\n            <p>&copy; 2024 RepoAnalyzer. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":11741},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/payment-success.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle2, ArrowRight } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nexport default function PaymentSuccess() {\n  const [location, setLocation] = useLocation();\n  const [plan, setPlan] = useState<string>(\"\");\n\n  useEffect(() => {\n    // Extract plan from query params\n    const params = new URLSearchParams(location.split('?')[1]);\n    const planParam = params.get('plan');\n    setPlan(planParam || 'Pro');\n  }, [location]);\n\n  return (\n    <div className=\"container mx-auto px-4 py-16 max-w-2xl\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <Card className=\"text-center\">\n          <CardHeader>\n            <div className=\"mx-auto mb-4 w-16 h-16 bg-green-100 rounded-full flex items-center justify-center\">\n              <CheckCircle2 className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <CardTitle className=\"text-2xl mb-2\">Payment Successful!</CardTitle>\n            <CardDescription className=\"text-lg\">\n              Welcome to RepoAnalyzer {plan.charAt(0).toUpperCase() + plan.slice(1)}\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            <div className=\"bg-gradient-to-r from-[#FF6B35]/10 to-[#FF3333]/10 rounded-lg p-6\">\n              <h3 className=\"font-semibold mb-3\">Your subscription includes:</h3>\n              <ul className=\"text-left space-y-2 max-w-md mx-auto\">\n                {plan.toLowerCase() === 'pro' ? (\n                  <>\n                    <li className=\"flex items-center gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n                      Unlimited repository analyses\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n                      Advanced analysis metrics\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n                      PDF export with branding\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n                      API access (1000 calls/month)\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n                      Priority AI Assistant\n                    </li>\n                  </>\n                ) : (\n                  <>\n                    <li className=\"flex items-center gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n                      Everything in Pro, plus:\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n                      Unlimited API access\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n                      White-label PDF exports\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n                      Custom analysis criteria\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n                      Bulk analysis (100+ repos)\n                    </li>\n                  </>\n                )}\n              </ul>\n            </div>\n\n            <div className=\"space-y-3\">\n              <Button\n                onClick={() => setLocation(\"/\")}\n                className=\"w-full bg-gradient-to-r from-[#FF6B35] to-[#FF3333] hover:from-[#FF6B35]/90 hover:to-[#FF3333]/90\"\n                data-testid=\"button-start-analyzing\"\n              >\n                Start Analyzing Repositories\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n              \n              <Button\n                onClick={() => setLocation(\"/profile\")}\n                variant=\"outline\"\n                className=\"w-full\"\n                data-testid=\"button-manage-subscription\"\n              >\n                Manage Subscription\n              </Button>\n            </div>\n\n            <div className=\"text-sm text-muted-foreground\">\n              <p>A confirmation email has been sent to your registered email address.</p>\n              <p className=\"mt-1\">Your subscription will automatically renew each month.</p>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":5122},"client/src/pages/pricing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Check, X, Sparkles, Rocket, Building2 } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { motion } from \"framer-motion\";\n\nconst plans = [\n  {\n    name: \"Free\",\n    icon: Sparkles,\n    price: \"$0\",\n    period: \"forever\",\n    description: \"Perfect for exploring and casual analysis\",\n    features: [\n      { text: \"5 repository analyses per day\", included: true },\n      { text: \"Basic analysis metrics\", included: true },\n      { text: \"Search and discovery\", included: true },\n      { text: \"Compare up to 3 repositories\", included: true },\n      { text: \"AI Assistant (limited)\", included: true },\n      { text: \"PDF export\", included: false },\n      { text: \"API access\", included: false },\n      { text: \"Priority support\", included: false },\n      { text: \"Custom analysis criteria\", included: false },\n      { text: \"Bulk analysis\", included: false },\n    ],\n    buttonText: \"Current Plan\",\n    buttonVariant: \"outline\" as const,\n    popular: false,\n  },\n  {\n    name: \"Pro\",\n    icon: Rocket,\n    price: \"$19\",\n    period: \"/month\",\n    description: \"For developers and teams who need more\",\n    features: [\n      { text: \"Unlimited repository analyses\", included: true },\n      { text: \"Advanced analysis metrics\", included: true },\n      { text: \"Search and discovery\", included: true },\n      { text: \"Compare up to 10 repositories\", included: true },\n      { text: \"Priority AI Assistant\", included: true },\n      { text: \"PDF export with branding\", included: true },\n      { text: \"API access (1000 calls/month)\", included: true },\n      { text: \"Email support\", included: true },\n      { text: \"Custom analysis criteria\", included: false },\n      { text: \"Bulk analysis\", included: false },\n    ],\n    buttonText: \"Upgrade to Pro\",\n    buttonVariant: \"default\" as const,\n    popular: true,\n  },\n  {\n    name: \"Enterprise\",\n    icon: Building2,\n    price: \"$99\",\n    period: \"/month\",\n    description: \"For organizations with advanced needs\",\n    features: [\n      { text: \"Unlimited repository analyses\", included: true },\n      { text: \"Advanced analysis metrics\", included: true },\n      { text: \"Search and discovery\", included: true },\n      { text: \"Unlimited comparisons\", included: true },\n      { text: \"Priority AI Assistant\", included: true },\n      { text: \"White-label PDF exports\", included: true },\n      { text: \"Unlimited API access\", included: true },\n      { text: \"Priority support\", included: true },\n      { text: \"Custom analysis criteria\", included: true },\n      { text: \"Bulk analysis (100+ repos)\", included: true },\n    ],\n    buttonText: \"Contact Sales\",\n    buttonVariant: \"default\" as const,\n    popular: false,\n  },\n];\n\nexport default function Pricing() {\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  const handleUpgrade = (planName: string) => {\n    if (planName === \"Free\") {\n      return;\n    }\n\n    if (!isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to upgrade your plan\",\n        variant: \"destructive\",\n      });\n      window.location.href = \"/api/login\";\n      return;\n    }\n\n    if (planName === \"Enterprise\") {\n      toast({\n        title: \"Enterprise Plan\",\n        description: \"Our team will contact you shortly to discuss your needs\",\n      });\n      return;\n    }\n\n    // Navigate to checkout for Pro plan\n    setLocation(`/checkout?plan=${planName.toLowerCase()}`);\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-16\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"text-center mb-12\"\n      >\n        <h1 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-[#FF6B35] to-[#FF3333] bg-clip-text text-transparent\">\n          Choose Your Plan\n        </h1>\n        <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n          Unlock the full potential of repository analysis with our flexible pricing plans\n        </p>\n      </motion.div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n        {plans.map((plan, index) => (\n          <motion.div\n            key={plan.name}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: index * 0.1 }}\n          >\n            <Card className={`relative h-full flex flex-col ${plan.popular ? 'border-[#FF6B35] shadow-2xl scale-105' : ''}`}>\n              {plan.popular && (\n                <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                  <span className=\"bg-gradient-to-r from-[#FF6B35] to-[#FF3333] text-white px-4 py-1 rounded-full text-sm font-semibold\">\n                    Most Popular\n                  </span>\n                </div>\n              )}\n              \n              <CardHeader className=\"text-center pb-8 pt-8\">\n                <div className=\"mx-auto mb-4 p-3 rounded-full bg-gradient-to-r from-[#FF6B35]/10 to-[#FF3333]/10\">\n                  <plan.icon className=\"w-8 h-8 text-[#FF6B35]\" />\n                </div>\n                <CardTitle className=\"text-2xl mb-2\">{plan.name}</CardTitle>\n                <CardDescription className=\"text-base\">{plan.description}</CardDescription>\n                <div className=\"mt-4\">\n                  <span className=\"text-4xl font-bold\">{plan.price}</span>\n                  <span className=\"text-muted-foreground\">{plan.period}</span>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"flex-1\">\n                <ul className=\"space-y-3\">\n                  {plan.features.map((feature, idx) => (\n                    <li key={idx} className=\"flex items-start gap-2\">\n                      {feature.included ? (\n                        <Check className=\"w-5 h-5 text-green-500 shrink-0 mt-0.5\" />\n                      ) : (\n                        <X className=\"w-5 h-5 text-gray-400 shrink-0 mt-0.5\" />\n                      )}\n                      <span className={feature.included ? \"\" : \"text-muted-foreground\"}>\n                        {feature.text}\n                      </span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n              \n              <CardFooter className=\"pt-6\">\n                <Button\n                  onClick={() => handleUpgrade(plan.name)}\n                  variant={plan.buttonVariant}\n                  className=\"w-full\"\n                  disabled={plan.name === \"Free\" && user?.subscriptionTier === \"free\"}\n                  data-testid={`button-upgrade-${plan.name.toLowerCase()}`}\n                >\n                  {plan.buttonText}\n                </Button>\n              </CardFooter>\n            </Card>\n          </motion.div>\n        ))}\n      </div>\n\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.5, delay: 0.5 }}\n        className=\"mt-16 text-center\"\n      >\n        <div className=\"bg-gradient-to-r from-[#FF6B35]/10 to-[#FF3333]/10 rounded-lg p-8 max-w-4xl mx-auto\">\n          <h2 className=\"text-2xl font-bold mb-4\">All Plans Include</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mt-6\">\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-[#FF6B35] to-[#FF3333] rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Check className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold mb-1\">Secure & Private</h3>\n              <p className=\"text-sm text-muted-foreground\">Your data is encrypted and never shared</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-[#FF6B35] to-[#FF3333] rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Check className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold mb-1\">Cancel Anytime</h3>\n              <p className=\"text-sm text-muted-foreground\">No contracts or hidden fees</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-[#FF6B35] to-[#FF3333] rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Check className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"font-semibold mb-1\">Regular Updates</h3>\n              <p className=\"text-sm text-muted-foreground\">New features added continuously</p>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":9036},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  User, Settings, Bookmark, Tag, FolderOpen, Brain, \n  Plus, Trash2, Edit, Star, GitBranch, Calendar, \n  TrendingUp, Code, Package, Sparkles, Lock, Crown\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport { restartTour } from \"@/components/onboarding-tour\";\n\nexport default function Profile() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedCollection, setSelectedCollection] = useState<number | null>(null);\n  const [newTagName, setNewTagName] = useState(\"\");\n  const [newTagColor, setNewTagColor] = useState(\"#FF6B35\");\n  const [newCollectionName, setNewCollectionName] = useState(\"\");\n  const [newCollectionDescription, setNewCollectionDescription] = useState(\"\");\n\n  // Check if user has Pro or Enterprise subscription\n  const isPremium = user?.subscriptionTier === 'pro' || user?.subscriptionTier === 'enterprise';\n\n  // Fetch user preferences\n  const { data: preferences, isLoading: preferencesLoading } = useQuery<any>({\n    queryKey: ['/api/user/preferences'],\n    enabled: isPremium,\n    retry: false,\n  });\n\n  // Fetch bookmarks\n  const { data: bookmarks = [] } = useQuery<any[]>({\n    queryKey: ['/api/user/bookmarks'],\n    enabled: isPremium,\n    retry: false,\n  });\n\n  // Fetch tags\n  const { data: tags = [] } = useQuery<any[]>({\n    queryKey: ['/api/user/tags'],\n    enabled: isPremium,\n    retry: false,\n  });\n\n  // Fetch collections\n  const { data: collections = [] } = useQuery<any[]>({\n    queryKey: ['/api/user/collections'],\n    enabled: isPremium,\n    retry: false,\n  });\n\n  // Fetch AI recommendations\n  const { data: recommendations, isLoading: recommendationsLoading } = useQuery<any>({\n    queryKey: ['/api/user/recommendations'],\n    enabled: isPremium && preferences?.aiRecommendations !== false,\n    retry: false,\n  });\n\n  // Update preferences mutation\n  const updatePreferencesMutation = useMutation({\n    mutationFn: async (prefs: any) => {\n      return await apiRequest('PUT', '/api/user/preferences', prefs);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/preferences'] });\n      toast({\n        title: \"Preferences Updated\",\n        description: \"Your preferences have been saved successfully.\",\n      });\n    },\n  });\n\n  // Create tag mutation\n  const createTagMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('POST', '/api/user/tags', {\n        name: newTagName,\n        color: newTagColor,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/tags'] });\n      setNewTagName(\"\");\n      toast({\n        title: \"Tag Created\",\n        description: \"Your new tag has been created successfully.\",\n      });\n    },\n  });\n\n  // Create collection mutation\n  const createCollectionMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('POST', '/api/user/collections', {\n        name: newCollectionName,\n        description: newCollectionDescription,\n        icon: \"folder\",\n        color: \"#FF6B35\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/collections'] });\n      setNewCollectionName(\"\");\n      setNewCollectionDescription(\"\");\n      toast({\n        title: \"Collection Created\",\n        description: \"Your new collection has been created successfully.\",\n      });\n    },\n  });\n\n  // Remove bookmark mutation\n  const removeBookmarkMutation = useMutation({\n    mutationFn: async (repositoryId: string) => {\n      return await apiRequest('DELETE', `/api/user/bookmarks/${repositoryId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/bookmarks'] });\n      toast({\n        title: \"Bookmark Removed\",\n        description: \"Repository has been removed from your bookmarks.\",\n      });\n    },\n  });\n\n  if (authLoading || preferencesLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    useEffect(() => {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to view your profile.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }, []);\n    return null;\n  }\n\n  if (!isPremium) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Card className=\"max-w-2xl mx-auto\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mb-4\">\n              <Lock className=\"w-16 h-16 mx-auto text-muted-foreground\" />\n            </div>\n            <CardTitle className=\"text-2xl\">Premium Feature</CardTitle>\n            <CardDescription className=\"text-lg mt-2\">\n              Intelligent user profiles are available for Pro and Enterprise users\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <p className=\"mb-6 text-muted-foreground\">\n              Unlock AI-powered recommendations, smart bookmarks, tags, and collections to organize and discover repositories tailored to your interests.\n            </p>\n            <div className=\"flex gap-4 justify-center\">\n              <Link href=\"/pricing\">\n                <Button size=\"lg\" className=\"gap-2\">\n                  <Crown className=\"w-5 h-5\" />\n                  View Plans\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* User Header */}\n        <Card className=\"mb-8 bg-gradient-to-r from-primary/10 to-primary/5\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-6\">\n              {user.profileImageUrl ? (\n                <img \n                  src={user.profileImageUrl} \n                  alt={user.firstName || \"Profile\"} \n                  className=\"w-20 h-20 rounded-full object-cover border-4 border-primary/20\"\n                />\n              ) : (\n                <div className=\"w-20 h-20 rounded-full bg-primary/20 flex items-center justify-center\">\n                  <User className=\"w-10 h-10 text-primary\" />\n                </div>\n              )}\n              <div className=\"flex-1\">\n                <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n                  {user.firstName} {user.lastName}\n                  <Badge variant=\"default\" className=\"ml-2\">\n                    {user.subscriptionTier === 'enterprise' ? 'Enterprise' : 'Pro'}\n                  </Badge>\n                </h1>\n                <p className=\"text-muted-foreground\">{user.email}</p>\n                <div className=\"flex gap-4 mt-2 text-sm text-muted-foreground\">\n                  <span className=\"flex items-center gap-1\">\n                    <Calendar className=\"w-4 h-4\" />\n                    Member since {user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A'}\n                  </span>\n                  <span className=\"flex items-center gap-1\">\n                    <TrendingUp className=\"w-4 h-4\" />\n                    {bookmarks.length} Bookmarks\n                  </span>\n                  <span className=\"flex items-center gap-1\">\n                    <FolderOpen className=\"w-4 h-4\" />\n                    {collections.length} Collections\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Subscription Status Card */}\n        <Card className=\"mb-6 border-2 border-primary/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span className=\"flex items-center gap-2\">\n                <Crown className=\"h-5 w-5\" />\n                Subscription Details\n              </span>\n              <Link href=\"/pricing\">\n                <Button variant=\"outline\" size=\"sm\">\n                  Manage Subscription\n                </Button>\n              </Link>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid gap-4 md:grid-cols-4\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Current Plan</p>\n                <p className=\"text-lg font-semibold capitalize\">\n                  {user?.subscriptionTier || 'Free'}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Status</p>\n                <p className=\"text-lg font-semibold\">\n                  {user?.subscriptionStatus === 'active' ? (\n                    <span className=\"text-green-500\">Active</span>\n                  ) : user?.subscriptionStatus === 'past_due' ? (\n                    <span className=\"text-orange-500\">Past Due</span>\n                  ) : user?.subscriptionStatus === 'cancelled' ? (\n                    <span className=\"text-red-500\">Cancelled</span>\n                  ) : (\n                    <span className=\"text-gray-500\">Active</span>\n                  )}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Daily Analyses</p>\n                <p className=\"text-lg font-semibold\">\n                  {user?.subscriptionTier === 'enterprise' ? 'Unlimited' : user?.subscriptionTier === 'pro' ? '50 per day' : 'Unlimited'}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">API Access</p>\n                <p className=\"text-lg font-semibold\">\n                  {user?.subscriptionTier === 'enterprise' ? '10K/hour' : '1K/hour'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"recommendations\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"recommendations\" className=\"gap-2\">\n              <Brain className=\"w-4 h-4\" />\n              AI Recommendations\n            </TabsTrigger>\n            <TabsTrigger value=\"bookmarks\" className=\"gap-2\">\n              <Bookmark className=\"w-4 h-4\" />\n              Bookmarks\n            </TabsTrigger>\n            <TabsTrigger value=\"collections\" className=\"gap-2\">\n              <FolderOpen className=\"w-4 h-4\" />\n              Collections\n            </TabsTrigger>\n            <TabsTrigger value=\"tags\" className=\"gap-2\">\n              <Tag className=\"w-4 h-4\" />\n              Tags\n            </TabsTrigger>\n            <TabsTrigger value=\"preferences\" className=\"gap-2\">\n              <Settings className=\"w-4 h-4\" />\n              Preferences\n            </TabsTrigger>\n          </TabsList>\n\n          {/* AI Recommendations Tab */}\n          <TabsContent value=\"recommendations\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Sparkles className=\"w-5 h-5 text-primary\" />\n                  Personalized Recommendations\n                </CardTitle>\n                <CardDescription>\n                  AI-curated repositories based on your activity and preferences\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {recommendationsLoading ? (\n                  <div className=\"flex justify-center py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n                  </div>\n                ) : recommendations?.recommendations?.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {recommendations.recommendations.map((repo: any, index: number) => (\n                      <motion.div\n                        key={repo.name}\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.1 }}\n                        className=\"p-4 border rounded-lg hover:bg-accent/50 transition-colors\"\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold text-lg flex items-center gap-2\">\n                              <GitBranch className=\"w-4 h-4\" />\n                              {repo.name}\n                            </h3>\n                            <p className=\"text-sm text-muted-foreground mt-1\">\n                              {repo.description}\n                            </p>\n                            <div className=\"flex items-center gap-4 mt-2\">\n                              <Badge variant=\"secondary\">{repo.primaryLanguage}</Badge>\n                              <span className=\"flex items-center gap-1 text-sm\">\n                                <Star className=\"w-4 h-4\" />\n                                {repo.stars}\n                              </span>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {Math.round(repo.matchScore * 100)}% Match\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-primary mt-2\">\n                              {repo.reason}\n                            </p>\n                          </div>\n                          <Button size=\"sm\" variant=\"outline\" asChild>\n                            <Link href={`/repository/${encodeURIComponent(repo.name)}`}>\n                              View\n                            </Link>\n                          </Button>\n                        </div>\n                      </motion.div>\n                    ))}\n                    \n                    {recommendations?.insights && (\n                      <Card className=\"mt-6 bg-primary/5\">\n                        <CardHeader>\n                          <CardTitle className=\"text-lg\">Insights</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-2\">\n                          <div>\n                            <span className=\"font-semibold\">Top Interests:</span>{\" \"}\n                            {recommendations.insights.topInterests?.join(\", \")}\n                          </div>\n                          <div>\n                            <span className=\"font-semibold\">Suggested Topics:</span>{\" \"}\n                            {recommendations.insights.suggestedTopics?.join(\", \")}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground mt-2\">\n                            {recommendations.insights.recommendationRationale}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n                  </div>\n                ) : (\n                  <p className=\"text-center text-muted-foreground py-8\">\n                    No recommendations available yet. Start exploring repositories to get personalized suggestions!\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Bookmarks Tab */}\n          <TabsContent value=\"bookmarks\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Bookmarked Repositories</CardTitle>\n                <CardDescription>\n                  Your saved repositories for quick access\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {bookmarks.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {bookmarks.map((bookmark: any) => (\n                      <div key={bookmark.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium\">{bookmark.repositoryId}</h4>\n                          {bookmark.notes && (\n                            <p className=\"text-sm text-muted-foreground\">{bookmark.notes}</p>\n                          )}\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button size=\"sm\" variant=\"outline\" asChild>\n                            <Link href={`/repository/${bookmark.repositoryId}`}>View</Link>\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            onClick={() => removeBookmarkMutation.mutate(bookmark.repositoryId)}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-center text-muted-foreground py-8\">\n                    No bookmarks yet. Save repositories to access them quickly!\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Collections Tab */}\n          <TabsContent value=\"collections\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Repository Collections</CardTitle>\n                <CardDescription>\n                  Organize repositories into themed collections\n                </CardDescription>\n                <div className=\"mt-4\">\n                  <Dialog>\n                    <DialogTrigger asChild>\n                      <Button className=\"gap-2\">\n                        <Plus className=\"w-4 h-4\" />\n                        New Collection\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Create New Collection</DialogTitle>\n                        <DialogDescription>\n                          Create a collection to organize related repositories\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"collection-name\">Name</Label>\n                          <Input\n                            id=\"collection-name\"\n                            value={newCollectionName}\n                            onChange={(e) => setNewCollectionName(e.target.value)}\n                            placeholder=\"e.g., Machine Learning Projects\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"collection-description\">Description</Label>\n                          <Textarea\n                            id=\"collection-description\"\n                            value={newCollectionDescription}\n                            onChange={(e) => setNewCollectionDescription(e.target.value)}\n                            placeholder=\"Description of this collection...\"\n                          />\n                        </div>\n                        <Button \n                          onClick={() => createCollectionMutation.mutate()}\n                          disabled={!newCollectionName}\n                          className=\"w-full\"\n                        >\n                          Create Collection\n                        </Button>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {collections.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {collections.map((collection: any) => (\n                      <Card key={collection.id} className=\"hover:shadow-lg transition-shadow\">\n                        <CardHeader>\n                          <CardTitle className=\"text-lg flex items-center gap-2\">\n                            <FolderOpen className=\"w-5 h-5\" style={{ color: collection.color }} />\n                            {collection.name}\n                          </CardTitle>\n                          {collection.description && (\n                            <CardDescription>{collection.description}</CardDescription>\n                          )}\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-sm text-muted-foreground\">\n                              {collection.isPublic ? \"Public\" : \"Private\"}\n                            </span>\n                            <Button size=\"sm\" variant=\"outline\">\n                              View Collection\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-center text-muted-foreground py-8\">\n                    No collections yet. Create collections to organize your repositories!\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Tags Tab */}\n          <TabsContent value=\"tags\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Repository Tags</CardTitle>\n                <CardDescription>\n                  Create tags to categorize and filter repositories\n                </CardDescription>\n                <div className=\"mt-4 flex gap-2\">\n                  <Input\n                    placeholder=\"Tag name...\"\n                    value={newTagName}\n                    onChange={(e) => setNewTagName(e.target.value)}\n                    className=\"max-w-xs\"\n                  />\n                  <Input\n                    type=\"color\"\n                    value={newTagColor}\n                    onChange={(e) => setNewTagColor(e.target.value)}\n                    className=\"w-20\"\n                  />\n                  <Button \n                    onClick={() => createTagMutation.mutate()}\n                    disabled={!newTagName}\n                    className=\"gap-2\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                    Add Tag\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {tags.length > 0 ? (\n                  <div className=\"flex flex-wrap gap-2\">\n                    {tags.map((tag: any) => (\n                      <Badge \n                        key={tag.id} \n                        variant=\"outline\" \n                        className=\"px-3 py-1\"\n                        style={{ borderColor: tag.color, color: tag.color }}\n                      >\n                        {tag.name}\n                      </Badge>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-center text-muted-foreground py-8\">\n                    No tags yet. Create tags to categorize your repositories!\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Preferences Tab */}\n          <TabsContent value=\"preferences\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Profile Preferences</CardTitle>\n                <CardDescription>\n                  Customize your experience and AI recommendations\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label>Preferred Languages</Label>\n                  <Input\n                    placeholder=\"e.g., JavaScript, Python, Go\"\n                    defaultValue={preferences?.preferredLanguages?.join(\", \")}\n                    onBlur={(e) => {\n                      const languages = e.target.value.split(\",\").map(l => l.trim()).filter(l => l);\n                      updatePreferencesMutation.mutate({ preferredLanguages: languages });\n                    }}\n                  />\n                </div>\n                \n                <div>\n                  <Label>Preferred Topics</Label>\n                  <Input\n                    placeholder=\"e.g., machine-learning, web-development, devops\"\n                    defaultValue={preferences?.preferredTopics?.join(\", \")}\n                    onBlur={(e) => {\n                      const topics = e.target.value.split(\",\").map(t => t.trim()).filter(t => t);\n                      updatePreferencesMutation.mutate({ preferredTopics: topics });\n                    }}\n                  />\n                </div>\n                \n                <div>\n                  <Label>Excluded Topics</Label>\n                  <Input\n                    placeholder=\"Topics to exclude from recommendations\"\n                    defaultValue={preferences?.excludedTopics?.join(\", \")}\n                    onBlur={(e) => {\n                      const topics = e.target.value.split(\",\").map(t => t.trim()).filter(t => t);\n                      updatePreferencesMutation.mutate({ excludedTopics: topics });\n                    }}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>AI Recommendations</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Enable personalized AI repository recommendations\n                    </p>\n                  </div>\n                  <Switch\n                    checked={preferences?.aiRecommendations ?? true}\n                    onCheckedChange={(checked) => {\n                      updatePreferencesMutation.mutate({ aiRecommendations: checked });\n                    }}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Email Notifications</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Receive weekly repository recommendations via email\n                    </p>\n                  </div>\n                  <Switch\n                    checked={preferences?.emailNotifications ?? false}\n                    onCheckedChange={(checked) => {\n                      updatePreferencesMutation.mutate({ emailNotifications: checked });\n                    }}\n                  />\n                </div>\n                \n                <Separator className=\"my-4\" />\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Product Tour</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Take a guided tour to learn about all features\n                    </p>\n                  </div>\n                  <Button\n                    onClick={restartTour}\n                    variant=\"outline\"\n                    className=\"gap-2\"\n                  >\n                    <Sparkles className=\"w-4 h-4\" />\n                    Restart Tour\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":28785},"client/src/pages/repository-detail.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Header from \"@/components/header\";\nimport AnalysisResults from \"@/components/analysis-results\";\nimport { Comments } from \"@/components/comments\";\nimport { Ratings } from \"@/components/ratings\";\nimport { CollectionsManager } from \"@/components/collections-manager\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function RepositoryDetail() {\n  const { id } = useParams<{ id: string }>();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n\n  const { data, isLoading, error } = useQuery<any>({\n    queryKey: ['/api/repositories', id],\n    enabled: !!id,\n  });\n\n  const saveRepositoryMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest('POST', '/api/saved-repositories', {\n        repositoryId: id,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Repository Saved\",\n        description: \"Repository has been added to your saved list.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/repositories', id] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to save repository. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const unsaveRepositoryMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest('DELETE', `/api/saved-repositories/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Repository Unsaved\",\n        description: \"Repository has been removed from your saved list.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/repositories', id] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to unsave repository. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-dark\">\n        <Header />\n        <div className=\"max-w-6xl mx-auto px-6 py-16\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-700 rounded w-96 mb-4\"></div>\n            <div className=\"h-4 bg-gray-700 rounded w-64 mb-8\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <div className=\"space-y-4\">\n                <div className=\"h-32 bg-gray-700 rounded\"></div>\n                <div className=\"h-24 bg-gray-700 rounded\"></div>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"h-32 bg-gray-700 rounded\"></div>\n                <div className=\"h-24 bg-gray-700 rounded\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !data) {\n    return (\n      <div className=\"min-h-screen bg-dark\">\n        <Header />\n        <div className=\"max-w-6xl mx-auto px-6 py-16 text-center\">\n          <div className=\"w-16 h-16 rounded-full bg-gradient-to-r from-secondary to-accent flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-exclamation-triangle text-white text-2xl\"></i>\n          </div>\n          <h1 className=\"text-3xl font-bold mb-4\">Repository Not Found</h1>\n          <p className=\"text-gray-400 mb-6\">\n            The repository you're looking for could not be found or may have been removed.\n          </p>\n          <Button\n            onClick={() => window.history.back()}\n            className=\"bg-primary hover:bg-secondary\"\n            data-testid=\"button-go-back\"\n          >\n            Go Back\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const { repository, analysis, similar, isSaved } = data;\n\n  return (\n    <div className=\"min-h-screen bg-dark text-white\">\n      <Header />\n      \n      <div className=\"max-w-6xl mx-auto px-6 py-8\">\n        {/* Repository Header */}\n        <Card className=\"bg-card border border-border mb-8\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-start justify-between mb-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 rounded-xl bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center\">\n                  <i className=\"fab fa-github text-white text-2xl\"></i>\n                </div>\n                <div>\n                  <h1 className=\"text-3xl font-bold gradient-text\" data-testid=\"text-repository-name\">\n                    {repository.fullName}\n                  </h1>\n                  <p className=\"text-gray-400 mt-1\" data-testid=\"text-repository-description\">\n                    {repository.description || 'No description available'}\n                  </p>\n                  <div className=\"flex items-center space-x-4 mt-2 text-sm\">\n                    <div className=\"flex items-center space-x-1\">\n                      <i className=\"fas fa-star text-yellow-500\"></i>\n                      <span data-testid=\"text-stars\">{repository.stars?.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <i className=\"fas fa-code-branch text-gray-400\"></i>\n                      <span data-testid=\"text-forks\">{repository.forks?.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <i className=\"fas fa-eye text-gray-400\"></i>\n                      <span data-testid=\"text-watchers\">{repository.watchers?.toLocaleString()}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  onClick={() => isSaved ? unsaveRepositoryMutation.mutate() : saveRepositoryMutation.mutate()}\n                  disabled={saveRepositoryMutation.isPending || unsaveRepositoryMutation.isPending}\n                  variant=\"outline\"\n                  className={`border-2 ${isSaved ? 'border-primary bg-primary/10 text-primary' : 'border-border'} hover:border-primary transition-colors`}\n                  data-testid=\"button-save-repository\"\n                  data-tour=\"track-button\"\n                >\n                  <i className={`fas fa-bookmark ${isSaved ? 'text-primary' : 'text-gray-400'} mr-2`}></i>\n                  {isSaved ? 'Saved' : 'Save'}\n                </Button>\n                {user && (\n                  <CollectionsManager \n                    repositoryId={id} \n                    userId={user.id}\n                    showCreateButton={false}\n                  />\n                )}\n                <Button\n                  onClick={() => window.location.href = `/compare?repo=${id}`}\n                  variant=\"outline\"\n                  className=\"border-2 border-border hover:border-primary transition-colors\"\n                  data-testid=\"button-compare\"\n                >\n                  <i className=\"fas fa-balance-scale text-gray-400 mr-2\"></i>\n                  Compare\n                </Button>\n                <Button\n                  onClick={() => window.location.href = `/discover?repoId=${id}&repoUrl=${encodeURIComponent(repository.htmlUrl)}`}\n                  variant=\"outline\"\n                  className=\"border-2 border-border hover:border-primary transition-colors\"\n                  data-testid=\"button-find-similar\"\n                >\n                  <i className=\"fas fa-search text-gray-400 mr-2\"></i>\n                  Find Similar\n                </Button>\n                <Button\n                  onClick={() => window.open(repository.htmlUrl, '_blank')}\n                  className=\"bg-gradient-to-r from-primary to-secondary hover:from-secondary hover:to-primary\"\n                  data-testid=\"button-view-github\"\n                >\n                  <i className=\"fab fa-github mr-2\"></i>\n                  View on GitHub\n                </Button>\n              </div>\n            </div>\n\n            {/* Technology Stack */}\n            {repository.languages && Object.keys(repository.languages).length > 0 && (\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-semibold mb-3\">Technology Stack</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {Object.entries(repository.languages)\n                    .sort(([,a], [,b]) => (b as number) - (a as number))\n                    .slice(0, 8)\n                    .map(([language, percentage]) => (\n                      <Badge\n                        key={language}\n                        variant=\"secondary\"\n                        className=\"bg-blue-500/20 text-blue-400 border border-blue-500/30\"\n                        data-testid={`badge-language-${language}`}\n                      >\n                        {language} ({((percentage as number) / 1000).toFixed(1)}%)\n                      </Badge>\n                    ))}\n                </div>\n              </div>\n            )}\n\n            {/* Topics */}\n            {repository.topics && repository.topics.length > 0 && (\n              <div>\n                <h3 className=\"text-lg font-semibold mb-3\">Topics</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {repository.topics.slice(0, 10).map((topic: string) => (\n                    <Badge\n                      key={topic}\n                      variant=\"outline\"\n                      className=\"border-gray-500 text-gray-400\"\n                      data-testid={`badge-topic-${topic}`}\n                    >\n                      {topic}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Analysis Results */}\n        {analysis ? (\n          <AnalysisResults \n            analysis={analysis} \n            repository={{\n              name: repository.name,\n              full_name: repository.fullName,\n              description: repository.description,\n              language: repository.language,\n              stargazers_count: repository.stargazersCount,\n              forks_count: repository.forksCount,\n            }}\n          />\n        ) : (\n          <Card className=\"bg-card border border-border mb-8\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 rounded-full bg-gradient-to-r from-primary to-secondary flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-brain text-white text-2xl\"></i>\n              </div>\n              <h3 className=\"text-2xl font-bold mb-2\">No Analysis Available</h3>\n              <p className=\"text-gray-400 mb-6\">\n                This repository hasn't been analyzed yet. Start an analysis to get insights.\n              </p>\n              <Button\n                onClick={() => {\n                  // Trigger analysis\n                  window.location.href = `/?analyze=${encodeURIComponent(repository.htmlUrl)}`;\n                }}\n                className=\"bg-gradient-to-r from-primary to-secondary hover:from-secondary hover:to-primary\"\n                data-testid=\"button-analyze\"\n              >\n                <i className=\"fas fa-brain mr-2\"></i>\n                Analyze Repository\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Social Features - Comments and Ratings */}\n        <Card className=\"bg-card border border-border mb-8\">\n          <CardContent className=\"p-6\">\n            <Tabs defaultValue=\"comments\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2 bg-dark/50\">\n                <TabsTrigger value=\"comments\" className=\"data-[state=active]:bg-primary/20\">\n                  <i className=\"fas fa-comments mr-2\"></i>\n                  Comments\n                </TabsTrigger>\n                <TabsTrigger value=\"ratings\" className=\"data-[state=active]:bg-primary/20\">\n                  <i className=\"fas fa-star mr-2\"></i>\n                  Ratings\n                </TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"comments\" className=\"mt-6\">\n                <Comments repositoryId={id!} />\n              </TabsContent>\n              <TabsContent value=\"ratings\" className=\"mt-6\">\n                <Ratings repositoryId={id!} />\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n\n        {/* Similar Repositories */}\n        {similar && similar.length > 0 && (\n          <Card className=\"bg-card border border-border\">\n            <CardContent className=\"p-8\">\n              <h3 className=\"text-2xl font-semibold mb-6\">Similar Repositories</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {similar.map((item: any) => {\n                  const similarRepo = item.similarRepository;\n                  return (\n                    <div\n                      key={similarRepo.id}\n                      className=\"bg-dark rounded-lg p-4 border border-border hover:border-primary/30 transition-colors cursor-pointer\"\n                      onClick={() => window.location.href = `/repository/${similarRepo.id}`}\n                      data-testid={`card-similar-${similarRepo.id}`}\n                    >\n                      <div className=\"flex items-center space-x-3 mb-3\">\n                        <div className=\"w-8 h-8 rounded-lg bg-gradient-to-r from-green-500 to-teal-600 flex items-center justify-center\">\n                          <i className=\"fab fa-github text-white text-sm\"></i>\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium\" data-testid={`text-similar-name-${similarRepo.id}`}>\n                            {similarRepo.name}\n                          </h4>\n                          <p className=\"text-sm text-gray-400\">\n                            Similarity: {Math.round(item.similarity * 100)}%\n                          </p>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-gray-300 line-clamp-2\">\n                        {similarRepo.description || 'No description available'}\n                      </p>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":15496},"client/src/pages/search.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport RepositoryCard from \"@/components/repository-card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { ChevronDown, ChevronUp, Filter, Search as SearchIcon, Star, Calendar, Code, TrendingUp } from \"lucide-react\";\n\ninterface SearchFilters {\n  language: string;\n  minStars: number;\n  maxStars: number;\n  dateRange: string;\n  sortBy: string;\n  includeArchived: boolean;\n  includeForked: boolean;\n  hasIssues: boolean;\n  license: string;\n  topics: string[];\n}\n\nexport default function Search() {\n  const [query, setQuery] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filtersOpen, setFiltersOpen] = useState(false);\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [filters, setFilters] = useState<SearchFilters>({\n    language: 'all',\n    minStars: 0,\n    maxStars: 100000,\n    dateRange: 'all',\n    sortBy: 'best-match',\n    includeArchived: false,\n    includeForked: false,\n    hasIssues: false,\n    license: 'all',\n    topics: []\n  });\n  const [topicInput, setTopicInput] = useState(\"\");\n\n  const buildSearchQuery = () => {\n    let searchQuery = searchTerm;\n    \n    // Add language filter\n    if (filters.language !== 'all') {\n      searchQuery += ` language:${filters.language}`;\n    }\n    \n    // Add star range\n    if (filters.minStars > 0) {\n      searchQuery += ` stars:>=${filters.minStars}`;\n    }\n    if (filters.maxStars < 100000) {\n      searchQuery += ` stars:<=${filters.maxStars}`;\n    }\n    \n    // Add date filter\n    if (filters.dateRange !== 'all') {\n      const date = new Date();\n      switch (filters.dateRange) {\n        case 'today':\n          date.setDate(date.getDate() - 1);\n          break;\n        case 'week':\n          date.setDate(date.getDate() - 7);\n          break;\n        case 'month':\n          date.setMonth(date.getMonth() - 1);\n          break;\n        case 'year':\n          date.setFullYear(date.getFullYear() - 1);\n          break;\n      }\n      searchQuery += ` created:>=${date.toISOString().split('T')[0]}`;\n    }\n    \n    // Add archived filter\n    if (!filters.includeArchived) {\n      searchQuery += ' archived:false';\n    }\n    \n    // Add fork filter\n    if (!filters.includeForked) {\n      searchQuery += ' fork:false';\n    }\n    \n    // Add issues filter\n    if (filters.hasIssues) {\n      searchQuery += ' has:issues';\n    }\n    \n    // Add license filter\n    if (filters.license !== 'all') {\n      searchQuery += ` license:${filters.license}`;\n    }\n    \n    // Add topics\n    filters.topics.forEach(topic => {\n      searchQuery += ` topic:${topic}`;\n    });\n    \n    return searchQuery;\n  };\n\n  const { data: searchResults, isLoading, refetch } = useQuery<any[]>({\n    queryKey: ['/api/repositories/search', searchTerm, filters],\n    queryFn: async () => {\n      if (!searchTerm) return [];\n      const fullQuery = buildSearchQuery();\n      const response = await fetch(`/api/repositories/search?q=${encodeURIComponent(fullQuery)}&sort=${filters.sortBy}`);\n      if (!response.ok) throw new Error('Search failed');\n      return response.json();\n    },\n    enabled: !!searchTerm,\n  });\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    setSearchTerm(query);\n  };\n\n  const handleAddTopic = () => {\n    if (topicInput && !filters.topics.includes(topicInput)) {\n      setFilters(prev => ({\n        ...prev,\n        topics: [...prev.topics, topicInput]\n      }));\n      setTopicInput(\"\");\n    }\n  };\n\n  const handleRemoveTopic = (topic: string) => {\n    setFilters(prev => ({\n      ...prev,\n      topics: prev.topics.filter(t => t !== topic)\n    }));\n  };\n\n  const resetFilters = () => {\n    setFilters({\n      language: 'all',\n      minStars: 0,\n      maxStars: 100000,\n      dateRange: 'all',\n      sortBy: 'best-match',\n      includeArchived: false,\n      includeForked: false,\n      hasIssues: false,\n      license: 'all',\n      topics: []\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-dark text-white\">\n      <Header />\n      \n      {/* Search Section */}\n      <section className=\"py-12 bg-gradient-to-r from-dark via-card to-dark\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl font-bold mb-4\">\n              Advanced <span className=\"gradient-text\">Repository Search</span>\n            </h1>\n            <p className=\"text-xl text-gray-300\">Discover repositories with powerful filters and sorting</p>\n          </div>\n          \n          <Card className=\"bg-card/50 border border-border backdrop-blur-sm\">\n            <CardContent className=\"p-6\">\n              <form onSubmit={handleSearch} className=\"space-y-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex-1 relative\">\n                    <SearchIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Search repositories by name, description, or topic...\"\n                      value={query}\n                      onChange={(e) => setQuery(e.target.value)}\n                      className=\"w-full bg-dark border border-border text-white placeholder-gray-400 pl-10\"\n                      data-testid=\"input-search\"\n                    />\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    className=\"bg-gradient-to-r from-primary to-secondary hover:from-secondary hover:to-primary px-8 py-2 rounded-lg font-semibold transition-all duration-300\"\n                    disabled={!query}\n                    data-testid=\"button-search\"\n                  >\n                    <SearchIcon className=\"mr-2 w-4 h-4\" />\n                    Search\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    onClick={() => setFiltersOpen(!filtersOpen)}\n                    variant=\"outline\"\n                    className=\"border-border text-gray-300 hover:bg-gray-800\"\n                  >\n                    <Filter className=\"mr-2 w-4 h-4\" />\n                    Filters\n                    {filtersOpen ? <ChevronUp className=\"ml-2 w-4 h-4\" /> : <ChevronDown className=\"ml-2 w-4 h-4\" />}\n                  </Button>\n                </div>\n\n                <Collapsible open={filtersOpen}>\n                  <CollapsibleContent className=\"space-y-6 pt-4\">\n                    {/* First Row of Filters */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      {/* Language Filter */}\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-sm text-gray-300\">\n                          <Code className=\"inline w-4 h-4 mr-1\" />\n                          Language\n                        </Label>\n                        <Select value={filters.language} onValueChange={(value) => setFilters(prev => ({ ...prev, language: value }))}>\n                          <SelectTrigger className=\"bg-dark border-border\">\n                            <SelectValue placeholder=\"Select language\" />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-dark border-border\">\n                            <SelectItem value=\"all\">All Languages</SelectItem>\n                            <SelectItem value=\"javascript\">JavaScript</SelectItem>\n                            <SelectItem value=\"typescript\">TypeScript</SelectItem>\n                            <SelectItem value=\"python\">Python</SelectItem>\n                            <SelectItem value=\"java\">Java</SelectItem>\n                            <SelectItem value=\"go\">Go</SelectItem>\n                            <SelectItem value=\"rust\">Rust</SelectItem>\n                            <SelectItem value=\"cpp\">C++</SelectItem>\n                            <SelectItem value=\"csharp\">C#</SelectItem>\n                            <SelectItem value=\"ruby\">Ruby</SelectItem>\n                            <SelectItem value=\"php\">PHP</SelectItem>\n                            <SelectItem value=\"swift\">Swift</SelectItem>\n                            <SelectItem value=\"kotlin\">Kotlin</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      {/* Date Range Filter */}\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-sm text-gray-300\">\n                          <Calendar className=\"inline w-4 h-4 mr-1\" />\n                          Created\n                        </Label>\n                        <Select value={filters.dateRange} onValueChange={(value) => setFilters(prev => ({ ...prev, dateRange: value }))}>\n                          <SelectTrigger className=\"bg-dark border-border\">\n                            <SelectValue placeholder=\"Select time range\" />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-dark border-border\">\n                            <SelectItem value=\"all\">All Time</SelectItem>\n                            <SelectItem value=\"today\">Today</SelectItem>\n                            <SelectItem value=\"week\">This Week</SelectItem>\n                            <SelectItem value=\"month\">This Month</SelectItem>\n                            <SelectItem value=\"year\">This Year</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      {/* Sort By */}\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-sm text-gray-300\">\n                          <TrendingUp className=\"inline w-4 h-4 mr-1\" />\n                          Sort By\n                        </Label>\n                        <Select value={filters.sortBy} onValueChange={(value) => setFilters(prev => ({ ...prev, sortBy: value }))}>\n                          <SelectTrigger className=\"bg-dark border-border\">\n                            <SelectValue placeholder=\"Sort by\" />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-dark border-border\">\n                            <SelectItem value=\"best-match\">Best Match</SelectItem>\n                            <SelectItem value=\"stars\">Most Stars</SelectItem>\n                            <SelectItem value=\"forks\">Most Forks</SelectItem>\n                            <SelectItem value=\"updated\">Recently Updated</SelectItem>\n                            <SelectItem value=\"created\">Newest First</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    {/* Star Range */}\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-sm text-gray-300\">\n                        <Star className=\"inline w-4 h-4 mr-1\" />\n                        Star Range: {filters.minStars.toLocaleString()} - {filters.maxStars < 100000 ? filters.maxStars.toLocaleString() : '100k+'}\n                      </Label>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center space-x-4\">\n                          <span className=\"text-xs text-gray-400 w-20\">Min Stars</span>\n                          <Slider\n                            value={[filters.minStars]}\n                            onValueChange={(value) => setFilters(prev => ({ ...prev, minStars: value[0] }))}\n                            max={10000}\n                            step={100}\n                            className=\"flex-1\"\n                          />\n                          <Input\n                            type=\"number\"\n                            value={filters.minStars}\n                            onChange={(e) => setFilters(prev => ({ ...prev, minStars: parseInt(e.target.value) || 0 }))}\n                            className=\"w-24 bg-dark border-border\"\n                          />\n                        </div>\n                        <div className=\"flex items-center space-x-4\">\n                          <span className=\"text-xs text-gray-400 w-20\">Max Stars</span>\n                          <Slider\n                            value={[filters.maxStars > 100000 ? 100000 : filters.maxStars]}\n                            onValueChange={(value) => setFilters(prev => ({ ...prev, maxStars: value[0] }))}\n                            max={100000}\n                            step={1000}\n                            className=\"flex-1\"\n                          />\n                          <Input\n                            type=\"number\"\n                            value={filters.maxStars}\n                            onChange={(e) => setFilters(prev => ({ ...prev, maxStars: parseInt(e.target.value) || 100000 }))}\n                            className=\"w-24 bg-dark border-border\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* License Filter */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-sm text-gray-300\">License</Label>\n                        <Select value={filters.license} onValueChange={(value) => setFilters(prev => ({ ...prev, license: value }))}>\n                          <SelectTrigger className=\"bg-dark border-border\">\n                            <SelectValue placeholder=\"Select license\" />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-dark border-border\">\n                            <SelectItem value=\"all\">All Licenses</SelectItem>\n                            <SelectItem value=\"mit\">MIT</SelectItem>\n                            <SelectItem value=\"apache-2.0\">Apache 2.0</SelectItem>\n                            <SelectItem value=\"gpl-3.0\">GPL 3.0</SelectItem>\n                            <SelectItem value=\"bsd-3-clause\">BSD 3-Clause</SelectItem>\n                            <SelectItem value=\"unlicense\">Unlicense</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      {/* Topics */}\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-sm text-gray-300\">Topics</Label>\n                        <div className=\"flex space-x-2\">\n                          <Input\n                            type=\"text\"\n                            placeholder=\"Add topic...\"\n                            value={topicInput}\n                            onChange={(e) => setTopicInput(e.target.value)}\n                            onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddTopic())}\n                            className=\"flex-1 bg-dark border-border\"\n                          />\n                          <Button\n                            type=\"button\"\n                            onClick={handleAddTopic}\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"border-border\"\n                          >\n                            Add\n                          </Button>\n                        </div>\n                        {filters.topics.length > 0 && (\n                          <div className=\"flex flex-wrap gap-2 mt-2\">\n                            {filters.topics.map(topic => (\n                              <Badge\n                                key={topic}\n                                variant=\"secondary\"\n                                className=\"cursor-pointer hover:bg-red-900\"\n                                onClick={() => handleRemoveTopic(topic)}\n                              >\n                                {topic} ×\n                              </Badge>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Toggle Filters */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch\n                          id=\"archived\"\n                          checked={filters.includeArchived}\n                          onCheckedChange={(checked) => setFilters(prev => ({ ...prev, includeArchived: checked }))}\n                        />\n                        <Label htmlFor=\"archived\" className=\"text-sm text-gray-300 cursor-pointer\">\n                          Include Archived\n                        </Label>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch\n                          id=\"forked\"\n                          checked={filters.includeForked}\n                          onCheckedChange={(checked) => setFilters(prev => ({ ...prev, includeForked: checked }))}\n                        />\n                        <Label htmlFor=\"forked\" className=\"text-sm text-gray-300 cursor-pointer\">\n                          Include Forked\n                        </Label>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch\n                          id=\"issues\"\n                          checked={filters.hasIssues}\n                          onCheckedChange={(checked) => setFilters(prev => ({ ...prev, hasIssues: checked }))}\n                        />\n                        <Label htmlFor=\"issues\" className=\"text-sm text-gray-300 cursor-pointer\">\n                          Has Open Issues\n                        </Label>\n                      </div>\n                    </div>\n\n                    {/* Reset Button */}\n                    <div className=\"flex justify-end\">\n                      <Button\n                        type=\"button\"\n                        onClick={resetFilters}\n                        variant=\"ghost\"\n                        className=\"text-gray-400 hover:text-white\"\n                      >\n                        Reset All Filters\n                      </Button>\n                    </div>\n                  </CollapsibleContent>\n                </Collapsible>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Results Section */}\n      <section className=\"py-16 bg-dark\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          {searchTerm && (\n            <div className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold mb-2\">\n                Search results for \"<span className=\"text-primary\">{searchTerm}</span>\"\n              </h2>\n              {searchResults && (\n                <p className=\"text-gray-400\">\n                  Found {searchResults.length} repositories\n                </p>\n              )}\n            </div>\n          )}\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(9)].map((_, i) => (\n                <div key={i} className=\"bg-card border border-border rounded-xl p-6 animate-pulse\">\n                  <div className=\"flex items-center space-x-3 mb-4\">\n                    <div className=\"w-10 h-10 bg-gray-700 rounded-lg\"></div>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-4 bg-gray-700 rounded w-32\"></div>\n                      <div className=\"h-3 bg-gray-700 rounded w-24\"></div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"h-3 bg-gray-700 rounded\"></div>\n                    <div className=\"h-3 bg-gray-700 rounded w-3/4\"></div>\n                  </div>\n                  <div className=\"h-8 bg-gray-700 rounded\"></div>\n                </div>\n              ))}\n            </div>\n          ) : searchResults && searchResults.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {searchResults.map((repository: any) => (\n                <div\n                  key={repository.id}\n                  className=\"bg-card border border-border rounded-xl p-6 hover:border-primary/30 transition-all duration-300 cursor-pointer\"\n                  onClick={() => window.location.href = `/repository/${repository.id}`}\n                  data-testid={`card-repository-${repository.id}`}\n                >\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 rounded-lg bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center\">\n                        <i className=\"fab fa-github text-white\"></i>\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-lg\" data-testid={`text-repo-name-${repository.id}`}>\n                          {repository.name}\n                        </h4>\n                        <p className=\"text-sm text-gray-400\" data-testid={`text-repo-owner-${repository.id}`}>\n                          {repository.fullName}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-star text-yellow-500\"></i>\n                      <span className=\"text-sm\" data-testid={`text-stars-${repository.id}`}>\n                        {repository.stars?.toLocaleString()}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <p className=\"text-gray-300 text-sm mb-6 line-clamp-3\" data-testid={`text-description-${repository.id}`}>\n                    {repository.description || 'No description available'}\n                  </p>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      {repository.language && (\n                        <span className=\"px-2 py-1 bg-blue-500/20 text-blue-400 text-xs rounded-full\">\n                          {repository.language}\n                        </span>\n                      )}\n                      {repository.topics && repository.topics.slice(0, 2).map((topic: string) => (\n                        <span key={topic} className=\"px-2 py-1 bg-gray-500/20 text-gray-400 text-xs rounded-full\">\n                          {topic}\n                        </span>\n                      ))}\n                    </div>\n                    <button className=\"text-primary hover:text-secondary transition-colors text-sm font-medium\">\n                      View Details\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : searchTerm ? (\n            <div className=\"text-center py-16\">\n              <div className=\"w-16 h-16 rounded-full bg-gradient-to-r from-secondary to-accent flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-search text-white text-2xl\"></i>\n              </div>\n              <h3 className=\"text-2xl font-bold mb-2\">No Results Found</h3>\n              <p className=\"text-gray-400 mb-6\">\n                No repositories found for \"<span className=\"text-primary\">{searchTerm}</span>\". \n                Try adjusting your search terms.\n              </p>\n              <Button\n                onClick={() => setSearchTerm(\"\")}\n                variant=\"outline\"\n                className=\"border border-primary/30 text-primary hover:bg-primary/10\"\n                data-testid=\"button-clear-search\"\n              >\n                Clear Search\n              </Button>\n            </div>\n          ) : (\n            <div className=\"text-center py-16\">\n              <div className=\"w-16 h-16 rounded-full bg-gradient-to-r from-primary to-secondary flex items-center justify-center mx-auto mb-4 animate-float\">\n                <i className=\"fas fa-search text-white text-2xl\"></i>\n              </div>\n              <h3 className=\"text-2xl font-bold mb-2\">Search Repositories</h3>\n              <p className=\"text-gray-400\">\n                Enter a search term above to discover GitHub repositories\n              </p>\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":25276},"client/src/pages/teams.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { SkeletonLoader } from \"@/components/skeleton-loader\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Users, UserPlus, Settings, Share2, Shield, Activity, ChevronRight, Mail, Clock, Crown } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface Team {\n  id: string;\n  name: string;\n  description: string;\n  ownerId: string;\n  memberCount: number;\n  createdAt: string;\n  role: 'owner' | 'admin' | 'member' | 'viewer';\n}\n\ninterface TeamMember {\n  id: string;\n  userId: string;\n  teamId: string;\n  role: 'owner' | 'admin' | 'member' | 'viewer';\n  user: {\n    id: string;\n    email: string;\n    firstName?: string;\n    lastName?: string;\n    profileImageUrl?: string;\n  };\n  joinedAt: string;\n}\n\nexport default function Teams() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [inviteDialogOpen, setInviteDialogOpen] = useState(false);\n  const [selectedTeam, setSelectedTeam] = useState<Team | null>(null);\n  const [newTeamName, setNewTeamName] = useState(\"\");\n  const [newTeamDescription, setNewTeamDescription] = useState(\"\");\n  const [inviteEmail, setInviteEmail] = useState(\"\");\n  const [inviteRole, setInviteRole] = useState<'admin' | 'member' | 'viewer'>('member');\n\n  const { data: teams, isLoading: teamsLoading } = useQuery<Team[]>({\n    queryKey: ['/api/teams'],\n    enabled: isAuthenticated,\n  });\n\n  const { data: teamMembers, isLoading: membersLoading } = useQuery<TeamMember[]>({\n    queryKey: ['/api/teams', selectedTeam?.id, 'members'],\n    enabled: !!selectedTeam,\n  });\n\n  const createTeamMutation = useMutation({\n    mutationFn: async (data: { name: string; description: string }) => {\n      return await apiRequest('POST', '/api/teams', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teams'] });\n      setCreateDialogOpen(false);\n      setNewTeamName(\"\");\n      setNewTeamDescription(\"\");\n      toast({\n        title: \"Team Created\",\n        description: \"Your new team has been created successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create team. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const inviteMemberMutation = useMutation({\n    mutationFn: async (data: { teamId: string; email: string; role: string }) => {\n      return await apiRequest('POST', `/api/teams/${data.teamId}/invite`, {\n        email: data.email,\n        role: data.role,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teams', selectedTeam?.id, 'members'] });\n      setInviteDialogOpen(false);\n      setInviteEmail(\"\");\n      toast({\n        title: \"Invitation Sent\",\n        description: \"Team invitation has been sent successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send invitation. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateRoleMutation = useMutation({\n    mutationFn: async (data: { teamId: string; memberId: string; role: string }) => {\n      return await apiRequest('PATCH', `/api/teams/${data.teamId}/members/${data.memberId}`, {\n        role: data.role,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teams', selectedTeam?.id, 'members'] });\n      toast({\n        title: \"Role Updated\",\n        description: \"Member role has been updated successfully.\",\n      });\n    },\n  });\n\n  const removeMemberMutation = useMutation({\n    mutationFn: async (data: { teamId: string; memberId: string }) => {\n      return await apiRequest('DELETE', `/api/teams/${data.teamId}/members/${data.memberId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teams', selectedTeam?.id, 'members'] });\n      toast({\n        title: \"Member Removed\",\n        description: \"Team member has been removed successfully.\",\n      });\n    },\n  });\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background py-12\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <Card className=\"p-8 text-center\">\n            <Users className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n            <h2 className=\"text-2xl font-bold mb-4\">Team Collaboration</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Sign in to create teams and collaborate on repository analysis\n            </p>\n            <Button asChild>\n              <a href=\"/api/login\">Sign In</a>\n            </Button>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (teamsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background py-12\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <SkeletonLoader />\n        </div>\n      </div>\n    );\n  }\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'owner': return 'bg-purple-500';\n      case 'admin': return 'bg-blue-500';\n      case 'member': return 'bg-green-500';\n      case 'viewer': return 'bg-gray-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background py-12\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-4xl font-bold gradient-text mb-4\">\n              Team Collaboration\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Create teams and collaborate on repository analysis\n            </p>\n          </div>\n          <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"btn-scale\">\n                <UserPlus className=\"w-4 h-4 mr-2\" />\n                Create Team\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Create New Team</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div>\n                  <Label htmlFor=\"team-name\">Team Name</Label>\n                  <Input\n                    id=\"team-name\"\n                    value={newTeamName}\n                    onChange={(e) => setNewTeamName(e.target.value)}\n                    placeholder=\"Enter team name\"\n                    className=\"input-focus\"\n                    data-testid=\"input-team-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"team-description\">Description</Label>\n                  <Input\n                    id=\"team-description\"\n                    value={newTeamDescription}\n                    onChange={(e) => setNewTeamDescription(e.target.value)}\n                    placeholder=\"Enter team description\"\n                    className=\"input-focus\"\n                    data-testid=\"input-team-description\"\n                  />\n                </div>\n              </div>\n              <DialogFooter>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setCreateDialogOpen(false)}\n                  data-testid=\"button-cancel-create\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={() => createTeamMutation.mutate({ name: newTeamName, description: newTeamDescription })}\n                  disabled={!newTeamName || createTeamMutation.isPending}\n                  className=\"btn-scale\"\n                  data-testid=\"button-create-team\"\n                >\n                  {createTeamMutation.isPending ? \"Creating...\" : \"Create Team\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Teams List */}\n          <div className=\"lg:col-span-1 space-y-4\">\n            <h2 className=\"text-xl font-semibold mb-4\">Your Teams</h2>\n            {teams && teams.length > 0 ? (\n              teams.map((team) => (\n                <Card\n                  key={team.id}\n                  className={`p-4 cursor-pointer hover:shadow-lg transition-all duration-300 card-lift ${\n                    selectedTeam?.id === team.id ? 'ring-2 ring-primary' : ''\n                  }`}\n                  onClick={() => setSelectedTeam(team)}\n                  data-testid={`team-card-${team.id}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 rounded-lg bg-gradient-to-r from-primary to-secondary flex items-center justify-center\">\n                        <Users className=\"w-5 h-5 text-white\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold\">{team.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {team.memberCount} member{team.memberCount !== 1 ? 's' : ''}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge className={getRoleBadgeColor(team.role)}>\n                        {team.role}\n                      </Badge>\n                      <ChevronRight className=\"w-4 h-4 text-muted-foreground\" />\n                    </div>\n                  </div>\n                </Card>\n              ))\n            ) : (\n              <Card className=\"p-8 text-center\">\n                <Users className=\"w-8 h-8 mx-auto mb-4 text-muted-foreground\" />\n                <p className=\"text-muted-foreground\">No teams yet</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Create your first team to start collaborating\n                </p>\n              </Card>\n            )}\n          </div>\n\n          {/* Team Details */}\n          <div className=\"lg:col-span-2\">\n            {selectedTeam ? (\n              <Card className=\"p-6\">\n                <div className=\"flex justify-between items-start mb-6\">\n                  <div>\n                    <h2 className=\"text-2xl font-bold mb-2\">{selectedTeam.name}</h2>\n                    <p className=\"text-muted-foreground\">{selectedTeam.description}</p>\n                    <div className=\"flex items-center mt-2 text-sm text-muted-foreground\">\n                      <Clock className=\"w-4 h-4 mr-1\" />\n                      Created {new Date(selectedTeam.createdAt).toLocaleDateString()}\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    {(selectedTeam.role === 'owner' || selectedTeam.role === 'admin') && (\n                      <Dialog open={inviteDialogOpen} onOpenChange={setInviteDialogOpen}>\n                        <DialogTrigger asChild>\n                          <Button variant=\"outline\" className=\"btn-scale\">\n                            <Mail className=\"w-4 h-4 mr-2\" />\n                            Invite\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Invite Team Member</DialogTitle>\n                          </DialogHeader>\n                          <div className=\"space-y-4 py-4\">\n                            <div>\n                              <Label htmlFor=\"invite-email\">Email Address</Label>\n                              <Input\n                                id=\"invite-email\"\n                                type=\"email\"\n                                value={inviteEmail}\n                                onChange={(e) => setInviteEmail(e.target.value)}\n                                placeholder=\"Enter email address\"\n                                className=\"input-focus\"\n                                data-testid=\"input-invite-email\"\n                              />\n                            </div>\n                            <div>\n                              <Label htmlFor=\"invite-role\">Role</Label>\n                              <Select value={inviteRole} onValueChange={(value: any) => setInviteRole(value)}>\n                                <SelectTrigger data-testid=\"select-invite-role\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"admin\">Admin</SelectItem>\n                                  <SelectItem value=\"member\">Member</SelectItem>\n                                  <SelectItem value=\"viewer\">Viewer</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                          </div>\n                          <DialogFooter>\n                            <Button\n                              variant=\"outline\"\n                              onClick={() => setInviteDialogOpen(false)}\n                              data-testid=\"button-cancel-invite\"\n                            >\n                              Cancel\n                            </Button>\n                            <Button\n                              onClick={() =>\n                                inviteMemberMutation.mutate({\n                                  teamId: selectedTeam.id,\n                                  email: inviteEmail,\n                                  role: inviteRole,\n                                })\n                              }\n                              disabled={!inviteEmail || inviteMemberMutation.isPending}\n                              className=\"btn-scale\"\n                              data-testid=\"button-send-invite\"\n                            >\n                              {inviteMemberMutation.isPending ? \"Sending...\" : \"Send Invite\"}\n                            </Button>\n                          </DialogFooter>\n                        </DialogContent>\n                      </Dialog>\n                    )}\n                    {selectedTeam.role === 'owner' && (\n                      <Button variant=\"outline\" className=\"btn-scale\">\n                        <Settings className=\"w-4 h-4 mr-2\" />\n                        Settings\n                      </Button>\n                    )}\n                  </div>\n                </div>\n\n                <Tabs defaultValue=\"members\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-3\">\n                    <TabsTrigger value=\"members\">Members</TabsTrigger>\n                    <TabsTrigger value=\"activity\">Activity</TabsTrigger>\n                    <TabsTrigger value=\"shared\">Shared Analyses</TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"members\" className=\"space-y-4\">\n                    {membersLoading ? (\n                      <SkeletonLoader />\n                    ) : teamMembers && teamMembers.length > 0 ? (\n                      teamMembers.map((member) => (\n                        <div\n                          key={member.id}\n                          className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg hover:bg-muted/70 transition-colors\"\n                          data-testid={`member-${member.id}`}\n                        >\n                          <div className=\"flex items-center space-x-3\">\n                            <Avatar>\n                              <AvatarImage src={member.user.profileImageUrl} />\n                              <AvatarFallback>\n                                {member.user.firstName?.[0] || member.user.email[0].toUpperCase()}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <div className=\"font-medium\">\n                                {member.user.firstName && member.user.lastName\n                                  ? `${member.user.firstName} ${member.user.lastName}`\n                                  : member.user.email}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                Joined {new Date(member.joinedAt).toLocaleDateString()}\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            {member.role === 'owner' ? (\n                              <Badge className={getRoleBadgeColor(member.role)}>\n                                <Crown className=\"w-3 h-3 mr-1\" />\n                                {member.role}\n                              </Badge>\n                            ) : (\n                              <>\n                                {(selectedTeam.role === 'owner' || selectedTeam.role === 'admin') &&\n                                  member.userId !== user?.id ? (\n                                  <Select\n                                    value={member.role}\n                                    onValueChange={(value) =>\n                                      updateRoleMutation.mutate({\n                                        teamId: selectedTeam.id,\n                                        memberId: member.id,\n                                        role: value,\n                                      })\n                                    }\n                                  >\n                                    <SelectTrigger className=\"w-32\" data-testid={`select-role-${member.id}`}>\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"admin\">Admin</SelectItem>\n                                      <SelectItem value=\"member\">Member</SelectItem>\n                                      <SelectItem value=\"viewer\">Viewer</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                ) : (\n                                  <Badge className={getRoleBadgeColor(member.role)}>\n                                    {member.role}\n                                  </Badge>\n                                )}\n                                {selectedTeam.role === 'owner' && member.userId !== user?.id && (\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() =>\n                                      removeMemberMutation.mutate({\n                                        teamId: selectedTeam.id,\n                                        memberId: member.id,\n                                      })\n                                    }\n                                    data-testid={`button-remove-${member.id}`}\n                                  >\n                                    Remove\n                                  </Button>\n                                )}\n                              </>\n                            )}\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <p className=\"text-center text-muted-foreground py-8\">\n                        No team members yet\n                      </p>\n                    )}\n                  </TabsContent>\n\n                  <TabsContent value=\"activity\" className=\"space-y-4\">\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Activity className=\"w-12 h-12 mx-auto mb-4\" />\n                      <p>Team activity will appear here</p>\n                      <p className=\"text-sm mt-2\">\n                        Track shared analyses, comments, and collaboration\n                      </p>\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"shared\" className=\"space-y-4\">\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Share2 className=\"w-12 h-12 mx-auto mb-4\" />\n                      <p>No shared analyses yet</p>\n                      <p className=\"text-sm mt-2\">\n                        Analyses shared with this team will appear here\n                      </p>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </Card>\n            ) : (\n              <Card className=\"p-12 text-center\">\n                <Shield className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-xl font-semibold mb-2\">Select a Team</h3>\n                <p className=\"text-muted-foreground\">\n                  Choose a team from the list to view details and manage members\n                </p>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":22108},"client/src/utils/export-utils.ts":{"content":"import jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\n\ninterface ExportAnalysis {\n  id: string;\n  repositoryId: string;\n  userId?: string;\n  originality: number;\n  completeness: number;\n  marketability: number;\n  monetization: number;\n  usefulness: number;\n  overallScore: number;\n  summary: string;\n  strengths?: string[] | null;\n  weaknesses?: string[] | null;\n  recommendations?: string[] | null;\n  createdAt: Date | string;\n  repository?: {\n    name: string;\n    full_name: string;\n    description?: string;\n    language?: string;\n    stargazers_count?: number;\n    forks_count?: number;\n  };\n  // For backward compatibility with existing API responses\n  originality_score?: number;\n  completeness_score?: number;\n  marketability_score?: number;\n  monetization_score?: number;\n  usefulness_score?: number;\n  overall_score?: number;\n  key_findings?: string[];\n}\n\n/**\n * Export analysis results as PDF\n */\nexport async function exportToPDF(analysis: ExportAnalysis, elementId?: string) {\n  const pdf = new jsPDF('p', 'mm', 'a4');\n  const pageWidth = pdf.internal.pageSize.getWidth();\n  const pageHeight = pdf.internal.pageSize.getHeight();\n  const margin = 15;\n  let yPosition = margin;\n\n  // Title\n  pdf.setFontSize(20);\n  pdf.setTextColor(99, 102, 241); // Primary color\n  pdf.text('Repository Analysis Report', pageWidth / 2, yPosition, { align: 'center' });\n  yPosition += 15;\n\n  // Repository Info\n  if (analysis.repository) {\n    pdf.setFontSize(16);\n    pdf.setTextColor(0, 0, 0);\n    pdf.text(analysis.repository.name || 'Unknown Repository', margin, yPosition);\n    yPosition += 8;\n\n    pdf.setFontSize(10);\n    pdf.setTextColor(100, 100, 100);\n    if (analysis.repository.full_name) {\n      pdf.text(`Full Name: ${analysis.repository.full_name}`, margin, yPosition);\n      yPosition += 5;\n    }\n    if (analysis.repository.description) {\n      const descLines = pdf.splitTextToSize(analysis.repository.description, pageWidth - margin * 2);\n      pdf.text(descLines, margin, yPosition);\n      yPosition += descLines.length * 5 + 5;\n    }\n    if (analysis.repository.language) {\n      pdf.text(`Language: ${analysis.repository.language}`, margin, yPosition);\n      yPosition += 5;\n    }\n    if (analysis.repository.stargazers_count !== undefined) {\n      pdf.text(`Stars: ${analysis.repository.stargazers_count.toLocaleString()}`, margin, yPosition);\n      yPosition += 5;\n    }\n    if (analysis.repository.forks_count !== undefined) {\n      pdf.text(`Forks: ${analysis.repository.forks_count.toLocaleString()}`, margin, yPosition);\n      yPosition += 10;\n    }\n  }\n\n  // Analysis Date\n  pdf.setFontSize(10);\n  pdf.setTextColor(100, 100, 100);\n  pdf.text(`Analysis Date: ${new Date(analysis.createdAt).toLocaleDateString()}`, margin, yPosition);\n  yPosition += 10;\n\n  // Overall Score\n  pdf.setFontSize(14);\n  pdf.setTextColor(0, 0, 0);\n  pdf.text('Overall Score', margin, yPosition);\n  yPosition += 7;\n\n  const overallScore = analysis.overall_score || 0;\n  const scoreColor = overallScore >= 80 ? [34, 197, 94] : overallScore >= 60 ? [251, 191, 36] : [239, 68, 68];\n  pdf.setFillColor(scoreColor[0], scoreColor[1], scoreColor[2]);\n  pdf.rect(margin, yPosition - 5, (overallScore / 100) * 50, 8, 'F');\n  pdf.setTextColor(0, 0, 0);\n  pdf.text(`${overallScore}/100`, margin + 55, yPosition);\n  yPosition += 15;\n\n  // Individual Metrics\n  pdf.setFontSize(14);\n  pdf.text('Individual Metrics', margin, yPosition);\n  yPosition += 10;\n\n  const metrics = [\n    { name: 'Originality', value: analysis.originality_score, color: [99, 102, 241] },\n    { name: 'Completeness', value: analysis.completeness_score, color: [34, 197, 94] },\n    { name: 'Marketability', value: analysis.marketability_score, color: [251, 191, 36] },\n    { name: 'Monetization', value: analysis.monetization_score, color: [236, 72, 153] },\n    { name: 'Usefulness', value: analysis.usefulness_score, color: [59, 130, 246] }\n  ];\n\n  pdf.setFontSize(11);\n  metrics.forEach(metric => {\n    pdf.setTextColor(0, 0, 0);\n    pdf.text(metric.name, margin, yPosition);\n    \n    const score = metric.value || 0;\n    pdf.setFillColor(metric.color[0], metric.color[1], metric.color[2]);\n    pdf.rect(margin + 35, yPosition - 4, (score / 100) * 40, 6, 'F');\n    pdf.text(`${score}/100`, margin + 80, yPosition);\n    yPosition += 8;\n  });\n\n  yPosition += 5;\n\n  // Key Findings\n  if (analysis.key_findings && analysis.key_findings.length > 0) {\n    if (yPosition > pageHeight - 60) {\n      pdf.addPage();\n      yPosition = margin;\n    }\n    \n    pdf.setFontSize(14);\n    pdf.setTextColor(0, 0, 0);\n    pdf.text('Key Findings', margin, yPosition);\n    yPosition += 8;\n\n    pdf.setFontSize(10);\n    pdf.setTextColor(60, 60, 60);\n    analysis.key_findings.forEach((finding: string) => {\n      if (yPosition > pageHeight - 20) {\n        pdf.addPage();\n        yPosition = margin;\n      }\n      const lines = pdf.splitTextToSize(`• ${finding}`, pageWidth - margin * 2);\n      pdf.text(lines, margin + 2, yPosition);\n      yPosition += lines.length * 5 + 2;\n    });\n  }\n\n  // Recommendations\n  if (analysis.recommendations && analysis.recommendations.length > 0) {\n    if (yPosition > pageHeight - 60) {\n      pdf.addPage();\n      yPosition = margin;\n    }\n    \n    yPosition += 5;\n    pdf.setFontSize(14);\n    pdf.setTextColor(0, 0, 0);\n    pdf.text('Recommendations', margin, yPosition);\n    yPosition += 8;\n\n    pdf.setFontSize(10);\n    pdf.setTextColor(60, 60, 60);\n    analysis.recommendations.forEach((rec: string) => {\n      if (yPosition > pageHeight - 20) {\n        pdf.addPage();\n        yPosition = margin;\n      }\n      const lines = pdf.splitTextToSize(`• ${rec}`, pageWidth - margin * 2);\n      pdf.text(lines, margin + 2, yPosition);\n      yPosition += lines.length * 5 + 2;\n    });\n  }\n\n  // Try to capture visual element if provided\n  if (elementId) {\n    try {\n      const element = document.getElementById(elementId);\n      if (element) {\n        const canvas = await html2canvas(element, {\n          scale: 2,\n          backgroundColor: '#ffffff',\n          logging: false\n        });\n        \n        pdf.addPage();\n        const imgData = canvas.toDataURL('image/png');\n        const imgWidth = pageWidth - margin * 2;\n        const imgHeight = (canvas.height * imgWidth) / canvas.width;\n        \n        pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, Math.min(imgHeight, pageHeight - margin * 2));\n      }\n    } catch (error) {\n      console.error('Error capturing visual element:', error);\n    }\n  }\n\n  // Save the PDF\n  const fileName = `analysis_${analysis.repository?.name || 'repository'}_${new Date().toISOString().split('T')[0]}.pdf`;\n  pdf.save(fileName);\n}\n\n/**\n * Export analysis results as CSV\n */\nexport function exportToCSV(analyses: ExportAnalysis[] | ExportAnalysis) {\n  const dataArray = Array.isArray(analyses) ? analyses : [analyses];\n  \n  // CSV Headers\n  const headers = [\n    'Repository Name',\n    'Full Name',\n    'Description',\n    'Language',\n    'Stars',\n    'Forks',\n    'Analysis Date',\n    'Overall Score',\n    'Originality Score',\n    'Completeness Score',\n    'Marketability Score',\n    'Monetization Score',\n    'Usefulness Score',\n    'Key Findings',\n    'Recommendations',\n    'Weaknesses'\n  ];\n\n  // Convert data to CSV rows\n  const rows = dataArray.map(analysis => {\n    return [\n      analysis.repository?.name || '',\n      analysis.repository?.full_name || '',\n      `\"${(analysis.repository?.description || '').replace(/\"/g, '\"\"')}\"`,\n      analysis.repository?.language || '',\n      analysis.repository?.stargazers_count?.toString() || '0',\n      analysis.repository?.forks_count?.toString() || '0',\n      new Date(analysis.createdAt).toLocaleDateString(),\n      analysis.overall_score?.toString() || '0',\n      analysis.originality_score?.toString() || '0',\n      analysis.completeness_score?.toString() || '0',\n      analysis.marketability_score?.toString() || '0',\n      analysis.monetization_score?.toString() || '0',\n      analysis.usefulness_score?.toString() || '0',\n      `\"${(analysis.key_findings?.join('; ') || '').replace(/\"/g, '\"\"')}\"`,\n      `\"${(analysis.recommendations?.join('; ') || '').replace(/\"/g, '\"\"')}\"`,\n      `\"${(analysis.weaknesses?.join('; ') || '').replace(/\"/g, '\"\"')}\"`\n    ];\n  });\n\n  // Combine headers and rows\n  const csvContent = [\n    headers.join(','),\n    ...rows.map(row => row.join(','))\n  ].join('\\n');\n\n  // Create and download the file\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const link = document.createElement('a');\n  const url = URL.createObjectURL(blob);\n  \n  const fileName = dataArray.length > 1 \n    ? `batch_analysis_${new Date().toISOString().split('T')[0]}.csv`\n    : `analysis_${dataArray[0]?.repository?.name || 'repository'}_${new Date().toISOString().split('T')[0]}.csv`;\n  \n  link.setAttribute('href', url);\n  link.setAttribute('download', fileName);\n  link.style.visibility = 'hidden';\n  \n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\n/**\n * Export batch analysis results summary\n */\nexport function exportBatchSummary(analyses: ExportAnalysis[]) {\n  const pdf = new jsPDF('p', 'mm', 'a4');\n  const pageWidth = pdf.internal.pageSize.getWidth();\n  const margin = 15;\n  let yPosition = margin;\n\n  // Title\n  pdf.setFontSize(20);\n  pdf.setTextColor(99, 102, 241);\n  pdf.text('Batch Analysis Summary', pageWidth / 2, yPosition, { align: 'center' });\n  yPosition += 15;\n\n  // Summary Stats\n  pdf.setFontSize(12);\n  pdf.setTextColor(0, 0, 0);\n  pdf.text(`Total Repositories Analyzed: ${analyses.length}`, margin, yPosition);\n  yPosition += 8;\n\n  const avgOverall = Math.round(\n    analyses.reduce((sum, a) => sum + (a.overall_score || 0), 0) / analyses.length\n  );\n  pdf.text(`Average Overall Score: ${avgOverall}/100`, margin, yPosition);\n  yPosition += 8;\n\n  const date = new Date().toLocaleDateString();\n  pdf.text(`Export Date: ${date}`, margin, yPosition);\n  yPosition += 15;\n\n  // Repository List\n  pdf.setFontSize(14);\n  pdf.text('Repository Analysis Results', margin, yPosition);\n  yPosition += 10;\n\n  pdf.setFontSize(10);\n  analyses.forEach((analysis, index) => {\n    if (yPosition > 270) {\n      pdf.addPage();\n      yPosition = margin;\n    }\n\n    pdf.setTextColor(0, 0, 0);\n    pdf.text(`${index + 1}. ${analysis.repository?.name || 'Unknown'}`, margin, yPosition);\n    \n    const score = analysis.overall_score || 0;\n    const scoreColor = score >= 80 ? [34, 197, 94] : score >= 60 ? [251, 191, 36] : [239, 68, 68];\n    pdf.setTextColor(scoreColor[0], scoreColor[1], scoreColor[2]);\n    pdf.text(`Score: ${score}/100`, margin + 80, yPosition);\n    \n    yPosition += 6;\n    \n    if (analysis.repository?.description) {\n      pdf.setTextColor(100, 100, 100);\n      const descLines = pdf.splitTextToSize(analysis.repository.description, pageWidth - margin * 2 - 10);\n      pdf.text(descLines[0], margin + 5, yPosition);\n      yPosition += 6;\n    }\n    \n    yPosition += 2;\n  });\n\n  // Save\n  const fileName = `batch_analysis_summary_${new Date().toISOString().split('T')[0]}.pdf`;\n  pdf.save(fileName);\n}","size_bytes":11090},"client/src/utils/health-indicators.ts":{"content":"export interface HealthIndicator {\n  emoji: string;\n  label: string;\n  color: string;\n  description: string;\n}\n\nexport function getScoreHealthIndicator(score: number): HealthIndicator {\n  if (score >= 90) {\n    return {\n      emoji: '🚀',\n      label: 'Excellent',\n      color: 'text-green-500',\n      description: 'Outstanding performance'\n    };\n  } else if (score >= 75) {\n    return {\n      emoji: '✨',\n      label: 'Great',\n      color: 'text-emerald-500',\n      description: 'Above average performance'\n    };\n  } else if (score >= 60) {\n    return {\n      emoji: '👍',\n      label: 'Good',\n      color: 'text-blue-500',\n      description: 'Solid performance'\n    };\n  } else if (score >= 45) {\n    return {\n      emoji: '⚡',\n      label: 'Fair',\n      color: 'text-yellow-500',\n      description: 'Room for improvement'\n    };\n  } else if (score >= 30) {\n    return {\n      emoji: '⚠️',\n      label: 'Needs Work',\n      color: 'text-orange-500',\n      description: 'Significant improvements needed'\n    };\n  } else {\n    return {\n      emoji: '🔧',\n      label: 'Critical',\n      color: 'text-red-500',\n      description: 'Major issues to address'\n    };\n  }\n}\n\nexport function getMetricHealthIndicator(metricName: string, score: number): string {\n  const indicators: Record<string, Record<string, string>> = {\n    originality: {\n      high: '💎', // Diamond for unique/innovative\n      medium: '🌟', // Star for somewhat unique\n      low: '📋' // Clipboard for common/standard\n    },\n    completeness: {\n      high: '✅', // Check mark for complete\n      medium: '🔨', // Hammer for work in progress\n      low: '🏗️' // Construction for early stage\n    },\n    marketability: {\n      high: '💰', // Money bag for high market potential\n      medium: '📈', // Chart for growing potential\n      low: '📊' // Basic chart for low potential\n    },\n    monetization: {\n      high: '💸', // Money with wings for high revenue potential\n      medium: '💵', // Dollar bill for moderate potential\n      low: '🪙' // Coin for low potential\n    },\n    usefulness: {\n      high: '🎯', // Target for highly useful\n      medium: '🔧', // Wrench for moderately useful\n      low: '📦' // Box for limited use\n    }\n  };\n\n  const metric = indicators[metricName.toLowerCase()];\n  if (!metric) {\n    return getScoreHealthIndicator(score).emoji;\n  }\n\n  if (score >= 70) {\n    return metric.high;\n  } else if (score >= 40) {\n    return metric.medium;\n  } else {\n    return metric.low;\n  }\n}\n\nexport function getOverallHealth(scores: Record<string, number>): HealthIndicator {\n  const avgScore = Object.values(scores).reduce((sum, score) => sum + score, 0) / Object.values(scores).length;\n  return getScoreHealthIndicator(avgScore);\n}\n\nexport function getTrendIndicator(trend: 'up' | 'down' | 'stable'): string {\n  switch (trend) {\n    case 'up':\n      return '📈';\n    case 'down':\n      return '📉';\n    case 'stable':\n      return '➡️';\n    default:\n      return '➡️';\n  }\n}\n\nexport function getActivityLevel(commits: number, lastUpdate: Date): string {\n  const daysSinceUpdate = Math.floor((Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60 * 24));\n  \n  if (daysSinceUpdate <= 7 && commits > 20) {\n    return '🔥'; // Very active\n  } else if (daysSinceUpdate <= 30 && commits > 10) {\n    return '⚡'; // Active\n  } else if (daysSinceUpdate <= 90) {\n    return '🌱'; // Moderate activity\n  } else if (daysSinceUpdate <= 180) {\n    return '🍂'; // Low activity\n  } else {\n    return '❄️'; // Inactive/dormant\n  }\n}","size_bytes":3568},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","size_bytes":823},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":770},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}